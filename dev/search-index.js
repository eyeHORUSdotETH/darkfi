var searchIndex = JSON.parse('{\
"darkfi":{"doc":"","t":"","n":["ANSI_LOGO","ClientFailed","ClientResult","Error","Result","async_daemonize","blockchain","cli_desc","consensus","error","event_graph","geode","impl_p2p_message","net","rpc","runtime","system","tx","util","validator","wallet","zk","zkas","Block","BlockDifficultyStore","BlockDifficultyStoreOverlay","BlockInfo","BlockOrderStore","BlockOrderStoreOverlay","BlockStore","BlockStoreOverlay","Blockchain","BlockchainOverlay","BlockchainOverlayPtr","BlocksSlotsStore","BlocksSlotsStoreOverlay","ContractStateStore","ContractStateStoreOverlay","Header","HeaderStore","HeaderStoreOverlay","PendingTxOrderStore","PendingTxStore","SledDbOverlayPtr","SlotStore","SlotStoreOverlay","TxStore","TxStoreOverlay","WasmStore","WasmStoreOverlay","__clone_box","add_block","add_block","add_pending_txs","alloc","alloc","as_any","as_any","as_any_mut","as_any_mut","atomic_write","block_store","blocks","blocks","blocks_slots","blocks_slots","borrow","borrow","borrow_mut","borrow_mut","checkpoint","clone","clone_into","contract_store","contracts","contracts","deref","deref","deref_mut","deref_mut","deserialize","deserialize","difficulties","difficulties","drop","drop","from","from","full_clone","genesis","get_all","get_blocks_after","get_blocks_by_hash","get_blocks_by_hash","get_blocks_by_slot","get_blocks_infos","get_blocks_infos","get_pending_txs","get_slots_after","get_slots_by_id","has_block","has_block","has_slot","has_slot_order","header_store","headers","headers","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","is_empty","is_empty","last","last","last_block","last_block","last_slot","layout_raw","layout_raw","len","new","new","order","order","overlay","parse_record","parse_u64_key_record","pending_txs","pending_txs_order","phantom","phantom","pointer_metadata","pointer_metadata","ptr","ptr","remove_pending_txs","revert_to_checkpoint","sled_db","slot_store","slots","slots","to_owned","transactions","transactions","try_from","try_from","try_into","try_into","tx_store","txs_len","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","wasm_bincode","wasm_bincode","Block","BlockDifficulty","BlockDifficultyStore","BlockDifficultyStoreOverlay","BlockInfo","BlockOrder","BlockOrderStore","BlockOrderStoreOverlay","BlockStore","BlockStoreOverlay","SLED_BLOCK_DIFFICULTY_TREE","SLED_BLOCK_ORDER_TREE","SLED_BLOCK_TREE","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","append_tx","append_txs","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","block","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","contains","contains","cummulative_difficulty","decode","decode","decode","decode","decode_async","decode_async","decode_async","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","difficulty","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","encode","encode","encode","encode","encode_async","encode_async","encode_async","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from_block_info","full_hash","get","get","get","get","get","get_after","get_all","get_all","get_all","get_first","get_last","get_last","get_last_n","hash","hash","header","header","height","init","init","init","init","init","init","init","init","init","init","insert","insert","insert","insert","insert","insert","insert_batch","insert_batch","insert_batch","into","into","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","is_empty","is_empty","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","len","new","new","new","new","new","new","new","new","new","new_empty","number","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","sign","signature","signature","slots","timestamp","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","txs","txs","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","ContractStateStore","ContractStateStoreOverlay","SLED_BINCODE_TREE","SLED_CONTRACTS_TREE","SMART_CONTRACT_ZKAS_DB_NAME","WasmStore","WasmStoreOverlay","__clone_box","__clone_box","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","from","from","from","from","get","get","get_zkas","get_zkas","init","init","init","init","init","insert","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","layout_raw","layout_raw","layout_raw","layout_raw","lookup","lookup","new","new","new","new","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","remove","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","Header","HeaderStore","HeaderStoreOverlay","SLED_HEADER_TREE","__clone_box","__clone_box","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","contains","decode","decode_async","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","encode","encode_async","epoch","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","from","from","get","get","get_all","hash","height","init","init","init","insert","insert","insert_batch","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","layout_raw","layout_raw","layout_raw","new","new","new","nonce","pointer_metadata","pointer_metadata","pointer_metadata","previous","timestamp","to_owned","to_owned","tree","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","version","vzip","vzip","vzip","BlocksSlotsStore","BlocksSlotsStoreOverlay","SLED_BLOCK_SLOTS_TREE","SLED_SLOT_TREE","SlotStore","SlotStoreOverlay","__clone_box","__clone_box","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","contains","contains","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","from","from","from","from","get","get","get","get","get_after","get_all","get_all","get_by_id","get_last","get_last","init","init","init","init","insert","insert","insert","insert","insert_batch","insert_batch","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","is_empty","layout_raw","layout_raw","layout_raw","layout_raw","len","new","new","new","new","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","PendingTxOrderStore","PendingTxStore","SLED_PENDING_TX_ORDER_TREE","SLED_PENDING_TX_TREE","SLED_TX_TREE","TxStore","TxStoreOverlay","__clone_box","__clone_box","__clone_box","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","contains","contains","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","from","from","from","from","get","get","get","get_all","get_all","get_all","init","init","init","init","insert","insert","insert","insert","insert_batch","insert_batch","insert_batch","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","is_empty","layout_raw","layout_raw","layout_raw","layout_raw","len","new","new","new","new","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","remove","remove","remove_batch","remove_batch","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","Block","BlockInfo","BlockProposal","Clock","EncryptedTxRcpt","Float10","Header","LeadCoin","LeadInfo","LeadProof","TESTNET_BOOTSTRAP_TIMESTAMP","TESTNET_BOOTSTRAP_TIMESTAMP","TESTNET_GENESIS_HASH_BYTES","TESTNET_GENESIS_HASH_BYTES","TESTNET_GENESIS_TIMESTAMP","TESTNET_GENESIS_TIMESTAMP","TESTNET_INITIAL_DISTRIBUTION","TESTNET_INITIAL_DISTRIBUTION","Ticks","TransferStx","Tx","TxRcpt","ValidatorState","ValidatorStatePtr","block","clock","constants","fees","lead_coin","lead_info","proto","rcpt","state","stx","task","tx","types","utils","validator","wallet","Block","BlockInfo","BlockOrder","BlockProposal","BlockResponse","Header","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","block","block","blockhash","blockhash","blocks","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","decode","decode","decode","decode","decode","decode","decode_async","decode_async","decode_async","decode_async","decode_async","decode_async","default","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","encode","encode","encode","encode","encode","encode","encode_async","encode_async","encode_async","encode_async","encode_async","encode_async","epoch","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","genesis_block","genesis_header","hash","header","header","header","headerhash","init","init","init","init","init","init","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","lead_info","lead_info","magic","magic","new","new","new","new","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","previous","root","slot","slot","timestamp","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","txs","txs","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","version","vzip","vzip","vzip","vzip","vzip","vzip","BB_E","BB_SL","Clock","GENESIS","IDLE","NEWEPOCH","NEWSLOT","OUTOFSYNC","TOCKS","Ticks","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","e","e_len","epoch_abs","fmt","from","from","genesis_time","get_e_len","get_sl_len","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","layout_raw","layout_raw","new","peers","pointer_metadata","pointer_metadata","sl","sl_len","slot_abs","slot_relative","sync","tick_len","tick_time","ticking","ticks","time","time_to_genesis","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","e","e","e","sl","sl","sl","BLOCK_INFO_MAGIC_BYTES","BLOCK_MAGIC_BYTES","BLOCK_VERSION","CONSENSUS_COIN_COL","CONSENSUS_COIN_TABLE","EPOCH_LENGTH","FINAL_SYNC_DUR","FLOAT10_EPSILON","FLOAT10_FIVE","FLOAT10_NEG_ONE","FLOAT10_NEG_TWO","FLOAT10_NINE","FLOAT10_ONE","FLOAT10_TEN","FLOAT10_THREE","FLOAT10_TWO","FLOAT10_ZERO","F_HISTORY_LOG","GENESIS_TOTAL_STAKE","KD","KI","KP","LEADER_HISTORY_LOG","LEADER_PROOF_K","LOTTERY_HEAD_START","LOTTERY_HISTORY_LOG","MAINNET_BOOTSTRAP_TIMESTAMP","MAINNET_GENESIS_HASH_BYTES","MAINNET_GENESIS_TIMESTAMP","MAINNET_INITIAL_DISTRIBUTION","MAX_DER","MAX_F","MIN_DER","MIN_F","P","PID_OUT_STEP","PI_COMMITMENT_ROOT","PI_COMMITMENT_X_INDEX","PI_COMMITMENT_Y_INDEX","PI_MU_RHO_INDEX","PI_MU_Y_INDEX","PI_NULLIFIER_INDEX","PI_SIGMA1_INDEX","PI_SIGMA2_INDEX","PRF_NULLIFIER_PREFIX","RADIX_BITS","REWARD","SLOT_TIME","SYNC_MAX_RETRIES","SYNC_RETRIES_DURATION","TESTNET_BOOTSTRAP_TIMESTAMP","TESTNET_GENESIS_HASH_BYTES","TESTNET_GENESIS_TIMESTAMP","TESTNET_INITIAL_DISTRIBUTION","TXS_CAP","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","circuit_gas_use","LeadCoin","LeadCoinSecrets","MERKLE_DEPTH","MERKLE_DEPTH_LEAD_COIN","ONE","PREFIX_CM","PREFIX_EVL","PREFIX_PK","PREFIX_SEED","PREFIX_SN","ZERO","__clone_box","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","coin1_blind","coin1_commitment","coin1_commitment_merkle_path","coin1_commitment_pos","coin1_commitment_root","coin1_sk","coin1_sk_merkle_path","coin1_sk_pos","coin1_sk_root","commitment","create_lead_proof","create_xfer_proof","decode","decode_async","deref","deref","deref_mut","deref_mut","derive_coin","derived_commitment","derived_rho","deserialize","deserialize","drop","drop","election_seeds","election_seeds_u64","encode","encode_async","fmt","from","from","generate","headstart","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","is_leader","layout_raw","layout_raw","merkle_paths","merkle_roots","new","nonce","pk","pointer_metadata","pointer_metadata","public_inputs","secret_keys","slot","sn","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","util_derived_rho","util_pk","value","vzip","vzip","LeadInfo","LeadProof","__clone_box","__clone_box","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","coin_eta","coin_slot","decode","decode","decode_async","decode_async","default","default","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","encode","encode","encode_async","encode_async","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from","from","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","layout_raw","layout_raw","leaders","new","pointer_metadata","pointer_metadata","proof","proof","public_inputs","public_key","signature","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","verify","vzip","vzip","ProtocolProposal","ProtocolSync","ProtocolSyncConsensus","ProtocolTx","block_sub","channel","channel","channel_address","channel_address","consensus_mode","jobsman","jobsman","jobsman","jobsman","p2p","p2p","p2p","proposal_sub","protocol_proposal","protocol_sync","protocol_sync_consensus","protocol_tx","request_sub","request_sub","slot_request_sub","slots_sub","state","state","state","state","sync_request_sub","tx_sub","ProtocolProposal","as_any","as_any_mut","borrow","borrow_mut","channel_address","deref","deref_mut","deserialize","drop","from","handle_receive_proposal","init","init","into","into_any","into_any_arc","into_any_rc","jobsman","layout_raw","name","p2p","pointer_metadata","proposal_sub","start","state","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","BATCH","ProtocolSync","as_any","as_any_mut","block_sub","borrow","borrow_mut","channel","consensus_mode","deref","deref_mut","deserialize","drop","from","handle_receive_block","handle_receive_request","handle_receive_slot","handle_receive_slot_request","init","init","into","into_any","into_any_arc","into_any_rc","jobsman","layout_raw","name","p2p","pointer_metadata","request_sub","slot_request_sub","slots_sub","start","state","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","ProtocolSyncConsensus","as_any","as_any_mut","borrow","borrow_mut","channel","deref","deref_mut","deserialize","drop","from","handle_receive_request","handle_receive_sync_request","init","init","into","into_any","into_any_arc","into_any_rc","jobsman","layout_raw","name","pointer_metadata","request_sub","start","state","sync_request_sub","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","ProtocolTx","as_any","as_any_mut","borrow","borrow_mut","channel_address","deref","deref_mut","deserialize","drop","from","handle_receive_tx","init","init","into","into_any","into_any_arc","into_any_rc","jobsman","layout_raw","name","p2p","pointer_metadata","start","state","try_from","try_into","tx_sub","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","AEAD_TAG_SIZE","CIPHER_SIZE","EncryptedTxRcpt","PLAINTEXT_SIZE","TxRcpt","__clone_box","__clone_box","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","ciphertext","clone","clone","clone_into","clone_into","decode","decode","decode_async","decode_async","decrypt","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","encode","encode","encode_async","encode_async","encrypt","ephem_public","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","layout_raw","layout_raw","opening","pointer_metadata","pointer_metadata","rho","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","value","vzip","vzip","ConsensusRequest","ConsensusResponse","ConsensusState","ConsensusSyncRequest","ConsensusSyncResponse","Fork","ForkInfo","SlotRequest","SlotResponse","StateCheckpoint","StateCheckpointInfo","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","add","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","blockchain","bootstrap_slot","bootstrap_slot","bootstrap_slot","bootstrap_ts","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","calc_sigmas","check_chain","check_state_checkpoint","checked_finalization","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","coins","coins","coins_tree","coins_tree","create_coins","current_slot","decode","decode","decode","decode","decode","decode","decode","decode","decode_async","decode_async","decode_async","decode_async","decode_async","decode_async","decode_async","decode_async","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","discrete_pid","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","encode","encode","encode","encode","encode","encode","encode","encode","encode_async","encode_async","encode_async","encode_async","encode_async","encode_async","encode_async","encode_async","epoch","epoch_changed","err_history","err_history","f_err","f_history","f_history","find_extended_chain_index","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fork_hashes","forks","forks","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","generate_slot","genesis_block","genesis_block","genesis_block","get_last_eta","get_slot","init","init","init","init","init","init","init","init","init","init","init","init_coins","initial_distribution","into","into","into","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","is_empty","is_slot_leader","last_slot","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","longest_chain_index","longest_chain_length","new","new","new","nullifiers","nullifiers","nullifiers","nullifiers","participating","pending_txs","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","previous_leaders","proposal","proposal","proposal_exists","proposing","proposing","reset","reward","sequence","sequence","set_participating","sigmas","single_node","slot","slot_rewards","slots","slots","slots","slots_is_empty","time_keeper","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","total_stake","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","update_forks_checkpoints","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wallet","win_inv_prob_with_full_stake","TransferStx","__clone_box","as_any","as_any_mut","borrow","borrow_mut","change_coin_commitment","clone","clone_into","coin_commitment","coin_pk","coin_root_sk","decode","decode_async","deref","deref_mut","deserialize","drop","encode","encode_async","fmt","from","init","into","into_any","into_any_arc","into_any_rc","layout_raw","nullifier","pointer_metadata","proof","public_inputs","root","slot","to_owned","transfered_coin_commitment","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","verify","vzip","block_sync","block_sync_task","consensus_sync","consensus_sync_task","proposal","proposal_task","block_sync_task","consensus_sync_task","consensus_loop","finalization_period","proposal_task","propose_period","Tx","__clone_box","as_any","as_any_mut","borrow","borrow_mut","cipher","clone","clone_into","decode","decode_async","deref","deref_mut","deserialize","drop","encode","encode_async","fmt","from","init","into","into_any","into_any_arc","into_any_rc","layout_raw","pointer_metadata","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","xfer","B","Float10","__clone_box","abs","add","add_assign","as_any","as_any_mut","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","div","drop","eq","fmt","fmt","from","init","into","into_any","into_any_arc","into_any_rc","layout_raw","ln","mul","partial_cmp","pointer_metadata","powf","repr","sub","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","base2ibig","fbig2base","fbig2ibig","ValidatorState","ValidatorStatePtr","alloc","append_pending_txs","append_tx","as_any","as_any_mut","blockchain","borrow","borrow_mut","chain_finalization","consensus","deref","deref_mut","deserialize","drop","from","init","into","into_any","into_any_arc","into_any_rc","layout_raw","lead_proving_key","lead_verifying_key","new","phantom","pointer_metadata","propose","ptr","purge_pending_txs","receive_blocks","receive_finalized_block","receive_finalized_slots","receive_proposal","receive_slots","receive_sync_blocks","single_node","subscribers","synced","try_from","try_into","type_id","unproposed_txs","upcast_any_box","upcast_any_mut","upcast_any_ref","verify_transaction","verify_transactions","vzip","wallet","CONSENSUS_KEYS_COLUMN_IS_DEFAULT","CONSENSUS_KEYS_TABLE","ConsensusWallet","get_default_keypair","AcceptConnectionFailed","AcceptTlsConnectionFailed","AddrParseError","AlreadySeenTx","ArtiError","AsyncChannelRecvError","AsyncChannelSendError","BackwardsTime","BadOperationType","BindFailed","Blake3FromHexError","BlockAlreadyExists","BlockContainsNoTransactions","BlockDifficultyNotFound","BlockIsInvalid","BlockNotFound","BlockNumberNotFound","BlockSlotsNotFound","BlockVersionIsInvalid","Bs58DecodeError","ChannelStopped","ChannelTimeout","ClientFailed","ClientFailed","ClientResult","ClockOutOfSync","CoinFromBytes","CoinIsNotSlotProducer","ConfigInvalid","ConfigNotFound","ConnectFailed","ConnectTimeout","ConnectionClosed","ContractAlreadyInitialized","ContractError","ContractExecError","ContractInitError","ContractNotFound","ContractStateNotFound","Custom","DagSyncFailed","DashuConversionError","DashuParseError","DecodeError","DetachedTaskStopped","EncodeError","Err","Err","ErroneousTxs","ErroneousTxsDetected","Error","EventNotFound","ExtendedChainIndexNotFound","ForksNotFound","FutureSlotReceived","GeodeChunkNotFound","GeodeChunkRouteNotFound","GeodeFileNotFound","GeodeFileRouteNotFound","GeodeNeedsGc","HeaderNotFound","InfallibleError","InternalError","InvalidAddress","InvalidAddress","InvalidAmount","InvalidClock","InvalidDialerScheme","InvalidInputLengths","InvalidJson","InvalidListenerScheme","InvalidPublicInputsError","InvalidSignature","InvalidSignature","InvalidTokenId","InvalidZkProof","Io","Io","IoError","JsonGenerateError","JsonParseError","JsonRpcError","KeypairPathNotFound","LeaderProofVerification","MalformedPacket","MinerTaskStopped","MissingCalls","MissingDispatcher","MissingFee","MissingSignatures","NetworkNotConnected","NetworkOperationFailed","NetworkServiceStopped","NoSocks5UrlFound","NoUrlFound","NonMinimalVarInt","NotEnoughValue","NoteDecryptionFailed","Ok","Ok","P2PNetworkStopped","ParseFailed","ParseFloatError","ParseIntError","PlonkError","PoWCuttofCalculationError","PoWInvalidOutHash","PoWInvalidTimestamp","PoWTotalWorkIsZero","ProposalAfterFinalizationError","ProposalContainsUnknownSlots","ProposalDifferentCoinEtaError","ProposalHashesMissmatchError","ProposalHeadersMissmatchError","ProposalIsSpent","ProposalNotForCurrentSlotError","ProposalProposerNotEligible","ProposalPublicValuesMismatched","ProposalTaskStopped","ProposalTxsExceedCapError","PublicKeyFromBytes","PublicKeyFromStr","Result","RpcClientStopped","RpcConnectionsExhausted","RpcError","RpcServerError","RpcServerStopped","RusqliteError","RustlsError","RustlsInvalidDns","SecretKeyFromBytes","SecretKeyFromStr","SeedFailed","SemverError","SetLoggerError","SledError","SledTransactionError","SlotIsInvalid","SlotNotFound","SocksError","StateTransitionError","StrUtf8Error","TimeoutError","TokenParseError","TomlDeserializeError","TorError","TransactionAlreadySeen","TransactionNotFound","TransferTxVerification","TryFromSliceError","TxRcptDecryptionError","TxVerifyFailed","TxVerifyFailed","UnexpectedJsonRpc","UnknownNodeError","UnsupportedChain","UnsupportedOS","UnsupportedTransport","UnsupportedTransportUpgrade","UrlParse","UrlParseError","Utf8Error","ValueIsNotObject","VerifyError","VerifyingSlotMissmatch","WalletEmptyPassword","WalletInsufficientBalance","WalletTreeExists","WasmBincodeNotFound","WasmerCompileError","WasmerExportError","WasmerInstantiationError","WasmerMemoryError","WasmerOomError","WasmerRuntimeError","WrongPublicInputsCount","WrongWitnessType","WrongWitnessesCount","ZkasBincodeNotFound","ZkasDecoderError","__clone_box","__clone_box","__clone_box","__clone_box","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_error","as_error","as_error","as_error","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","init","init","init","init","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","layout_raw","layout_raw","layout_raw","layout_raw","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","retrieve_erroneous_txs","source","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","EVENT_TIME_DRIFT","Event","EventGraph","EventGraphPtr","GENESIS_CONTENTS","INITIAL_GENESIS","NULL_ID","N_EVENT_PARENTS","_handle_stop","alloc","as_any","as_any_mut","borrow","borrow_mut","broadcasted_ids","dag","dag_get","dag_insert","dag_prune","dag_prune_task","dag_sync","days_rotation","days_rotation","deref","deref_mut","deserialize","dfs_topological_sort","drop","event","event_sub","find_unreferenced_tips","from","generate_genesis","get_unreferenced_tips","get_unreferenced_tips_sorted","init","into","into_any","into_any_arc","into_any_rc","layout_raw","new","order_events","p2p","phantom","pointer_metadata","proto","prune_task","ptr","share_same_parents","try_from","try_into","type_id","unreferenced_tips","upcast_any_box","upcast_any_mut","upcast_any_ref","util","vzip","Event","__clone_box","as_any","as_any_mut","borrow","borrow_mut","clone","clone_into","content","content","decode","decode_async","deref","deref_mut","deserialize","drop","encode","encode_async","fmt","from","id","init","into","into_any","into_any_arc","into_any_rc","layout_raw","new","parents","pointer_metadata","timestamp","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","validate","vzip","EventPut","EventRep","EventReq","MALICIOUS_THRESHOLD","ProtocolEventGraph","REPLY_TIMEOUT","TipRep","TipReq","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","_tip_rep_sub","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","channel","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","decode","decode","decode","decode","decode","decode_async","decode_async","decode_async","decode_async","decode_async","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","encode","encode","encode","encode","encode","encode_async","encode_async","encode_async","encode_async","encode_async","ev_put_sub","ev_rep_sub","ev_req_sub","event_graph","from","from","from","from","from","from","handle_event_put","handle_event_req","handle_tip_req","init","init","init","init","init","init","init","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","jobsman","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","malicious_count","name","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","start","tip_req_sub","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","vzip","DAY","days_since","midnight_timestamp","next_rotation_timestamp","CHUNKS_PATH","ChunkedFile","FILES_PATH","Geode","MAX_CHUNK_SIZE","__clone_box","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","chunks_path","clone","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","files_path","from","from","garbage_collect","get","get_chunk","init","init","insert","insert_chunk","insert_file","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","is_complete","iter","layout_raw","layout_raw","new","new","pointer_metadata","pointer_metadata","read_metadata","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","ChannelPtr","Message","MessageSubscription","P2p","P2pPtr","ProtocolBase","ProtocolBasePtr","ProtocolJobsManager","ProtocolJobsManagerPtr","SESSION_ALL","Settings","acceptor","channel","connector","dnet","hosts","message","message_subscriber","p2p","protocol","session","settings","transport","Acceptor","AcceptorPtr","accept","alloc","as_any","as_any_mut","borrow","borrow_mut","channel_subscriber","conn_count","deref","deref_mut","deserialize","drop","from","handle_stop","init","into","into_any","into_any_arc","into_any_rc","layout_raw","new","phantom","pointer_metadata","ptr","run_accept_loop","session","start","stop","subscribe","task","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Channel","ChannelInfo","ChannelPtr","__clone_box","addr","address","alloc","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","decode","decode_async","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","encode","encode_async","fmt","fmt","from","from","handle_stop","id","info","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","is_eof_error","is_stopped","layout_raw","layout_raw","main_receive_loop","message_subsystem","message_subsystem","new","new","p2p","phantom","pointer_metadata","pointer_metadata","ptr","reader","receive_task","send","send_message","session","session","session_type_id","setup_dispatchers","start","stop","stop_subscriber","stopped","subscribe_msg","subscribe_stop","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","writer","Connector","as_any","as_any_mut","borrow","borrow_mut","connect","deref","deref_mut","deserialize","drop","from","init","into","into_any","into_any_arc","into_any_rc","layout_raw","new","pointer_metadata","session","settings","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","DnetEvent","InboundConnected","InboundConnected","InboundDisconnected","InboundDisconnected","InboundInfo","MessageInfo","OutboundPeerDiscovery","OutboundPeerDiscovery","OutboundSlotConnected","OutboundSlotConnected","OutboundSlotConnecting","OutboundSlotConnecting","OutboundSlotDisconnected","OutboundSlotDisconnected","OutboundSlotSleeping","OutboundSlotSleeping","RecvMessage","RecvMessage","SendMessage","SendMessage","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","addr","addr","addr","addr","addr","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","attempt","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chan","chan","chan","channel_id","channel_id","channel_id","channel_id","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmd","cmd","cmd","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","dnetev","drop","drop","drop","drop","drop","drop","drop","drop","err","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","slot","slot","slot","slot","state","time","time","time","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","Hosts","HostsPtr","LOCAL_HOST_STRS","addrs","alloc","as_any","as_any_mut","borrow","borrow_mut","contains","deref","deref_mut","deserialize","drop","fetch_all","fetch_exluding_schemes","fetch_n_random","fetch_n_random_excluding_schemes","fetch_n_random_with_schemes","fetch_with_schemes","filter_addresses","from","init","into","into_any","into_any_arc","into_any_rc","is_empty","is_local_host","is_rejected","layout_raw","mark_rejected","new","phantom","pointer_metadata","ptr","quarantine","quarantine","rejected","remove","settings","store","store_subscriber","subscribe_store","try_from","try_into","type_id","unmark_rejected","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","AddrsMessage","GetAddrsMessage","MAGIC_BYTES","Message","NAME","Packet","PingMessage","PongMessage","VerackMessage","VersionMessage","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","addrs","app_version","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","command","decode","decode","decode","decode","decode","decode","decode","decode_async","decode_async","decode_async","decode_async","decode_async","decode_async","decode_async","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","encode","encode","encode","encode","encode","encode","encode","encode_async","encode_async","encode_async","encode_async","encode_async","encode_async","encode_async","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","max","node_id","nonce","nonce","payload","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","read_packet","send_packet","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","transports","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","vzip","vzip","Err","MessageDispatcher","MessageDispatcherInterface","MessageResult","MessageSubscription","MessageSubscriptionId","MessageSubsystem","Ok","_trigger_all","add_dispatch","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","dispatchers","drop","drop","drop","fmt","fmt","from","from","from","id","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","layout_raw","layout_raw","layout_raw","new","new","notify","parent","pointer_metadata","pointer_metadata","pointer_metadata","random_id","receive","recv_queue","subs","subscribe","subscribe","trigger","trigger","trigger_error","trigger_error","trigger_error","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unsubscribe","unsubscribe","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","ConnectedChannels","P2p","P2pPtr","PendingChannels","add_pending","alloc","as_any","as_any_mut","borrow","borrow_mut","broadcast","broadcast_to","broadcast_with_exclude","channel_subscriber","channels","channels","data","data","deref","deref_mut","deserialize","dnet_disable","dnet_enable","dnet_enabled","dnet_notify","dnet_subscribe","dnet_subscriber","drop","executor","executor","exists","from","hosts","hosts","init","into","into_any","into_any_arc","into_any_rc","is_connected","layout_raw","lock_ops","lock_ops","new","peer_discovery_running","pending","phantom","pointer_metadata","protocol_registry","protocol_registry","ptr","random_channel","remove","remove_pending","seed","session_inbound","session_inbound","session_manual","session_manual","session_outbound","session_outbound","settings","settings","start","state","state","stop","store","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","ProtocolAddress","ProtocolPing","ProtocolSeed","ProtocolVersion","protocol_address","protocol_base","protocol_jobs_manager","protocol_ping","protocol_registry","protocol_seed","protocol_version","register_default_protocols","PROTO_NAME","ProtocolAddress","addrs_sub","as_any","as_any_mut","borrow","borrow_mut","channel","deref","deref_mut","deserialize","drop","from","get_addrs_sub","handle_receive_addrs","handle_receive_get_addrs","hosts","init","init","into","into_any","into_any_arc","into_any_rc","jobsman","layout_raw","name","pointer_metadata","send_my_addrs","settings","start","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","ProtocolBase","ProtocolBasePtr","alloc","name","phantom","ptr","start","ProtocolJobsManager","ProtocolJobsManagerPtr","alloc","as_any","as_any_mut","borrow","borrow_mut","channel","close_all_tasks","deref","deref_mut","deserialize","drop","from","handle_stop","init","into","into_any","into_any_arc","into_any_rc","layout_raw","name","new","phantom","pointer_metadata","ptr","spawn","start","tasks","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","PROTO_NAME","ProtocolPing","as_any","as_any_mut","borrow","borrow_mut","channel","deref","deref_mut","deserialize","drop","from","init","init","into","into_any","into_any_arc","into_any_rc","jobsman","layout_raw","name","ping_sub","pointer_metadata","pong_sub","random_nonce","reply_to_ping","run_ping_pong","settings","start","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Constructor","ProtocolRegistry","as_any","as_any_mut","attach","borrow","borrow_mut","constructors","default","deref","deref_mut","deserialize","drop","from","init","into","into_any","into_any_arc","into_any_rc","layout_raw","new","pointer_metadata","register","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","PROTO_NAME","ProtocolSeed","addr_sub","as_any","as_any_mut","borrow","borrow_mut","channel","deref","deref_mut","deserialize","drop","from","hosts","init","init","into","into_any","into_any_arc","into_any_rc","layout_raw","name","pointer_metadata","send_self_address","settings","start","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","ProtocolVersion","as_any","as_any_mut","borrow","borrow_mut","channel","deref","deref_mut","deserialize","drop","exchange_versions","from","hosts","init","into","into_any","into_any_arc","into_any_rc","layout_raw","new","pointer_metadata","recv_version","run","send_version","settings","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","verack_sub","version_sub","vzip","InboundSession","InboundSessionPtr","ManualSession","ManualSessionPtr","OutboundSession","OutboundSessionPtr","SESSION_ALL","SESSION_INBOUND","SESSION_MANUAL","SESSION_OUTBOUND","SESSION_SEED","SeedSyncSession","SeedSyncSessionPtr","Session","SessionBitFlag","SessionWeakPtr","alloc","inbound_session","manual_session","outbound_session","p2p","perform_handshake_protocols","ptr","register_channel","remove_sub_on_stop","seedsync_session","type_id","InboundSession","InboundSessionPtr","accept_tasks","acceptors","alloc","as_any","as_any_mut","borrow","borrow_mut","channel_sub_loop","deref","deref_mut","deserialize","drop","from","init","into","into_any","into_any_arc","into_any_rc","layout_raw","new","p2p","p2p","phantom","pointer_metadata","ptr","setup_channel","start","start_accept_session","stop","try_from","try_into","type_id","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","ManualSession","ManualSessionPtr","alloc","as_any","as_any_mut","borrow","borrow_mut","channel_connect_loop","channel_subscriber","connect","connect_slots","deref","deref_mut","deserialize","drop","from","init","into","into_any","into_any_arc","into_any_rc","layout_raw","new","p2p","p2p","phantom","pointer_metadata","ptr","stop","try_from","try_into","type_id","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","OutboundSession","OutboundSessionPtr","PeerDiscovery","Slot","alloc","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","channel_id","channel_subscriber","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","fetch_address_with_lock","from","from","from","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","layout_raw","layout_raw","layout_raw","new","new","new","notify","notify","p2p","p2p","p2p","p2p","peer_discovery","phantom","pointer_metadata","pointer_metadata","pointer_metadata","process","process","ptr","run","run","session","session","session","session","setup_channel","slot","slot_info","slots","start","start","start","stop","stop","stop","try_connect","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","wait","wakeup_peer_discovery","wakeup_self","wakeup_self","wakeup_slots","SeedSyncSession","SeedSyncSessionPtr","alloc","as_any","as_any_mut","borrow","borrow_mut","deref","deref_mut","deserialize","drop","from","init","into","into_any","into_any_arc","into_any_rc","layout_raw","new","p2p","p2p","phantom","pointer_metadata","ptr","start","start_seed","try_from","try_into","type_id","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Settings","SettingsOpt","SettingsPtr","__clone_box","__clone_box","alloc","allowed_transports","allowed_transports","app_version","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","channel_handshake_timeout","channel_handshake_timeout","channel_heartbeat_interval","channel_heartbeat_interval","clap","clone","clone","clone_into","clone_into","default","default","deref","deref","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","external_addrs","external_addrs","fmt","fmt","from","from","from","from_clap","hosts_quarantine_limit","hosts_quarantine_limit","inbound","inbound_addrs","inbound_connections","inbound_connections","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","layout_raw","layout_raw","localnet","localnet","manual_attempt_limit","manual_attempt_limit","merge","node_id","node_id","outbound_connect_timeout","outbound_connect_timeout","outbound_connections","outbound_connections","outbound_peer_discovery_attempt_time","outbound_peer_discovery_attempt_time","outbound_peer_discovery_cooloff_time","outbound_peer_discovery_cooloff_time","peers","peers","phantom","pointer_metadata","pointer_metadata","ptr","seeds","seeds","to_owned","to_owned","transport_mixing","transport_mixing","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","Dialer","DialerVariant","Listener","ListenerVariant","Nym","NymTls","PtListener","PtStream","Tcp","Tcp","TcpTls","TcpTls","Tor","TorTls","Unix","Unix","__clone_box","__clone_box","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","dial","drop","drop","drop","drop","endpoint","endpoint","endpoint","endpoint","enforce_abspath","enforce_hostport","fmt","fmt","from","from","from","from","init","init","init","init","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","layout_raw","layout_raw","layout_raw","layout_raw","listen","new","new","next","nym","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","tcp","tls","to_owned","to_owned","tor","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unix","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","variant","variant","vzip","vzip","vzip","vzip","ConnectionId","NymDialer","__clone_box","__clone_box","_do_dial","_from_bytes","_generate","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from","get_hash","hash","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","layout_raw","layout_raw","new","pointer_metadata","pointer_metadata","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","TcpDialer","TcpListener","__clone_box","__clone_box","as_any","as_any","as_any_mut","as_any_mut","backlog","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","create_socket","create_socket","deref","deref","deref_mut","deref_mut","deserialize","deserialize","do_dial","do_listen","drop","drop","fmt","fmt","from","from","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","layout_raw","layout_raw","new","new","pointer_metadata","pointer_metadata","to_owned","to_owned","try_from","try_from","try_into","try_into","ttl","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","CIPHER_SUITE","ClientCertificateVerifier","ServerCertificateVerifier","TlsUpgrade","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cipher_suite","client_auth_root_subjects","client_config","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","from","from","from","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","layout_raw","layout_raw","layout_raw","new","pointer_metadata","pointer_metadata","pointer_metadata","server_config","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upgrade_dialer_tls","upgrade_listener_tcp_tls","validate_pubkey","verify_client_cert","verify_server_cert","vzip","vzip","vzip","TOR_CLIENT","TorDialer","__clone_box","as_any","as_any_mut","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","do_dial","drop","fmt","from","init","into","into_any","into_any_arc","into_any_rc","layout_raw","new","pointer_metadata","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","UnixDialer","UnixListener","__clone_box","__clone_box","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","do_dial","do_listen","drop","drop","fmt","fmt","from","from","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","layout_raw","layout_raw","new","new","pointer_metadata","pointer_metadata","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","client","clock_sync","common","from_impl","jsonrpc","p2p_method","server","util","RpcClient","as_any","as_any_mut","borrow","borrow_mut","deref","deref_mut","deserialize","drop","from","init","into","into_any","into_any_arc","into_any_rc","layout_raw","new","oneshot_request","pointer_metadata","rep_recv","req_send","reqrep_loop","request","stop","subscribe","task","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","EPOCH","NTP_ADDRESS","RETRIES","check_clock","clock_check","ntp_request","INIT_BUF_SIZE","MAX_BUF_SIZE","READ_TIMEOUT","read_from_stream","write_to_stream","Error","ErrorCode","IdMismatch","InternalError","InvalidParams","InvalidReply","InvalidRequest","JsonError","JsonErrorVal","JsonNotification","JsonRequest","JsonResponse","JsonResult","JsonSubscriber","MethodNotFound","Notification","ParseError","Request","Response","ServerError","Subscriber","SubscriberWithReply","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","code","code","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","desc","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","error","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","id","id","id","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","jsonrpc","jsonrpc","jsonrpc","jsonrpc","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","message","message","method","method","method","new","new","new","new","new","notify","params","params","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","result","stringify","stringify","stringify","stringify","sub","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_value","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","HandlerP2p","p2p","p2p_get_info","RequestHandler","accept","active_connections","connections","connections_mut","handle_request","listen_and_serve","mark_connection","pong","run_accept_loop","stop_connections","unmark_connection","Array","Boolean","JsonArray","JsonNum","JsonObj","JsonStr","JsonValue","Null","Number","Object","String","__clone_box","as_any","as_any_mut","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","fmt","format","format_to","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","get","get_mut","index","index","index_mut","index_mut","init","into","into_any","into_any_arc","into_any_rc","is_array","is_bool","is_null","is_number","is_object","is_string","json_map","json_str","layout_raw","pointer_metadata","stringify","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","write_to","import","memory","vm_runtime","db","merkle","util","DbHandle","as_any","as_any_mut","borrow","borrow_mut","contract_id","db_contains_key","db_del","db_get","db_init","db_lookup","db_set","deref","deref_mut","deserialize","drop","from","init","into","into_any","into_any_arc","into_any_rc","layout_raw","new","pointer_metadata","tree","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","zkas_db_set","merkle_add","drk_log","get_blockchain_time","get_current_epoch","get_current_slot","get_object_bytes","get_object_size","get_slot","get_verifying_slot","get_verifying_slot_epoch","put_object_bytes","set_return_data","MemoryManipulation","write_slice","ContractSection","Deploy","Env","Exec","GAS_LIMIT","MEMORY","Metadata","Null","Runtime","Update","__clone_box","apply","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","blockchain","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","call","clone","clone_into","contract_bincode","contract_id","contract_return_data","contract_section","copy_to_memory","ctx","db_handles","deploy","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","eq","exec","from","from","from","gas_info","gas_used","init","init","init","instance","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_rc","into_any_rc","into_any_rc","layout_raw","layout_raw","layout_raw","logs","memory","memory","memory_view","metadata","name","new","objects","pointer_metadata","pointer_metadata","pointer_metadata","print_logs","sanity_check","serialize_payload","set_memory_page_size","store","take_memory","time_keeper","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","vzip","vzip","CondVar","ExecutorPtr","LazyWeak","StoppableTask","StoppableTaskPtr","Subscriber","SubscriberPtr","Subscription","alloc","condvar","io_timeout","lazy_weak","msleep","phantom","ptr","sleep","sleep_forever","stoppable_task","subscriber","timeout","CondVar","CondVarState","CondVarWait","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","from","from","from","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_future","into_future","is_awake","layout_raw","layout_raw","layout_raw","new","notify","pointer_metadata","pointer_metadata","pointer_metadata","poll","reset","state","state","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","wait","waker","LazyWeak","as_any","as_any_mut","borrow","borrow_mut","default","deref","deref_mut","deserialize","drop","from","init","init","into","into_any","into_any_arc","into_any_rc","layout_raw","new","pointer_metadata","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","upgrade","vzip","StoppableTask","StoppableTaskPtr","alloc","as_any","as_any_mut","barrier","borrow","borrow_mut","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","from","get_hash","hash","init","into","into_any","into_any_arc","into_any_rc","layout_raw","new","phantom","pointer_metadata","ptr","signal","start","stop","task_id","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Subscriber","SubscriberPtr","Subscription","SubscriptionId","alloc","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","fmt","fmt","from","from","get_id","id","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","layout_raw","layout_raw","new","notify","notify_with_exclude","parent","phantom","pointer_metadata","pointer_metadata","ptr","random_id","receive","recv_queue","subs","subscribe","try_from","try_from","try_into","try_into","type_id","type_id","unsubscribe","unsubscribe","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","Timeout","TimeoutError","TimeoutFuture","__clone_box","_private","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_error","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","delay","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from","future","future","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_future","into_future","into_future","into_future","io_timeout","layout_raw","layout_raw","layout_raw","new","pointer_metadata","pointer_metadata","pointer_metadata","poll","poll","timeout","timeout","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","try_poll","try_poll","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","Transaction","__clone_box","as_any","as_any_mut","borrow","borrow_mut","calls","clone","clone_into","create_sigs","decode","decode_async","default","deref","deref_mut","deserialize","drop","encode","encode_async","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","hash","init","into","into_any","into_any_arc","into_any_rc","layout_raw","pointer_metadata","proofs","signatures","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","verify_sigs","verify_zkps","vzip","zip","cli","encoding","file","parse","path","pcg","ringbuffer","time","ProgressInc","as_any","as_any_mut","borrow","borrow_mut","default","deref","deref_mut","deserialize","drop","fg_green","fg_red","fg_reset","finish_and_clear","from","get_log_config","get_log_level","inc","init","into","into_any","into_any_arc","into_any_rc","layout_raw","new","pointer_metadata","position","position","spawn_config","timer","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","base32","base64","ENCODE_STD","STD_INV_ALPHABET","decode","encode","D0","D1","D2","D3","E0","E1","E2","FF","decode","encode","rep4","seq4","load_file","load_json_file","save_file","save_json_file","decode_base10","encode_base10","config_dir","expand_path","get_config_path","home_dir","home_fallback","is_absolute_path","join_config_path","load_keypair_to_str","INCREMENT","MULTIPLIER","Pcg32","as_any","as_any_mut","as_rngcore","borrow","borrow_mut","deref","deref_mut","deserialize","drop","fill_bytes","from","gen_bigint","gen_bigint_range","gen_biguint","gen_biguint_below","gen_biguint_range","gen_prime","increment","init","into","into_any","into_any_arc","into_any_rc","layout_raw","new","next_u32","next_u32","next_u64","pointer_metadata","rng_compat","state","try_fill_bytes","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","RingBuffer","__clone_box","as_any","as_any_mut","back","borrow","borrow_mut","clone","clone_into","contains","default","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","index","init","into","into_any","into_any_arc","into_any_rc","is_empty","iter","layout_raw","len","make_contiguous","new","pointer_metadata","pop","push","to_owned","to_vec","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Date","Date","DateFormat","DateTime","DateTime","Default","MIN_IN_HOUR","NanoTimestamp","Nanos","SECS_IN_DAY","SECS_IN_HOUR","TimeKeeper","TimeKeeperSafe","Timestamp","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","add","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","blockchain_timestamp","blockchain_timestamp","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","current","current","current_epoch","current_epoch","current_slot","current_slot","current_time","current_time","date","day","day","decode","decode","decode_async","decode_async","default","default","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","elapsed","encode","encode","encode_async","encode_async","epoch_length","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_timestamp","genesis_ts","get_hash","hash","hour","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","min","month","month","nanos","new","new","new","next_n_epoch_start","next_n_epoch_start","next_n_slot_start","next_n_slot_start","partial_cmp","partial_cmp","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","relative_slot","relative_slot","sec","slot_epoch","slot_epoch","slot_time","slots_to_next_n_epoch","slots_to_next_n_epoch","system_timestamp","system_timestamp","timekeeper","timestamp_to_date","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","verifying_slot","verifying_slot_epoch","verifying_slot_epoch","vzip","vzip","vzip","vzip","vzip","vzip","vzip","year","year","Validator","ValidatorConfig","ValidatorPtr","__clone_box","add_blocks","add_test_producer_transaction","add_transactions","alloc","append_block","append_tx","as_any","as_any","as_any_mut","as_any_mut","blockchain","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","consensus","consensus","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","faucet_pubkeys","finalization","finalization_threshold","float_10","from","from","genesis_block","genesis_txs_total","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","layout_raw","layout_raw","new","new","phantom","pid","pointer_metadata","pointer_metadata","pow","pow_target","pow_threads","ptr","purge_pending_txs","receive_test_slot","synced","testing_mode","testing_mode","time_keeper","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","utils","validate_blockchain","validation","verification","vzip","vzip","Consensus","Fork","Proposal","TXS_CAP","__clone_box","__clone_box","append_proposal","append_proposal","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","best_forks_indexes","block","blockchain","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","checked_finalization","clone","clone","clone_into","clone_into","decode","decode_async","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","encode","encode_async","finalization","finalization_threshold","find_extended_fork","find_extended_fork_index","fmt","forks","from","from","from","full_clone","generate_pos_slot","generate_pos_slot","generate_pow_slot","generate_pow_slot","generate_signed_proposal","generate_unsigned_block","get_last_nonce","hash","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","last_proposal","layout_raw","layout_raw","layout_raw","mempool","module","module","new","new","new","overlay","participating","pointer_metadata","pointer_metadata","pointer_metadata","previous_slot_info","proposals","rank","rank","slots","testing_mode","time_keeper","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unproposed_txs","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","B","FLOAT10_FIVE","FLOAT10_NEG_ONE","FLOAT10_NEG_TWO","FLOAT10_NINE","FLOAT10_ONE","FLOAT10_TEN","FLOAT10_THREE","FLOAT10_TWO","FLOAT10_ZERO","Float10","RADIX_BITS","__clone_box","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","abs","add","add_assign","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","base2ibig","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","div","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","fbig2base","fbig2ibig","fmt","fmt","from","from","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","ln","mul","partial_cmp","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","powf","repr","sub","to_f64","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","EPSILON","FIELD_P","K1","K2","K3","KD","KI","KP","MAX_F","MIN_F","P","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","calculate_f","calculate_sigmas","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","from","from","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","slot_pid_output","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","BLOCKCHAIN_TIMESTAMP_CHECK_WINDOW","BLOCK_FUTURE_TIME_LIMIT","BUF_SIZE","CUT_BEGIN","CUT_END","DIFFICULTY_WINDOW","PoWModule","RETAINED","_DIFFICULTY_CUT","_DIFFICULTY_LAG","__clone_box","append","append_difficulty","as_any","as_any_mut","borrow","borrow_mut","clone","clone_into","cummulative_difficulty","cutoff","deref","deref_mut","deserialize","difficulties","drop","fmt","from","init","into","into_any","into_any_arc","into_any_rc","layout_raw","mine_block","new","next_difficulty","next_mine_target","pointer_metadata","target","threads","timestamps","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","verify_block_hash","verify_current_block","verify_current_timestamp","verify_difficulty","verify_timestamp_by_median","vzip","block_rank","deploy_native_contracts","genesis_txs_total","get_mid","median","validate_block","validate_blockchain","validate_pos_block","validate_pos_slot","validate_pow_block","validate_pow_slot","verify_block","verify_genesis_block","verify_pos_proposal","verify_pow_proposal","verify_producer_signature","verify_producer_transaction","verify_proposal","verify_transaction","verify_transactions","WalletDb","WalletPtr","walletdb","Blob","Blob","Integer","Integer","Last","Null","OptionBlob","OptionInteger","QueryType","SqlType","Text","Text","WalletDb","WalletPtr","alloc","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","conn","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","exec_sql","fmt","from","from","from","from","get_default_keypair","init","init","init","inner","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","layout_raw","layout_raw","layout_raw","new","phantom","pointer_metadata","pointer_metadata","pointer_metadata","ptr","query_single","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","Base","DebugOpValue","EcPoint","Proof","ProvingKey","VerifyingKey","Void","Witness","ZkCircuit","assign_free_advice","debug","empty_witnesses","export_witness_json","gadget","halo2","proof","tracer","vm","vm_heap","zkas_type_checks","export_witness_json","zkas_type_checks","arithmetic","cond_select","is_zero","less_than","native_range_check","small_range_check","zero_cond","ArithChip","ArithConfig","ArithInstruction","__clone_box","_marker","a","add","add","as_any","as_any","as_any_mut","as_any_mut","b","borrow","borrow","borrow_mut","borrow_mut","c","clone","clone_into","config","config","configure","construct","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","fmt","from","from","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","layout_raw","layout_raw","loaded","mul","mul","pointer_metadata","pointer_metadata","q_add","q_mul","q_sub","sub","sub","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","ConditionalSelectChip","ConditionalSelectConfig","NUM_OF_UTILITY_ADVICE_COLUMNS","__clone_box","_marker","_marker","advices","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","conditional_select","config","config","configure","construct","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","fmt","from","from","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","layout_raw","layout_raw","loaded","pointer_metadata","pointer_metadata","s_cs","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","IsZeroChip","IsZeroConfig","__clone_box","as_any","as_any","as_any_mut","as_any_mut","assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","config","configure","construct","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","expr","fmt","from","from","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","is_zero_expr","layout_raw","layout_raw","pointer_metadata","pointer_metadata","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","value_inv","vzip","vzip","LessThanChip","LessThanConfig","__clone_box","__clone_box","a","a_offset","as_any","as_any","as_any_mut","as_any_mut","b","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","config","config","configure","construct","copy_less_than","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","fmt","fmt","from","from","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","k_values_table","layout_raw","layout_raw","less_than","less_than_range_check","loaded","pointer_metadata","pointer_metadata","range_a_config","range_a_offset_config","s_leq","s_lt","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","witness_less_than","NativeRangeCheckChip","NativeRangeCheckConfig","__clone_box","__clone_box","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","config","config","configure","construct","copy_range_check","decompose","decompose_value","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","fmt","fmt","from","from","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","k_values_table","layout_raw","layout_raw","load_k_table","loaded","pointer_metadata","pointer_metadata","s_rc","s_short","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","witness_range_check","z","SmallRangeCheckChip","SmallRangeCheckConfig","__clone_box","__clone_box","_marker","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","config","config","configure","construct","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","fmt","fmt","from","from","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","layout_raw","layout_raw","loaded","pointer_metadata","pointer_metadata","range_check","selector","small_range_check","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","z","ZeroCondChip","ZeroCondConfig","__clone_box","__clone_box","_z","a","as_any","as_any","as_any_mut","as_any_mut","assign","b","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","config","configure","construct","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","fmt","fmt","from","from","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","is_zero","layout_raw","layout_raw","output","pointer_metadata","pointer_metadata","selector","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","Advice","Assigned","AssignedCell","Column","Field","Layouter","ONE","Rational","Root","Trivial","Value","ZERO","Zero","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","_marker","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","and_then","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_mut","as_ref","assert_if_known","assign_region","assign_table","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cell","cell","cell","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cloned","cloned","cmp","column_type","column_type","compare","constrain_instance","copied","copied","copy_advice","cube","cube","cube","default","denominator","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","dev","double","double","double","drop","drop","drop","drop","drop","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","error_if_known_and","evaluate","evaluate","evaluate","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","get_hash","get_hash","get_root","hash","hash","index","init","init","init","init","init","inner","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_field","invert","invert","invert","is_zero","is_zero_vartime","is_zero_vartime","known","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","map","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","namespace","neg","neg","neg","numerator","partial_cmp","plonk","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pop_namespace","pow","pow_vartime","push_namespace","random","sqrt","sqrt_alt","sqrt_ratio","square","square","square","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","to_field","to_owned","to_owned","to_owned","to_owned","to_owned","transpose_array","transpose_vec","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","unknown","unzip","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","value","value","value","value","value","value_field","vzip","vzip","vzip","vzip","vzip","zip","CellNotAssigned","CircuitCost","CircuitGates","ConstraintNotSatisfied","ConstraintPoisoned","FailureLocation","InRegion","InstanceCellNotAssigned","Lookup","MockProver","OutsideRegion","Permutation","TracingFloorPlanner","VerifyFailure","_marker","_phantom","advice","advice_columns","advice_queries","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","assert_satisfied","assign_advice","assign_fixed","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","collect","copy","cost","cs","current_region","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","enable_selector","enter_region","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","exit_region","fill_from_row","fixed","fixed_queries","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","gates","init","init","init","init","init","init","instance","instance_queries","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","k","k","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","lookups","marginal_proof_size","max_advice_rows","max_deg","max_fixed_rows","max_rows","measure","metadata","n","num_advice_columns","num_fixed_columns","num_instance_columns","num_total_columns","permutation","permutation_cols","point_sets","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pop_namespace","proof_size","push_namespace","queries_to_csv","query_instance","regions","run","selectors","synthesize","to_string","to_string","to_string","total_additions","total_multiplications","total_negations","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","usable_rows","verify","vzip","vzip","vzip","vzip","vzip","vzip","offset","region","row","cell_values","column","column","column","constraint","constraint","gate","gate","gate_offset","gate_offset","location","location","location","lookup_index","offset","region","region","row","CircuitCost","MarginalProofSize","ProofSize","_marker","_marker","_marker","advice","advice","advice_columns","advice_queries","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","equality","equality","fixed","fixed_queries","fmt","fmt","from","from","get","get","get_mut","get_mut","get_unchecked","get_unchecked","get_unchecked_mut","get_unchecked_mut","index","index","index_mut","index_mut","init","init","instance","instance","instance_queries","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","k","layout_raw","layout_raw","lookups","lookups","lookups","max_advice_rows","max_deg","max_fixed_rows","max_rows","multiopen","num_advice_columns","num_fixed_columns","num_instance_columns","num_total_columns","permutation_cols","point_sets","pointer_metadata","pointer_metadata","polycomm","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vanishing","vzip","vzip","Column","Constraint","Gate","Region","VirtualCell","__clone_box","__clone_box","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","column","column_type","compare","compare","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","gate","index","index","index","index","init","init","init","init","init","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","name","name","name","name","partial_cmp","partial_cmp","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","rotation","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","Advice","Advice","Advice","AdviceQuery","Any","Assigned","Assignment","BatchVerifier","BoundsFailure","Circuit","Column","ColumnNotAssigned","ColumnNotInPermutation","ColumnType","Config","Constant","Constraint","ConstraintSystem","ConstraintSystemFailure","Constraints","Error","Expression","Fixed","Fixed","Fixed","FixedQuery","FloorPlanner","FloorPlanner","Instance","Instance","Instance","InstanceQuery","InstanceTooLarge","InvalidInstances","Negated","NotEnoughColumnsForConstants","NotEnoughRowsAvailable","Opening","Output","OverwriteDefault","Params","PinnedConstraintSystem","PinnedVerificationKey","Product","ProvingKey","Rational","Scaled","Selector","Selector","SingleVerifier","Sum","Synthesis","TableColumn","TableError","TableError","Transcript","Trivial","UnevenColumnLengths","UsedColumn","VerificationStrategy","VerifyingKey","VirtualCells","Zero","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","add","add_proof","advice_column","advice_queries","advice_queries","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_error","assign_advice","assign_fixed","base_modulus","blinding_factors","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","column_index","column_index","column_index","column_type","compare","compare","complex_selector","configure","configure_with_params","constants","constants","constraints","copy","create_gate","create_proof","cs","cs","cs_degree","default","default","degree","degree","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","domain","domain","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","enable","enable_constant","enable_equality","enable_equality","enable_selector","enter_region","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","evaluate","exit_region","fill_from_row","finalize","fixed_column","fixed_commitments","fixed_commitments","fixed_cosets","fixed_polys","fixed_queries","fixed_queries","fixed_values","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bytes","from_bytes","gates","gates","get_domain","get_hash","get_hash","get_hash","get_hash","get_hash","get_vk","hash","hash","hash","hash","hash","hash_into","index","index","index","index","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","inner","instance_column","instance_queries","instance_queries","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_iter","is_simple","items","keygen_pk","keygen_vk","l0","l_blind","l_last","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","lookup","lookup_table_column","lookups","lookups","meta","minimum_degree","minimum_degree","minimum_rows","msm","mul","mul","name","neg","new","new","num_advice_columns","num_advice_columns","num_advice_queries","num_fixed_columns","num_fixed_columns","num_instance_columns","num_instance_columns","num_selectors","num_selectors","params","partial_cmp","partial_cmp","permutation","permutation","permutation","permutation","permutation","pinned","pinned","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","poly","pop_namespace","process","process","push_namespace","queried_cells","queried_selectors","query_advice","query_any","query_fixed","query_instance","query_instance","query_selector","read","read","rotation","rotation","rotation","scalar_modulus","selector","selector","selector_map","selectors","set_minimum_degree","source","square","sub","synthesize","synthesize","to_bytes","to_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","transcript_repr","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","verify_proof","vk","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","with_selector","without_witnesses","write","write","current_k","Proof","ProvingKey","VerifyingKey","__clone_box","__clone_box","__clone_box","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_bits","as_ref","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","build","clone","clone","clone","clone_into","clone_into","clone_into","create","decode","decode_async","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","encode","encode_async","encode_hex","encode_hex_upper","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","layout_raw","layout_raw","layout_raw","new","params","params","pk","pointer_metadata","pointer_metadata","pointer_metadata","read","read","to_owned","to_owned","to_owned","try_as_bits","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","verify","vk","vzip","vzip","vzip","write","write","Base","DebugOpValue","EcPoint","Void","ZkTracer","__clone_box","__clone_box","as_any","as_any","as_any_mut","as_any_mut","assert_correct","borrow","borrow","borrow_mut","borrow_mut","clear","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","fmt","from","from","init","init","init","init_allowed","into","into","into_any","into_any","into_any_arc","into_any_rc","into_any_rc","is_enabled","layout_raw","layout_raw","new","opvalues","pointer_metadata","pointer_metadata","push","push_base","push_ecpoint","push_void","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","vzip","Arithmetic","BoolCheck","CondSelect","Ecc","HeapVar","LessThan","Merkle","NativeRange253","NativeRange64","Poseidon","Sinsemilla","VmChip","VmConfig","Witness","ZeroCond","ZkCircuit","ZkParams","__clone_box","__clone_box","__clone_box","arithmetic_chip","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","boolcheck_chip","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chips","clone","clone","clone","clone_into","clone_into","clone_into","condselect_chip","configure","configure_with_params","constants","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","ecc_chip","enable_trace","fmt","from","from","from","from","init","init","init","init","init_arithmetic","init_boolcheck","init_condselect","init_ecc","init_lessthan","init_nativerange","init_poseidon","init_sinsemilla","init_zerocond","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","layout_raw","layout_raw","layout_raw","layout_raw","lessthan_chip","literals","merkle_chip_1","merkle_chip_2","new","opcodes","params","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","poseidon_chip","primary","rangecheck253_chip","rangecheck64_chip","synthesize","to_owned","to_owned","to_owned","tracer","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","without_witnesses","witness","witnesses","zerocond_chip","Base","Base","EcFixedPoint","EcFixedPoint","EcFixedPointBase","EcFixedPointShort","EcNiPoint","EcNiPoint","EcPoint","EcPoint","HeapVar","Literal","MerklePath","MerklePath","Scalar","Scalar","Uint32","Uint32","Uint64","Uint64","Uint64","Witness","__clone_box","__clone_box","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","empty_witnesses","fmt","from","from","from","impl_try_from","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","layout_raw","layout_raw","layout_raw","name","pointer_metadata","pointer_metadata","pointer_metadata","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","Analyzer","Compiler","Lexer","LitType","Opcode","Parser","VarType","ZkBinary","analyzer","ast","compiler","constants","decoder","error","lexer","opcode","parser","types","Analyzer","analyze_semantic","analyze_types","as_any","as_any_mut","borrow","borrow_mut","constants","deref","deref_mut","deserialize","drop","error","from","heap","init","into","into_any","into_any_arc","into_any_rc","layout_raw","literals","lookup_constant","lookup_heap","lookup_var","lookup_witness","new","pause","pointer_metadata","statements","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","witnesses","Arg","Assign","Call","Constant","Constant","Func","Lit","Literal","Noop","Statement","StatementType","Var","Var","Variable","Variable","Witness","Witness","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","column","column","column","column","default","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","lhs","line","line","line","line","line","name","name","name","name","opcode","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","rhs","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","typ","typ","typ","typ","typ","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","BINARY_VERSION","Compiler","MAGIC_BYTES","as_any","as_any_mut","borrow","borrow_mut","compile","constants","debug_info","deref","deref_mut","deserialize","drop","error","from","init","into","into_any","into_any_arc","into_any_rc","k","layout_raw","literals","lookup_heap","lookup_literal","namespace","new","pointer_metadata","statements","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","witnesses","ALLOWED_FIELDS","MAX_K","MAX_NS_LEN","MIN_BIN_SIZE","ZkBinary","__clone_box","as_any","as_any_mut","borrow","borrow_mut","clone","clone_into","constants","decode","deref","deref_mut","deserialize","drop","find_subslice","fmt","from","init","into","into_any","into_any_arc","into_any_rc","k","layout_raw","literals","namespace","opcodes","parse_circuit","parse_constants","parse_literals","parse_witness","pointer_metadata","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","witnesses","ErrorEmitter","abort","as_any","as_any_mut","borrow","borrow_mut","deref","deref_mut","deserialize","drop","emit","file","fmt","from","init","into","into_any","into_any_arc","into_any_rc","layout_raw","lines","namespace","new","pointer_metadata","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","warn","Assign","Comma","LeftBrace","LeftBracket","LeftParen","Lexer","Number","RightBrace","RightBracket","RightParen","SPECIAL_CHARS","Semicolon","String","Symbol","Token","TokenType","__clone_box","__clone_box","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","column","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","eq","equivalent","equivalent","equivalent","equivalent","error","fmt","fmt","from","from","from","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","is_digit","is_letter","layout_raw","layout_raw","layout_raw","lex","line","new","new","pointer_metadata","pointer_metadata","pointer_metadata","source","to_owned","to_owned","token","token_type","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","BaseAdd","BaseMul","BaseSub","BoolCheck","CondSelect","ConstrainEqualBase","ConstrainEqualPoint","ConstrainInstance","DebugPrint","EcAdd","EcGetX","EcGetY","EcMul","EcMulBase","EcMulShort","EcMulVarBase","LessThanLoose","LessThanStrict","MerkleRoot","Noop","Opcode","PoseidonHash","RangeCheck","WitnessBase","ZeroCondSelect","__clone_box","arg_types","as_any","as_any_mut","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","from_name","from_repr","get_hash","hash","init","into","into_any","into_any_arc","into_any_rc","layout_raw","name","pointer_metadata","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","IndexMap","KEYWORDS","NOPE_NS","NextTuple3","NextTuple4","Parsed","Parser","VALID_ECFIXEDPOINT","VALID_ECFIXEDPOINTBASE","VALID_ECFIXEDPOINTSHORT","__clone_box","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","check_section_structure","clone","clone_into","contains_key","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","error","from","from","get","init","init","insert","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","layout_raw","layout_raw","map","new","new","next_tuple","next_tuple","order","parse","parse_ast_circuit","parse_ast_constants","parse_ast_witness","parse_function_call","pointer_metadata","pointer_metadata","scam_iter","to_owned","tokens","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","Any","Base","BaseArray","Dummy","Dummy","EcFixedPoint","EcFixedPointBase","EcFixedPointShort","EcNiPoint","EcPoint","HeapType","Lit","LitType","MerklePath","Scalar","ScalarArray","Uint32","Uint64","Uint64","Var","VarType","__clone_box","__clone_box","__clone_box","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from","from_repr","from_repr","from_repr","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","layout_raw","layout_raw","layout_raw","name","pointer_metadata","pointer_metadata","pointer_metadata","to_owned","to_owned","to_owned","to_vartype","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip"],"q":[[0,"darkfi"],[23,"darkfi::blockchain"],[169,"darkfi::blockchain::block_store"],[509,"darkfi::blockchain::contract_store"],[629,"darkfi::blockchain::header_store"],[739,"darkfi::blockchain::slot_store"],[869,"darkfi::blockchain::tx_store"],[1005,"darkfi::consensus"],[1045,"darkfi::consensus::block"],[1280,"darkfi::consensus::clock"],[1356,"darkfi::consensus::clock::Ticks"],[1362,"darkfi::consensus::constants"],[2067,"darkfi::consensus::fees"],[2068,"darkfi::consensus::lead_coin"],[2166,"darkfi::consensus::lead_info"],[2255,"darkfi::consensus::proto"],[2287,"darkfi::consensus::proto::protocol_proposal"],[2320,"darkfi::consensus::proto::protocol_sync"],[2361,"darkfi::consensus::proto::protocol_sync_consensus"],[2395,"darkfi::consensus::proto::protocol_tx"],[2428,"darkfi::consensus::rcpt"],[2514,"darkfi::consensus::state"],[2934,"darkfi::consensus::stx"],[2978,"darkfi::consensus::task"],[2984,"darkfi::consensus::task::block_sync"],[2985,"darkfi::consensus::task::consensus_sync"],[2986,"darkfi::consensus::task::proposal"],[2990,"darkfi::consensus::tx"],[3025,"darkfi::consensus::types"],[3071,"darkfi::consensus::utils"],[3074,"darkfi::consensus::validator"],[3125,"darkfi::consensus::wallet"],[3129,"darkfi::error"],[3479,"darkfi::event_graph"],[3538,"darkfi::event_graph::event"],[3578,"darkfi::event_graph::proto"],[3779,"darkfi::event_graph::util"],[3783,"darkfi::geode"],[3851,"darkfi::net"],[3874,"darkfi::net::acceptor"],[3913,"darkfi::net::channel"],[4003,"darkfi::net::connector"],[4031,"darkfi::net::dnet"],[4302,"darkfi::net::hosts"],[4354,"darkfi::net::message"],[4595,"darkfi::net::message_subscriber"],[4698,"darkfi::net::p2p"],[4773,"darkfi::net::protocol"],[4785,"darkfi::net::protocol::protocol_address"],[4822,"darkfi::net::protocol::protocol_base"],[4829,"darkfi::net::protocol::protocol_jobs_manager"],[4865,"darkfi::net::protocol::protocol_ping"],[4901,"darkfi::net::protocol::protocol_registry"],[4931,"darkfi::net::protocol::protocol_seed"],[4964,"darkfi::net::protocol::protocol_version"],[4998,"darkfi::net::session"],[5025,"darkfi::net::session::inbound_session"],[5064,"darkfi::net::session::manual_session"],[5101,"darkfi::net::session::outbound_session"],[5215,"darkfi::net::session::seedsync_session"],[5249,"darkfi::net::settings"],[5353,"darkfi::net::transport"],[5489,"darkfi::net::transport::nym"],[5558,"darkfi::net::transport::tcp"],[5624,"darkfi::net::transport::tls"],[5708,"darkfi::net::transport::tor"],[5740,"darkfi::net::transport::unix"],[5802,"darkfi::rpc"],[5810,"darkfi::rpc::client"],[5843,"darkfi::rpc::clock_sync"],[5849,"darkfi::rpc::common"],[5854,"darkfi::rpc::jsonrpc"],[6140,"darkfi::rpc::p2p_method"],[6143,"darkfi::rpc::server"],[6155,"darkfi::rpc::util"],[6234,"darkfi::runtime"],[6237,"darkfi::runtime::import"],[6240,"darkfi::runtime::import::db"],[6274,"darkfi::runtime::import::merkle"],[6275,"darkfi::runtime::import::util"],[6286,"darkfi::runtime::memory"],[6288,"darkfi::runtime::vm_runtime"],[6394,"darkfi::system"],[6414,"darkfi::system::condvar"],[6498,"darkfi::system::lazy_weak"],[6526,"darkfi::system::stoppable_task"],[6567,"darkfi::system::subscriber"],[6635,"darkfi::system::timeout"],[6737,"darkfi::tx"],[6784,"darkfi::util"],[6792,"darkfi::util::cli"],[6829,"darkfi::util::encoding"],[6831,"darkfi::util::encoding::base32"],[6835,"darkfi::util::encoding::base64"],[6847,"darkfi::util::file"],[6851,"darkfi::util::parse"],[6853,"darkfi::util::path"],[6861,"darkfi::util::pcg"],[6903,"darkfi::util::ringbuffer"],[6949,"darkfi::util::time"],[7231,"darkfi::validator"],[7317,"darkfi::validator::consensus"],[7440,"darkfi::validator::float_10"],[7726,"darkfi::validator::pid"],[7990,"darkfi::validator::pow"],[8046,"darkfi::validator::utils"],[8051,"darkfi::validator::validation"],[8057,"darkfi::validator::verification"],[8066,"darkfi::wallet"],[8069,"darkfi::wallet::walletdb"],[8163,"darkfi::zk"],[8183,"darkfi::zk::debug"],[8185,"darkfi::zk::gadget"],[8192,"darkfi::zk::gadget::arithmetic"],[8264,"darkfi::zk::gadget::cond_select"],[8328,"darkfi::zk::gadget::is_zero"],[8388,"darkfi::zk::gadget::less_than"],[8463,"darkfi::zk::gadget::native_range_check"],[8535,"darkfi::zk::gadget::small_range_check"],[8603,"darkfi::zk::gadget::zero_cond"],[8671,"darkfi::zk::halo2"],[8987,"darkfi::zk::halo2::dev"],[9215,"darkfi::zk::halo2::dev::FailureLocation"],[9218,"darkfi::zk::halo2::dev::VerifyFailure"],[9236,"darkfi::zk::halo2::dev::cost"],[9330,"darkfi::zk::halo2::dev::metadata"],[9525,"darkfi::zk::halo2::plonk"],[10334,"darkfi::zk::halo2::plonk::Error"],[10335,"darkfi::zk::proof"],[10450,"darkfi::zk::tracer"],[10517,"darkfi::zk::vm"],[10671,"darkfi::zk::vm_heap"],[10774,"darkfi::zkas"],[10792,"darkfi::zkas::analyzer"],[10830,"darkfi::zkas::ast"],[11094,"darkfi::zkas::compiler"],[11132,"darkfi::zkas::constants"],[11136,"darkfi::zkas::decoder"],[11177,"darkfi::zkas::error"],[11209,"darkfi::zkas::lexer"],[11320,"darkfi::zkas::opcode"],[11384,"darkfi::zkas::parser"],[11462,"darkfi::zkas::types"],[11582,"dyn_clone::sealed"],[11583,"blake3"],[11584,"alloc::vec"],[11585,"core::any"],[11586,"sled::tree"],[11587,"sled::batch"],[11588,"rkyv::with"],[11589,"core::result"],[11590,"darkfi_sdk::blockchain"],[11591,"core::option"],[11592,"alloc::boxed"],[11593,"alloc::sync"],[11594,"alloc::rc"],[11595,"core::alloc::layout"],[11596,"core::alloc::layout"],[11597,"sled::ivec"],[11598,"darkfi_serial"],[11599,"core::any"],[11600,"std::io"],[11601,"std::io::error"],[11602,"core::pin"],[11603,"futures_io::if_std"],[11604,"core::marker"],[11605,"core::marker"],[11606,"core::fmt"],[11607,"num_bigint::biguint"],[11608,"darkfi_sdk::crypto::keypair"],[11609,"darkfi_sdk::crypto::contract_id"],[11610,"pasta_curves::pallas"],[11611,"std::collections::hash::map"],[11612,"darkfi_sdk::crypto::merkle_node"],[11613,"alloc::string"],[11614,"url"],[11615,"pasta_curves::pallas"],[11616,"core::cmp"],[11617,"dashu_float::repr"],[11618,"dashu_int::ibig"],[11619,"core::error"],[11620,"sled::result"],[11621,"std::time"],[11622,"wasmer::errors"],[11623,"rustls::dns_name"],[11624,"wasmer::exports"],[11625,"dashu_base::error"],[11626,"bs58::decode"],[11627,"arti_client::err"],[11628,"tinyjson::parser"],[11629,"tinyjson::generator"],[11630,"blake3"],[11631,"dashu_base::error"],[11632,"alloc::string"],[11633,"wasmer::mem_access"],[11634,"core::str::error"],[11635,"log"],[11636,"core::array"],[11637,"wasmer_types::error"],[11638,"sled::transaction"],[11639,"rusqlite::error"],[11640,"wasmer_types::error"],[11641,"core::num::dec2flt"],[11642,"core::net::parser"],[11643,"wasmer::errors"],[11644,"darkfi_sdk::error"],[11645,"semver::parse"],[11646,"core::num::error"],[11647,"std::collections::hash::set"],[11648,"alloc::collections::vec_deque"],[11649,"std::path"],[11650,"core::convert"],[11651,"core::marker"],[11652,"core::marker"],[11653,"serde::de"],[11654,"clap::args::arg_matches"],[11655,"core::time"],[11656,"core::hash"],[11657,"core::hash"],[11658,"socket2::socket"],[11659,"async_net::tcp"],[11660,"async_net::tcp"],[11661,"rustls::msgs::handshake"],[11662,"async_rustls"],[11663,"async_rustls"],[11664,"ed25519_compact::ed25519"],[11665,"rustls::key"],[11666,"std::time"],[11667,"rustls::client::client_conn"],[11668,"core::iter::traits::iterator"],[11669,"rustls::verify"],[11670,"async_net::unix"],[11671,"std::path"],[11672,"futures_lite::io"],[11673,"core::fmt"],[11674,"tinyjson::json_value"],[11675,"wasmer::ptr"],[11676,"wasmer::externals::memory"],[11677,"wasmer::externals::memory_view"],[11678,"wasmer::store"],[11679,"wasmer_types::units"],[11680,"core::task::wake"],[11681,"core::task::poll"],[11682,"core::ops::function"],[11683,"rand_core"],[11684,"rand_core"],[11685,"log"],[11686,"num_bigint_dig::bigint"],[11687,"num_bigint_dig::biguint"],[11688,"tor_llcrypto::util::rand_compat"],[11689,"rand_core::error"],[11690,"core::cmp"],[11691,"alloc::collections::vec_deque::iter"],[11692,"core::marker"],[11693,"core::cmp"],[11694,"core::ops::arith"],[11695,"core::ops::function"],[11696,"halo2_gadgets::poseidon::pow5"],[11697,"core::iter::traits::collect"],[11698,"core::iter::traits::collect"],[11699,"subtle"],[11700,"typed_index_collections::slice"],[11701,"halo2_proofs::plonk::circuit"],[11702,"pasta_curves::arithmetic::curves"],[11703,"halo2_proofs::poly::commitment"],[11704,"halo2_proofs::transcript"],[11705,"halo2_proofs::transcript"],[11706,"halo2_proofs::helpers"],[11707,"halo2_proofs::transcript"],[11708,"halo2_proofs::transcript"],[11709,"bitvec::order"],[11710,"bitvec::ptr::span"],[11711,"pasta_curves::pallas"],[11712,"halo2_gadgets::ecc::chip"],[11713,"halo2_gadgets::ecc"],[11714,"darkfi_sdk::crypto::constants::sinsemilla"],[11715,"darkfi_sdk::crypto::constants::sinsemilla"],[11716,"halo2_gadgets::poseidon::pow5"],[11717,"core::iter::adapters::peekable"]],"d":["","","","","","This macro is used for a standard way of daemonizing …","","","","","","Chunk-based file storage implementation. This is a …","","","","","","","","","","","<code>src/zkas</code> is the library holding the zkas toolchain, …","","","","","","","","","Structure holding all sled trees that define the concept …","Overlay structure over a <code>Blockchain</code> instance.","Atomic pointer to blockchain overlay.","","","","","","","","","","Atomic pointer to sled db overlay.","","","","","","","","Insert a given <code>BlockInfo</code> into the overlay. This functions …","Insert a given <code>BlockInfo</code> into the blockchain database. …","Insert a given slice of pending transactions into the …","","","","","","","Auxiliary function to write to multiple trees completely …","Block related definitions and storage implementations","Blocks overlay","Blocks sled tree","Blocks slots overlay","Blocks Slots sled tree","","","","","Checkpoint overlay so we can revert to it, if needed.","","","Contracts and Wasm storage implementations","Contract states overlay","Contract states","","","","","","","Block height difficulties overlay,","Block height difficulties sled tree,","","","Returns the argument unchanged.","Returns the argument unchanged.","Auxiliary function to create a full clone using …","Retrieve genesis (first) block slot and hash.","Retrieve all blocks contained in the blockchain in order. …","Retrieve n blocks after given start slot.","Retrieve <code>BlockInfo</code>s by given hashes. Fails if any of them …","Retrieve <code>BlockInfo</code>s by given hashes. Fails if any of them …","Retrieve <code>BlockInfo</code>s by given slots. Does not fail if any …","Retrieve all <code>BlockInfo</code> for given slice of <code>Block</code>. Fails if …","Retrieve all <code>BlockInfo</code> for given slice of <code>Block</code>. Fails if …","Retrieve all transactions from the pending tx store. Be …","Retrieve n slots after given start slot.","Retrieve <code>Slot</code>s by given ids. Does not fail if any of them …","Check if the given <code>BlockInfo</code> is in the database and all …","Check if the given <code>BlockInfo</code> is in the database and all …","Check if the given <code>Slot</code> is in the database and all trees.","Check if block order for the given slot is in the database.","Header definition and storage implementation","Headers overlay","Headers sled tree","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Check if blockchain contains any blocks","Check if blockchain contains any blocks","Retrieve the last block slot and hash.","Retrieve the last block slot and hash.","Retrieve the last block info.","Retrieve the last block info.","Retrieve the last slot.","","","Retrieve stored blocks count","Instantiate a new <code>BlockchainOverlay</code> over the given …","Instantiate a new <code>Blockchain</code> with the given <code>sled</code> database.","Block order overlay","Block order sled tree","Main <code>sled_overlay::SledDbOverlay</code> to the sled db connection","Parse a sled record in the form of a tuple (<code>key</code>, <code>value</code>).","Parse a sled record with a u64 keyin the form of a tuple (…","Pending transactions sled tree","Pending transactions order sled tree","","","","","","","Remove a given slice of pending transactions from the …","Revert to current overlay checkpoint.","Main pointer to the sled db connection","Slots storage implementation","Slots overlay","Slot sled tree","","Transactions overlay","Transactions sled tree","","","","","Transactions related storage implementations","Retrieve stored txs count","","","","","","","","","","","Wasm bincodes overlay","Wasm bincodes","This struct represents a tuple of the form (<code>header</code>, <code>txs</code>, …","Auxiliary structure used to keep track of block PoW …","The <code>BlockDifficultyStore</code> is a <code>sled</code> tree storing the …","Overlay structure over a <code>BlockDifficultyStore</code> instance.","Structure representing full block data, acting as a …","Auxiliary structure used to keep track of blocks order.","The <code>BlockOrderStore</code> is a <code>sled</code> tree storing the order of the","Overlay structure over a <code>BlockOrderStore</code> instance.","The <code>BlockStore</code> is a <code>sled</code> tree storing all the blockchain’…","Overlay structure over a <code>BlockStore</code> instance.","<code>BlockDifficulty</code> sled tree","<code>BlockOrder</code> sled tree","<code>Block</code> sled tree","","","","","","Append a transaction to the block. Also adds it to the …","Append a vector of transactions to the block. Also adds …","","","","","","","","","","","","","","","","","","","","","Block headerhash of that number","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Check if the block store contains a given block hash.","Check if the block order store contains a given order …","Height cummulative difficulty (total + height difficulty)","","","","","","","","Represents the genesis block on current timestamp","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Height difficulty","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Generate a <code>Block</code> from a <code>BlockInfo</code>","Compute the block’s full hash","Fetch given block hashes from the overlay. The resulting …","Fetch given order numbers from the overlay. The resulting …","Fetch given block hashes from the block store. The …","Fetch given order numbers from the block order store. The …","Fetch given block height numbers from the block …","Fetch n hashes after given order number. In the iteration, …","Retrieve all blocks from the block store in the form of a …","Retrieve complete order from the block order store in the …","Retrieve all blockdifficulties from the block difficulties …","Fetch the first block hash in the tree, based on the <code>Ord</code> …","Fetch the last block hash in the overlay, based on the <code>Ord</code> …","Fetch the last block hash in the tree, based on the <code>Ord</code> …","Fetch the last N records from the block difficulties …","A block’s hash is the same as the hash of its header","A block’s hash is the same as the hash of its header","Block header","Block header data","Block height number","","","","","","","","","","","Insert a slice of <code>Block</code> into the overlay. The block’s …","Insert a slice of <code>u64</code> and block hashes into the store. …","Insert a slice of <code>BlockDifficulty</code> into the overlay.","Insert a slice of <code>Block</code> into the store.","Insert a slice of <code>u64</code> and block hashes into the store.","Insert a slice of <code>BlockDifficulty</code> into the store.","Generate the sled batch corresponding to an insert, so …","Generate the sled batch corresponding to an insert, so …","Generate the sled batch corresponding to an insert, so …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Check if overlay contains any records","Check if sled contains any records","","","","","","","","","","","Retrieve records count","","","","","","Opens a new or existing <code>BlockStore</code> on the given sled …","Opens a new or existing <code>BlockOrderStore</code> on the given sled …","","Opens a new or existing <code>BlockDifficultyStore</code> on the given …","Generate an empty block for provided Header and slots …","Order number","","","","","","","","","","","Sign block header using provided secret key","Block producer signature","Block producer signature","Slots payload","Block creation timestamp","","","","","","","","","","","","","","","","","","","","","","","","","","Trasaction hashes","Transactions payload","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The <code>ContractStateStore</code> is a <code>sled</code> tree that stores pointers …","Overlay structure over a <code>ContractStateStore</code> instance.","","","The hardcoded db name for the zkas circuits database tree","The <code>WasmStore</code> is a <code>sled</code> tree that stores the wasm bincode …","Overlay structure over a <code>WasmStore</code> instance.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Fetches the bincode for a given ContractId Returns an …","Fetches the bincode for a given ContractId Returns an …","Abstraction function for fetching a <code>ZkBinary</code> and its …","Abstraction function for fetching a <code>ZkBinary</code> and its …","","Try to initialize a new contract state. Contracts can …","","","","Inserts or replaces the bincode for a given ContractId","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Do a lookup of an existing contract state. In order to …","Do a lookup of an existing contract state. In order to …","","","Opens or creates a <code>WasmStore</code>. This tree holds the wasm …","Opens or creates a <code>ContractStateStore</code>. This main tree …","","","","","Attempt to remove an existing contract state. In order to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This struct represents a tuple of the form (version, …","The <code>HeaderStore</code> is a <code>sled</code> tree storing all the blockchain…","Overlay structure over a <code>HeaderStore</code> instance.","<code>Header</code> sled tree","","","","","","","","","","","","","","","","","","","Check if the headerstore contains a given headerhash.","","","Represents the genesis header on current timestamp","","","","","","","","","","","","","","","Epoch number","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Fetch given headerhashes from the overlay. The resulting …","Fetch given headerhashes from the headerstore. The …","Retrieve all headers from the headerstore in the form of a …","Compute the header’s hash","Block/Slot height","","","","Insert a slice of <code>Header</code> into the overlay. The header’s …","Insert a slice of <code>Header</code> into the blockstore.","Generate the sled batch corresponding to an insert, so …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Opens a new or existing <code>HeaderStore</code> on the given sled …","The block’s nonce. In PoW, this value changes …","","","","Previous block hash","Block creation timestamp","","","Merkle tree of the transactions contained in this block","","","","","","","","","","","","","","","","","","","Block version","","","","The <code>BlocksSlotsStore</code> is a <code>sled</code> tree storing all the blocks…","Overlay structure over a <code>BlocksSlotsStore</code> instance.","","","The <code>SlotStore</code> is a <code>sled</code> tree storing the blockhains’ …","Overlay structure over a <code>SlotStore</code> instance.","","","","","","","","","","","","","","","","","","","","","","","Check if the slot store contains a given id.","Check if the blocks slots store contains a given block …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Fetch given slots from the overlay. The resulting vector …","Fetch given blocks slots from the overlay. The resulting …","Fetch given slots from the slot store. The resulting …","Fetch given blocks slots from the blocks slots store. The …","Fetch n slots after given slot. In the iteration, if a …","Retrieve all slot from the slot store. Be careful as this …","Retrieve all blocks slots from the block store in the form …","Fetch slot from the overlay by id.","Fetch the last slot from the overlay, based on the <code>Ord</code> …","Fetch the last slot in the tree, based on the <code>Ord</code> …","","","","","Insert a slice of <code>Slot</code> into the overlay. The slot id is …","Insert a slice of block hashes and their <code>u64</code> vectors into …","Insert a slice of <code>Slot</code> into the slot store.","Insert a slice of block hashes and their <code>u64</code> vectors into …","Generate the sled batch corresponding to an insert, so …","Generate the sled batch corresponding to an insert, so …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Retrieve records count","","","Opens a new or existing <code>SlotStore</code> on the given sled …","Opens a new or existing <code>BlocksSlotsStore</code> on the given sled …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The <code>PendingTxOrderStore</code> is a <code>sled</code> tree storing the order …","The <code>PendingTxStore</code> is a <code>sled</code> tree storing all the node …","","","","The <code>TxStore</code> is a <code>sled</code> tree storing all the blockchain’s …","Overlay structure over a <code>TxStore</code> instance.","","","","","","","","","","","","","","","","","","","","","","","","","","Check if the txstore contains a given transaction hash.","Check if the pending tx store contains a given transaction …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Fetch given tx hashes from the overlay. The resulting …","Fetch given tx hashes from the txstore. The resulting …","Fetch given tx hashes from the pending tx store. The …","Retrieve all transactions from the txstore in the form of …","Retrieve all transactions from the pending tx store in the …","Retrieve all transactions from the pending tx order store …","","","","","Insert a slice of <code>Transaction</code> into the overlay. The …","Insert a slice of <code>Transaction</code> into the txstore.","Insert a slice of <code>Transaction</code> into the pending tx store.   ","Insert a slice of <code>blake3::Hash</code> into the pending tx order …","Generate the sled batch corresponding to an insert, so …","Generate the sled batch corresponding to an insert, so …","Generate the sled batch corresponding to an insert, so …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Retrieve records count","","Opens a new or existing <code>TxStore</code> on the given sled database.","Opens a new or existing <code>PendingTxStore</code> on the given sled …","Opens a new or existing <code>PendingTxOrderStore</code> on the given …","","","","","Remove a slice of <code>blake3::Hash</code> from the pending tx store.","Remove a slice of <code>u64</code> from the pending tx order store.","Generate the sled batch corresponding to a remove, so …","Generate the sled batch corresponding to a remove, so …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Block definition","Lamport clock","Constants","Fee calculations","Consensus participation coin functions and definitions","Consensus block leader information","P2P net protocols","encrypted receipient coin info","Consensus state","transfered tx proof with public inputs.","async tasks to utilize the protocols","transfer transaction","Utility types Type aliases used in the consensus codebase.","Utility functions","Consensus validator state","Wallet functions","This struct represents a tuple of the form (<code>magic</code>, <code>header</code>, …","Structure representing full block data.","Auxiliary structure used for blockchain syncing.","This struct represents a block proposal, used for …","Auxiliary structure used for blockchain syncing","This struct represents a tuple of the form (version, …","","","","","","","","","","","","","","","","","","Block headerhash of that slot","Block data","Calculate the block hash","Calculate the block hash","Response blocks.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Epoch","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Generate the genesis block.","Generate the genesis block.","Block hash","Block header","Block header data","Block header hash","Calculate the header hash","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Lead Info","Lead Info,","Block magic bytes","BlockInfo magic bytes","","","","","","","","","","","Previous block hash","Root of the transaction hashes merkle tree","Slot UID","Slot UID","Block creation timestamp","","","","","","","","","","","","","","","","","","","Trasaction hashes","Transactions payload","","","","","","","","","","","","","","","","","","","","","","","","","Block version","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","returns absolute zero based epoch index.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","returns absolute zero based slot index","returns relative zero based slot index","","","return absolute tick to genesis, and relative tick index …","return true if the clock is at the begining (before 2/3 of …","return the ticks phase with corresponding phase parameters","","returns time since genesis in seconds.","","","","","","","","","","","","","","","","","","","","","Block info magic bytes","Block magic bytes","Block version number","","","Number of slots in one epoch","Finalization sync period duration (should be &gt;=2/3 of slot …","","","","","","","","","","","","","","","","","Leader proofs k for zk proof rows (rows=2^k)","","","Bootstrap timestamp for the mainnet chain","Genesis hash for the mainnet chain","Genesis timestamp for the mainnet chain","Total sum of initial staking coins for the mainnet chain","","","","","","","","","","","","","","","","","Block leader reward","Slot time in seconds","Max resync retries","Max resync retries duration in epochs","Bootstrap timestamp for the testnet chain","Genesis hash for the testnet chain","Genesis timestamp for the testnet chain","Total sum of initial staking coins for the testnet chain","Transactions included in a block cap","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codealculate the gas use for verifying a given zkas circuit. …","Structure representing the consensus leader coin","This struct holds the secrets for creating LeadCoins …","","","","","","","","","","","","","","","","","","","","","coin1 commitment blinding factor","Commitment for coin1","Merkle path to the coin1’s commitment","Coin commitment position","Merkle root of coin1 commitment","coin1 sk","Merkle path to the secret key of <code>coin1</code>","coin1 sk position in merkle tree","Merkle root of the <code>coin1</code> secret key","","Try to create a ZK proof of consensus leadership","","","","","","","","the new coin to be minted after the current coin is spent …","calculated derived coin commitment","calculate derived coin nonce: hash of root coin secret key …","","","","","Derive election seeds from given parameters","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Generate epoch coins secret keys. First clot coin secret …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Create a new <code>LeadCoin</code> object using given parameters.","Coin nonce","calculate coin public key: hash of root coin secret key …","","","Create a vector of <code>pallas::Base</code> elements from the <code>LeadCoin</code> …","","Coin creation slot.","","","","","","","","","","","","","","","","","Coin’s stake value","","","This struct represents <code>Block</code> leader information used by …","Wrapper over the Proof, for future additions.","","","","","","","","","","","","","","","Leader coin creation eta","Leader coin creation slot","","","","","Default LeadInfo used in genesis block generation","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Block producer leaders count","","","","Leader NIZK proof","Leadership proof","Block producer slot competing coins public inputs","Block producer public_key","Block producer signature","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Block proposal protocol","Validator + Replicator blockchain sync protocol","Validator consensus sync protocol","Transaction broadcast protocol","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","transfered lead coin is rcpt into two coins, first coin is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","encrypt received coin, by recipient public key","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","rcpt coin commitment opening","","","rcpt coin nonce","","","","","","","","","","","","","","","rcpt coin value","","","Auxiliary structure used for consensus syncing.","Auxiliary structure used for consensus syncing.","This struct represents the information required by the …","Auxiliary structure used for consensus syncing.","Auxiliary structure used for consensus syncing.","This struct represents a sequence of consensus state …","Auxiliary structure used for forks syncing","Auxiliary structure used for slots syncing","Auxiliary structure used for slots syncing","Auxiliary structure used to keep track of consensus state …","Auxiliary structure used for forked consensus state …","","","","","","","","","","Insertion of a valid state checkpoint.","","","","","","","","","","","","","","","","","","","","","","","Canonical (finalized) blockchain","Slot the network was bootstrapped","Slot the network was bootstrapped","Node known bootstrap slot","Network bootstrap timestamp","","","","","","","","","","","","","","","","","","","","","","","","A fork chain is considered valid when every state …","A state checkpoint is considered valid when its proposal …","Last slot node check for finalization","","","","","","","","","","","","","","","","","","","Canonical competing coins","Node competing coins current state","Canonical coin commitments tree","Coin commitments tree current state","Generate coins for provided sigmas. NOTE: The strategy …","Current slot","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Current epoch","Check if new epoch has started and generate slot. Returns …","Controller proportional error history","Controller proportional error history","","Controller output history","Controller output history","Given a proposal, find the index of the fork chain it …","","","","","","","","","","","Retrieve current forks last proposal hashes and their …","Fork chains containing block proposals","Hot/live data used by the consensus algorithm","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Generate current slot","Genesis block hash","","","Utility function to extract leader selection lottery …","Auxillary function to retrieve slot of provided slot UID.","","","","","","","","","","","","","Total sum of initial staking coins","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Node has hot/live slots","Check that the participant/stakeholder coins win the slot …","Finds the last slot a proposal or block was generated.","","","","","","","","","","","","Finds the longest forkchain the node holds and returns its …","Finds the length of longest fork chain the node holds.","","","","Canonical seen nullifiers from proposals","Seen nullifiers from proposals","Seen nullifiers from proposals current state","Seen nullifiers from proposals current state","Participating start slot","Pending transactions","","","","","","","","","","","","Last slot leaders count","Block proposal","Block proposal","Search the chains we’re holding for the given proposal.","Node is able to propose proposals","Node is able to propose proposals","Auxiliary structure to reset consensus state for a resync","Leadership reward, assuming constant reward TODO (res) …","","","Set participating slot to next.","Return 2-term target approximation sigma coefficients.","Flag to enable single-node mode","Slot UID","Auxillary function to calculate total slot rewards.","Hot/live slots","Hot/live slots","Response blocks.","Auxillary function to check if node has seen current or …","Helper structure to calculate time related operations","","","","","","","","","","Network total stake, assuming constant reward. Only used …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Auxillary function to update all fork state checkpoints to …","","","","","","","","","","","","Wallet interface","the probability inverse of winning lottery having all the …","","","","","","","coin3_commitment in zk","","","sender’s coin, or coin1_commitment in zk","sender’s coin pk","sender’s coin sk’s root","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","nullifiers coin1_nullifier","","transfer proof","arrange public inputs from Stxfer","root to coin’s commitments","sk coin creation slot","","coin4_commitment in zk","","","","","","","verify the transfer proof.","","","async task used for block syncing.","","async task used for consensus state syncing. Returns flag …","","async task used for participating in the consensus protocol","async task used for block syncing.","async task used for consensus state syncing. Returns flag …","Consensus protocol loop","async function to wait and execute consensus protocol …","async task used for participating in the consensus protocol","async function to wait and execute consensus protocol …","transfer transaction","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","note! only support positive conversion, and zero. used for …","note! nagative values in pallas field won’t wraps, and …","","This struct represents the state of a validator node.","Atomic pointer to validator state.","","The node retrieves transactions vector, validates their …","The node retrieves a transaction, validates its state …","","","Canonical (finalized) blockchain","","","Node checks if any of the fork chains can be finalized. …","Hot/Live data used by the consensus algorithm","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","Leader proof proving key","Leader proof verifying key","","","","Generate a block proposal for the current slot, containing …","","The node removes erroneous transactions from the pending …","Validate and append to canonical state received blocks.","Validate and append to canonical state received finalized …","Validate and append to canonical state received finalized …","Given a proposal, the node verify its sender (slot leader) …","Append to canonical state received finalized slots from …","Validate and append to canonical state received finalized …","Flag to enable single-node mode","A map of various subscribers exporting live info from the …","Flag signalling node has finished initial sync","","","","Retrieve all pending transactions not proposed in previous …","","","","Validate signatures, wasm execution, and zk proofs for …","Validate a set of <code>Transaction</code> in sequence and apply them …","","Wallet interface","","","","","","","","","","","","","","","","","","","","","","","","","","","Client module errors","","Result type used in the Client module","","","","","","","","","","","","","","","","","","","","","","Contains the error value","Contains the error value","","","General library errors used throughout the codebase.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Contains the success value","Contains the success value","","","","","","","","","","","","","","","","","","","","","","","Main result type used throughout the codebase.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Transaction verification errors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Auxiliary function to retrieve the vector of erroneous …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Allowed timestamp drift in seconds","","An Event Graph instance","Atomic pointer to an <code>EventGraph</code> instance.","Genesis event contents","Initial genesis timestamp (07 Sep 2023, 00:00:00 UTC) Must …","Null event ID","The number of parents an event is supposed to have.","","","","","","","A <code>HashSet</code> containg event IDs and their 1-level parents. …","Sled tree containing the DAG","Fetch an event from the DAG","Atomically insert given events into the DAG and return the …","Atomically prune the DAG and insert the given event as …","Background task periodically pruning the DAG.","Sync the DAG from connected peers","","","","","","We do a DFS (…","","An event graph event","Event subscriber, this notifies whenever an event is …","Find the unreferenced tips in the current DAG state.","Returns the argument unchanged.","Generate a deterministic genesis event corresponding to …","Get the current set of unreferenced tips in the DAG.","Internal function used for DAG sorting.","","Calls <code>U::from(self)</code>.","","","","","Create a new <code>EventGraph</code> instance.","Perform a topological sort of the DAG.","Pointer to the P2P network instance","","","P2P protocol implementation for the Event Graph","DAG Pruning Task","","Check if two events have the same parents","","","","The set of unreferenced DAG tips","","","","Utility functions","","Representation of an event in the Event Graph","","","","","","","","Return a reference to the event’s content","Content of the event","","","","","","","","","","Returns the argument unchanged.","Hash the <code>Event</code> to retrieve its ID","","Calls <code>U::from(self)</code>.","","","","","Create a new event with the given data and an [<code>EventGraph</code>] …","Parent nodes in the event DAG","","Timestamp of the event","","","","","","","","Validate a new event for the correct layout and enforce …","","A P2P message representing publishing an event on the …","A P2P message representing an event reply","A P2P message representing an event request","Malicious behaviour threshold. If the threshold is …","P2P protocol implementation for the Event Graph.","Time to wait for a parent ID reply","A P2P message representing a reply for the peer’s DAG …","A P2P message representing a request for a peer’s DAG …","","","","","","<code>MessageSubscriber</code> for <code>TipRep</code>","","","","","","","","","","","","","","","","","","","","","","","","","Pointer to the connected peer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>MessageSubscriber</code> for <code>EventPut</code>","<code>MessageSubscriber</code> for <code>EventRep</code>","<code>MessageSubscriber</code> for <code>EventReq</code>","Pointer to the Event Graph instance","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Protocol function handling <code>EventPut</code>. This is triggered …","Protocol function handling <code>EventReq</code>. This is triggered …","Protocol function handling <code>TipReq</code>. This is triggered when …","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","P2P jobs manager pointer","","","","","","","Peer malicious message count","","","","","","","","","<code>MessageSubscriber</code> for <code>TipReq</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Seconds in a day","Calculate the number of days since a given midnight …","Calculate the midnight timestamp given a number of days. …","Calculate the timestamp of the next DAG rotation.","Path prefix where file chunks are stored","<code>ChunkedFile</code> is a representation of a file we’re trying to","Path prefix where file metadata is stored","Chunk-based file storage interface.","Defined maximum size of a stored chunk (256 KiB)","","","","","","","","","","Path to the filesystem directory where file chunks are …","","","","","","","","","","","Path to the filesystem directory where file metadata is …","Returns the argument unchanged.","Returns the argument unchanged.","Perform garbage collection over the filesystem hierarchy. …","Fetch file metadata from Geode. Returns <code>ChunkedFile</code> which …","Fetch a single chunk from Geode. Returns a <code>PathBuf</code> …","","","Insert a file into Geode. The function expects any kind of …","Create and insert a single chunk into Geode given a stream.","Create and insert file metadata into Geode given a list of …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Check whether we have all the chunks available locally.","Return an iterator over the chunks and their paths.","","","Instantiate a new <code>Geode</code> object. <code>base_path</code> defines the root …","","","","Attempt to read chunk hashes from a given file path and …","","","","","","","","","","","","","","","","","","","","","","","","","","","Handles the acceptance of inbound socket connections. Used …","Async channel that handles the sending of messages across …","Handles the creation of outbound connections. Used to …","Optional events based debug-notify subsystem. Off by …","Hosts are a list of network addresses used when …","Defines how to decode generic messages as well as …","Generic publish/subscribe class that can dispatch any kind …","P2P provides all core functionality to interact with the …","Defines the networking protocol used at each stage in a …","Defines the interaction between nodes during a connection. …","Network configuration settings. This holds the configured …","Network transports, holds implementations of pluggable …","Create inbound socket connections","Atomic pointer to Acceptor","Run the accept loop in a new thread and error if a …","","","","","","","","","","","","Returns the argument unchanged.","Handles network errors. Panics if errors pass silently, …","","Calls <code>U::from(self)</code>.","","","","","Create new Acceptor object.","","","","Run the accept loop.","","Start accepting inbound socket connections","Stop accepting inbound socket connections","Start receiving network messages.","","","","","","","","","Async channel for communication between nodes.","Channel debug info","Atomic pointer to async channel","","","Returns the local socket address","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Handle network errors. Panic if error passes silently, …","","Channel debug info","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Run the receive loop. Start receiving messages or handle …","Returns the inner <code>MessageSubsystem</code> reference","The message subsystem instance for this channel","Sets up a new channel. Creates a reader and writer <code>PtStream</code>…","","","","","","","The reading half of the transport stream","Task that is listening for the stop signal","Sends a message across a channel. Calls <code>send_message</code> that …","Implements send message functionality. Creates a new …","","Weak pointer to respective session","","Perform network handshake for message subsystem …","Starts the channel. Runs a receive loop to start receiving …","Stops the channel. Notifies all subscribers that the …","Subscriber listening for stop signal for closing this …","A boolean marking if this channel is stopped","Subscribe to a message on the message subsystem.","Creates a subscription to a stopped signal. If the channel …","","","","","","","","","","","","","","","","The writing half of the transport stream","Create outbound socket connections","","","","","Establish an outbound connection","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","Create a new connector with given network settings","","Weak pointer to the session","P2P settings","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Manages a store of network addresses","Atomic pointer to hosts object","","Set of stored addresses","","","","","","Check if host is already in the set","","","","","Return all known hosts","Get up to limit peers that don’t match the given …","Get up to n random peers from the hosts set.","Get up to n random peers that don’t match the given …","Get up to n random peers that match the given transport …","Get up to limit peers that match the given transport …","Filter given addresses based on certain rulesets and …","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","Check if the host list is empty.","","Check if a given peer (URL) is in the set of rejected hosts","","Mark a peer as rejected by adding it to the set of …","Create a new hosts list&gt;","","","","Quarantine a peer. If they’ve been quarantined for more …","Set of stored addresses that are quarantined. We …","Peers we reject from connecting","","Pointer to configured P2P settings","Append given addrs to the known set.","Subscriber listening for store updates","","","","","Unmark a rejected peer","","","","","Sends address information to inbound connection. Response …","Requests address of outbound connecction.","","Generic message template.","","Packets are the base type read from the network. Converted …","Outbound keepalive message.","Inbound keepalive message.","Sends version information to inbound connection. Response …","Requests version information of outbound connection.","","","","","","","","App version","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Maximum number of addresses with preferred transports to …","Only used for debugging. Compromises privacy when set.","","","","","","","","","","","Reads and decodes an inbound payload from the given async …","Sends an outbound packet by writing data to the given …","","","","","","","Preferred addresses transports","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Contains the error value","A dispatcher that is unique to every <code>Message</code>. Maintains a …","Generic interface for the message dispatcher.","","Handles message subscriptions through a subscription ID and","64-bit identifier for message subscription.","Generic publish/subscribe class that maintains a list of …","Contains the success value","Private function to concurrently transmit a message to all …","Add a new dispatcher for specified <code>Message</code>.","","","Converts to <code>Any</code> trait. Enables the dynamic modification of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Create a new message dispatcher","Create a new message subsystem.","Transmits a payload to a dispatcher. Returns an error if …","","","","","Create a random ID.","Start receiving messages.","","","Subscribe to a channel. Assigns a new ID and adds it to …","Subscribes to a <code>Message</code>. Using the Message name, the method","","Internal function to deserialize data into a message type …","","Internal function that sends an error message to all …","Concurrently transmits an error message across dispatchers.","","","","","","","","","","Unsubscribe from a channel. Removes the associated ID from …","Unsubscribe from a message subscription. Must be called …","","","","","","","","","","","","","Set of connected channels","Toplevel peer-to-peer networking interface","Atomic pointer to the p2p interface","Set of channels that are awaiting connection","Add an address to the list of pending channels.","","","","","","Broadcasts a message concurrently across all active …","Broadcast a message concurrently to all given peers.","Broadcasts a message concurrently across active channels, …","Subscriber for notifications of new channels","Return all connected channels","Connected channels","","","","","","Disable network debugging","Enable network debugging","Enable network debugging","Send a dnet notification over the subscriber","Subscribe to dnet events","The subscriber for which we can give dnet info over","","Reference the global executor","Global multithreaded executor reference","Check whether we’re connected to a given address","Returns the argument unchanged.","Return an atomic pointer to the list of hosts","Known hosts (peers)","","Calls <code>U::from(self)</code>.","","","","","","","","Initialize a new p2p network.","Boolean lock marking if peer discovery is active","Channels pending connection","","","Return a reference to the internal protocol registry","Protocol registry","","Retrieve a random connected channel from the","Remove a channel from the set of connected channels","Remove a channel from the list of pending channels.","Reseed the P2P network.","Get pointer to inbound session","Reference to configured <code>InboundSession</code>","Get pointer to manual session","Reference to configured <code>ManualSession</code>","Get pointer to outbound session","Reference to configured <code>OutboundSession</code>","Return an atomic pointer to the set network settings","P2P network settings","Starts inbound, outbound, and manual sessions.","","","Stop the running P2P subsystem","Add a channel to the set of connected channels","","","","","","","","","","","","Protocol for address and get-address messages. Implements …","Base trait for implementing P2P protocols","Manages the tasks for the network protocol. Used by other …","Protocol for ping-pong keepalive messages. Implements ping …","Interface for registering arbitrary P2P protocols","Seed servere protocol. Seed server is used when connecting …","Protocol for version information handshake between nodes …","Register the default network protocols for a p2p instance.","","Defines address and get-address messages","","","","","","","","","","","Returns the argument unchanged.","","Handles receiving the address message. Loops to …","Handles receiving the get-address message. Continually …","","Creates a new address protocol. Makes an address, an …","","Calls <code>U::from(self)</code>.","","","","","","","","Periodically send our external addresses through the …","","Starts the address protocol. Runs receive address and get …","","","","","","","","","","","","","","","","Pointer to protocol jobs manager","","","","","","","Closes all open tasks. Takes all the tasks from the …","","","","","Returns the argument unchanged.","Waits for a stop signal, then closes all tasks. Ensures …","","Calls <code>U::from(self)</code>.","","","","","","Create a new protocol jobs manager","","","","Spawns a new task and adds it to the internal queue","Runs the task on an executor","","","","","","","","","","Defines ping and pong messages","","","","","","","","","","Returns the argument unchanged.","Create a new ping-pong protocol.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","Waits for ping, then replies with pong. Copies ping’s …","Runs the ping-pong protocol. Creates a subscription to …","","Starts ping-pong keepalive messages exchange. Runs …","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","Instantiate a new <code>ProtocolRegistry</code>","","<code>add_protocol()?</code>","","","","","","","","","Implements the seed protocol","","","","","","","","","","","Returns the argument unchanged.","","","Create a new seed protocol.","Calls <code>U::from(self)</code>.","","","","","","","Sends own external addresses over a channel. Imports own …","","Starts the seed protocol. Creates a subscription to the …","","","","","","","","Implements the protocol version handshake sent out by …","","","","","","","","","","Send and receive version information","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","Create a new version protocol. Makes a version and version …","","Receive version info, check the message is okay and send …","Start version information exchange. Start the timer. Send …","Send version info and wait for version acknowledgement. …","","","","","","","","","","","","","","","","","","","","","","","","Session trait. Defines methods that are used across …","Bitwise selectors for the <code>protocol_registry</code>","","","Inbound connections session. Manages the creation of …","Manual connections session. Manages the creation of manual …","Outbound connections session. Manages the creation of …","Returns a pointer to the p2p network interface","Performs network handshake to initialize channel. Adds the …","","Registers a new channel with the session. Performs a …","Removes channel from the list of connected channels when a …","Seed sync session creates a connection to the seed nodes …","Return the session bit flag for the session type","Defines inbound connections session","","","","","","","","","Wait for all new channels created by the acceptor and call …","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","Create a new inbound session","","","","","","Registers the channel. First performs a network handshake …","Starts the inbound session. Begins by accepting …","Start accepting connections for inbound session.","Stops the inbound session.","","","","","","","","","Defines manual connections session.","","","","","","","Creates a connector object and tries to connect using it","Subscriber used to signal channels processing","Connect the manual session to the given address","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","Create a new manual session.","","","","","","Stops the manual session.","","","","","","","","","Defines outbound connections session.","","","","","","","","","","","","","","","","","","Subscriber used to signal channels processing","","","","","","","","","","","","","Loops through host addresses to find an outbound address …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Create a new outbound session.","","","","","","","","Weak pointer to parent p2p object","Peer discovery task","","","","","","","","","Activate peer discovery if not active already. This will …","","","","","","","","Outbound connection slots","Start the outbound session. Runs the channel connect loop.","","","Stops the outbound session.","","","Start making an outbound connection, using provided …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Defines seed connections session","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","Create a new seed sync session instance","","","","","","Start the seed sync session. Creates a new task for every …","Connects to a seed socket address","","","","","","","","","P2P network settings. The scope of this is a P2P network …","Defines the network settings.","Atomic pointer to network settings","","","","Whitelisted network transports for outbound connections","Preferred transports for outbound connections","Application version, used for convenient protocol matching","","","","","","","","","Exchange versions (handshake) timeout (in seconds)","Exchange versions (handshake) timeout in seconds","Ping-pong exchange execution interval (in seconds)","Ping-pong exchange execution interval in seconds","","","","","","","","","","","","","","","","","P2P external addresses the instance advertises so other …","P2P external addresses node advertises so other peers can …","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Delete a peer from hosts if they’ve been quarantined N …","Delete a peer from hosts if they’ve been quarantined N …","P2P accept address node listens to for inbound connections","P2P accept addresses the instance listens on for inbound …","Inbound connection slots number, this many active …","Inbound connection slots number","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Allow localnet hosts","Allow localnet hosts","Manual connections retry limit, 0 for forever looping","Manual connections retry limit","","Only used for debugging, compromises privacy when set","Only used for debugging. Compromises privacy when set.","Outbound connection timeout (in seconds)","Connection establishment timeout in seconds","Outbound connection slots number, this many connections …","Outbound connection slots number","Time between peer discovery attempts","Time between peer discovery attempts","Cooling off time for peer discovery when unsuccessful","Cooling off time for peer discovery when unsuccessful","Peer nodes to manually connect to","Peer nodes to manually connect to","","","","","Seed nodes to connect to for peer discovery and/or …","Seed nodes to connect to for peers retrieval and/or …","","","Allow transport mixing (e.g. Tor would be allowed to …","Allow transport mixing (e.g. Tor would be allowed to …","","","","","","","","","","","","","","","A dialer that is able to transparently operate over …","Dialer variants","A listener that is able to transparently listen over …","Listener variants","Nym","Nym with TLS","Wrapper trait for async listeners","Wrapper trait for async streams","Plain TCP","Plain TCP","TCP with TLS","TCP with TLS","Tor","Tor with TLS","Unix socket","Unix socket","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Dial an instantiated <code>Dialer</code>. This creates a connection and …","","","","","Return a reference to the <code>Dialer</code> endpoint","","The endpoint to connect to","The address to open the listener on","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Listen on an instantiated <code>Listener</code>. This will open a …","Instantiate a new <code>Dialer</code> with the given <code>Url</code>.","Instantiate a new <code>Listener</code> with the given <code>Url</code>. Must …","","Nym transport","","","","","TCP transport","TLS upgrade mechanism","","","Tor transport","","","","","","","","","","","","","Unix socket transport","","","","","","","","","","","","","The dialer variant (transport protocol)","The listener variant (transport protocol)","","","","","Unique, randomly-generated per-connection ID that’s used …","Nym Dialer implementation","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Instantiate a new <code>NymDialer</code> object","","","","","","","","","","","","","","","","","","","TCP Dialer implementation","TCP Listener implementation","","","","","","","Size of the listen backlog for listen sockets","","","","","","","","","Internal helper function to create a TCP socket.","Internal helper function to create a TCP socket.","","","","","","","Internal dial function","Internal listen function","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Instantiate a new <code>TcpDialer</code> with optional TTL.","Instantiate a new <code>TcpListener</code> with given backlog size.","","","","","","","","","TTL to set for opened sockets, or <code>None</code> for default.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","TLS client configuration","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","TLS server configuration","","","","","","","","","","","","","","","","","","","","","Validate that the altName pubkey is the same as the …","","","","","","A static for <code>TorClient</code> reusability","Tor Dialer implementation","","","","","","","","","","","Internal dial function","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","Instantiate a new <code>TorDialer</code> object","","","","","","","","","","Unix Dialer implementation","Unix Listener implementation","","","","","","","","","","","","","","","","","","","","","Internal dial function","Internal listen function","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Instantiate a new <code>UnixDialer</code> object","Instantiate a new <code>UnixListener</code> object","","","","","","","","","","","","","","","","","","","Client-side JSON-RPC implementation","Clock sync utility module Clock sync module","Common internal functions","Various <code>From</code> implementations","JSON-RPC primitives JSON-RPC 2.0 object definitions","Provides optional <code>p2p.get_info()</code> method","Server-side JSON-RPC implementation","Json helper methods and types","JSON-RPC client implementation using asynchronous channels.","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","Instantiate a new JSON-RPC client that connects to the …","Oneshot send a given JSON-RPC request over the …","","The channel used to read the JSON-RPC response object.","The channel used to send JSON-RPC request objects. The <code>bool</code>…","Internal function that loops on a given stream and …","Send a given JSON-RPC request over the instantiated client …","Stop the JSON-RPC client. This will trigger <code>stop()</code> on the …","Listen instantiated client for notifications. NOTE: …","The stoppable task pointer, used on <code>RpcClient::stop()</code>","","","","","","","","","TODO: Loop through set of ntps, get their average response …","Clock sync parameters","This is a very simple check to verify that the system time …","","Raw NTP request execution","","","","Internal read function that reads from the active stream …","Internal write function that writes a JSON-RPC object to …","","JSON-RPC error codes. The error codes <code>[-32768, -32000]</code> are …","ID mismatch","Internal JSON-RPC error.","Invalid method parameter(s).","Invalid/Unexpected reply","The JSON sent is not a valid Request object.","A JSON-RPC error object","A JSON-RPC error value (code and message)","A JSON-RPC notification object","A JSON-RPC request object","A JSON-RPC response object","Wrapping enum around the available JSON-RPC object types","A JSON-RPC subscriber for notifications","The method does not exist / is not available.","","Invalid JSON was received by the server. An error occurred …","","","Reserved for implementation-defined server-errors.","Subscriber is a special object that yields a channel","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Error code","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","JSON-RPC error (code and message)","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Request ID","Request ID","Request ID","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","JSON-RPC version","JSON-RPC version","JSON-RPC version","JSON-RPC version","","","","","","","","","","Error message","Request method","Notification method","Notification method","Create a new <code>JsonRequest</code> object with the given method and …","Create a new <code>JsonNotification</code> object with the given method …","Create a new <code>JsonResponse</code> object with the given ID and …","Create a new <code>JsonError</code> object with the given error code, …","","Send a notification to the subscriber with the given JSON …","Request parameters","Notification parameters","","","","","","","","","Response result","Convert the object into a JSON string","Convert the object into a JSON string","Convert the object into a JSON string","Convert the object into a JSON string","Notification subscriber","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Asynchronous trait implementing a handler for incoming …","Accept function that should run inside a loop for …","","","","","Start a JSON-RPC server bound to the given accept URL and …","","","Wrapper function around <code>accept()</code> to take the incoming …","","","Array type value.","Boolean type value.","","","","","Enum to represent one JSON value. Each variant represents …","Null type value.","Number type value.","Object type value.","String type value.","","","","","","","","","","","","","","Convert this JSON value to <code>String</code> value with 2-spaces …","Write this JSON value to the given <code>io::Write</code> object as …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Get immutable reference to the inner value.","Get mutable reference to the inner value.","","","","","","Calls <code>U::from(self)</code>.","","","","Check if the inner value is an array.","Check if the inner value is a boolean.","Check if the inner value is null.","Check if the inner value is a number.","Check if the inner value is an object.","Check if the inner value is a string.","","","","","Convert this JSON value to <code>String</code> value.","","","","","","","","","Write this JSON value to the given <code>io::Write</code> object as …","Imported host functions","VM memory access (read/write)","Main wasm vm runtime implementation","Host functions for interacting with db backend","Host functions for merkle tree functions","Host functions for utilities","Internal wasm runtime API for sled trees","","","","","","Everyone can call this. Will check if a given db contains …","Remove a key from the database.","Will read a key from the key-value store.","Only deploy() can call this. Creates a new database …","Everyone can call this. Lookups up a database handle from …","Set a value within the transaction.","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Only <code>deploy()</code> can call this. Given a zkas circuit, create …","","Host function for logging strings. This is injected into …","Will return current blockchain timestamp.","Will return current epoch number.","Will return current slot number.","","","Will return requested slot from <code>SlotStore</code>.","Will return current runtime configured verifying slot …","Will return current runtime configured verifying slot …","","","","","","Setup function of a contract","The wasm vm runtime instantiated for every smart contract …","Entrypoint function of a contract","Gas limit for a contract","Name of the wasm linear memory in our guest module","Metadata","Placeholder state before any initialization","","Apply function of a contract","","This function runs after successful execution of <code>exec</code> and …","","","","","","","Blockchain overlay access","","","","","","","","","","The compiled wasm bincode being executed,","The contract ID being executed","State update produced by a smart contract function call","The contract section being executed","Copy payload to the start of the memory","","Overlay tree handles used with <code>db_*</code>","This function runs when a smart contract is initially …","","","","","","","","","","","","","","This funcion runs when someone wants to execute a smart …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Logs produced by the contract","Get memory, that needs to have been set fist","Direct memory access to the VM","Provide safe access to the memory (it must be initialized …","This function runs first in the entire scheme of executing …","","Create a new wasm runtime instance that contains the given …","Object store for transferring memory from the host to VM","","","","","Perform a sanity check of the WASM bincode","Serialize contract payload to the format accepted by the …","Set the memory page size","","Take Memory by value. Needed to modify the Memory object …","Helper structure to calculate time related operations","","","","","","","","","","","","","","","","","","","","","","","","","","Condition variable which allows a task to block until …","","Convenient late initialization of <code>Weak&lt;Foo&gt;</code>","Sleep for any number of milliseconds.","","","Sleep for any number of seconds.","","Implementation of async background task spawning which are …","Simple broadcast (publish-subscribe) class","Async timeout implementations","Condition variables allow you to block a task while …","","Awaitable futures object returned by <code>condvar.wait()</code>","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Wakeup the waiting task. Subsequent calls to this do …","","","","","Reset self ready to wait() again. The reason this is …","","","","","","","","","","","","","","","","","","","","","","","","Reset the condition variable and wait for a notification","","Sometimes you need a parent-child relationship which …","","","","","","","","","","Returns the argument unchanged.","Must be called within the same scope as <code>new()</code>.","","Calls <code>U::from(self)</code>.","","","","","Create an empty <code>LazyWeak</code>, which must immediately be …","","","","","","","","Access the <code>Arc&lt;Parent&gt;</code> pointer","","","","","","","When we call <code>stop()</code>, we wait until the process is …","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","Used to signal to the main running process that it should …","Starts the task.","Stops the task. On completion, guarantees the process has …","Used so we can keep StoppableTask in HashMap/HashSet","","","","","","","","Simple broadcast (publish-subscribe) class","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Must be called manually since async Drop is not possible …","","","","","","","","","","","An error returned when a future times out.","A future that times out after a duration of time.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Awaits an I/O future or times out after a duration of time.","","","","","","","","","","Awaits a future or times out after a duration of time.","","","","","","","","","","","","","","","","","","","","","","","","","","","A Transaction contains an arbitrary number of <code>ContractCall</code> …","","","","","","Calls executed in this transaction","","","Create Schnorr signatures for the entire transaction.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Get the transaction hash","","Calls <code>U::from(self)</code>.","","","","","","Attached ZK proofs","Attached Schnorr signatures","","","","","","","","Verify Schnorr signatures for the entire transaction.","Verify ZK proofs for the entire transaction.","","","Command-line interface utilities","Various encoding formats","Filesystem utilities","Parsing helpers","Filesystem path utilities","Permuted Congruential Generator (PCG) This is an insecure …","Ring Buffer implementation","Time utilities","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Base32 encoding and decoding Base32 encoding as specified …","Base64 encoding and decoding","Standard Base32 alphabet.","","Tries to decode a base32 string into a byte vector. …","Encode a byte slice with the given base32 alphabet into a …","","","","","","","","","Tries to decode a base64 string into a byte vector. …","Encode a byte slice into a base64 string","","","","","","","","","Returns <code>$XDG_CONFIG_HOME</code>, <code>$HOME/.config</code>, or <code>None</code>.","","","Returns the path to the user’s home directory. Use <code>$HOME</code>…","Get the home directory from the passwd entry of the …","","Join a path with <code>config_dir()/darkfi</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","A ring buffer of fixed capacity","","","","Provides a reference to the back element, or <code>None</code> if empty.","","","","","Returns true if the buffer contains an element equal to …","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","Returns true if buffer is empty, false otherwise","Returns a front-to-back iterator","","Returns the current number of items in the buffer","Rearranges the internal storage of this deque so it is one …","Create a new <code>RingBuffer</code> with given fixed capacity","","Removes and returns the oldest item in the buffer","Push an element to the back of the <code>RingBuffer</code>, removing …","","Cast the ringbuffer into a vec","","","","","","","","","","","","","","","","","","","Helper structure providing time related calculations. This …","Wrapper struct that allows only coherent and safe values …","Wrapper struct to represent system timestamps.","","","","","","","Increment a ‘Timestamp’.","","","","","","","","","","","","","","","Calculates current blockchain timestamp. Blockchain …","Calculates current blockchain timestamp. Blockchain …","","","","","","","","","","","","","","","","","","","","","","","","","","","Generate a TimeKeeper for current slot","Generate a TimeKeeperSafe for current slot","Calculates current epoch.","Calculates current epoch.","Calculates current slot, based on elapsed time from the …","Calculates current slot, based on elapsed time from the …","Generate a <code>Timestamp</code> of the current time.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calculates elapsed time of a <code>Timestamp</code>.","","","","","Currently configured epoch duration","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Genesis block creation timestamp","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calculates seconds until next Nth epoch starting time.","Calculates seconds until next Nth epoch starting time.","Calculates seconds until next Nth slot starting time.","Calculates seconds until next Nth slot starting time.","","","","","","","","","","Calculates the relative number of the provided slot.","Calculates the relative number of the provided slot.","","Calculates the epoch of the provided slot. Only slot 0 …","Calculates the epoch of the provided slot. Only slot 0 …","Currently configured slot duration","Calculate slots until next Nth epoch. Epoch duration is …","Calculate slots until next Nth epoch. Epoch duration is …","Calculates current system timestamp.","Calculates current system timestamp.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Slot number runtime can access to verify against","Calculates the epoch of the verifying slot.","Calculates the epoch of the verifying slot.","","","","","","","","","","This struct represents a DarkFi validator node.","Configuration for initializing <code>Validator</code>","Atomic pointer to validator.","","Validate a set of <code>BlockInfo</code> in sequence and apply them if …","Validate a producer <code>Transaction</code> and apply it if valid. In …","Validate a set of <code>Transaction</code> in sequence and apply them …","","The node retrieves a block and tries to add it if it doesn…","The node retrieves a transaction, validates its state …","","","","","Canonical (finalized) blockchain","","","","","","","DarkFi consensus module","Hot/Live data used by the consensus algorithm","","","","","","","","","Whitelisted faucet pubkeys (testnet stuff)","The node checks if proposals can be finalized. If …","Currently configured finalization security threshold","Base 10 big float implementation for high precision …","Returns the argument unchanged.","Returns the argument unchanged.","Genesis block","Total amount of minted tokens in genesis block","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","DarkFi consensus PID controller","","","DarkFi PoW module","Currently configured PoW target","Currently configured PoW miner number of threads to use","","The node removes invalid transactions from the pending txs …","Append to canonical state received slot. This should be …","Flag signalling node has finished initial sync","Flag to enable testing mode","Flag to enable testing mode","Helper structure to calculate time related operations","","","","","","","","","","","","","","Helper utilities","Retrieve all existing blocks and try to apply them to an …","Validation functions","Verification functions","","","This struct represents the information required by the …","This struct represents a forked blockchain state, using an …","This struct represents a block proposal, used for …","Block/proposal maximum transactions","","","Given a proposal, the node verifys it and finds which fork …","Auxiliary function to append a proposal and recalculate …","","","","","","","Auxiliary function to find current best ranked forks …","Block data","Canonical (finalized) blockchain","","","","","","","Last slot node check for finalization","","","","","","","","","","","","","","","","","","","","","Consensus finalization logic:","Fork size(length) after which it can be finalized","Given a proposal, find the fork chain it extends, and …","Given a proposal, find the index of the fork chain it …","","Fork chains containing block proposals","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Auxiliary function to create a full clone using …","Generate current hot/live PoS slot for all current forks.","Generate current hot/live PoS slot","Generate next hot/live PoW slot for all current forks.","Generate next hot/live PoW slot","Generate a block proposal for provided fork, containing all","Generate an unsigned block for provided fork, containing …","Utility function to extract leader selection lottery …","Block hash","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Auxiliary function to retrieve last proposal","","","","Valid pending transaction hashes","Canonical blockchain PoW module state","Current PoW module state,","Generate a new Consensus state.","","","Overlay cache over canonical Blockchain","Node is participating to consensus","","","","Retrieve previous slot producers, last proposal hashes, …","Fork proposal hashes sequence","Auxiliarry function to compute fork’s rank, assuming all …","Current fork rank, cached for better performance","Hot/live slots","Flag to enable testing mode","Helper structure to calculate time related operations","","","","","","","","","","","","Auxiliary function to retrieve unproposed valid …","","","","","","","","","","","","","","","","","","","","","","","Wrapper structure over a Base 10 <code>dashu::float::FBig</code> and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert a <code>pallas::Base</code> to <code>dashu::integer::IBig</code>. Note: only …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert a Float10 to <code>pallas::Base</code>. Note: negative values …","Convert a Float10 to <code>dashu::integer::IBig</code>.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","PID controller configuration","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calculate the inverse probability <code>f</code> of becoming a block …","Return 2-term target approximation sigma coefficients, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return 2-term target approximation sigma coefficients, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","How many most recent blocks to use to verify new blocks’ …","Time limit in the future of what blocks can be","Ring buffer length. Must be == DIFFICULTY_WINDOW + …","Already known cutoff start index for this config","Already known cutoff end index for this config","Amount of max items(blocks) to use for next difficulty …","This struct represents the information required by the PoW …","Max items to use for next difficulty calculation. Must be …","Used to calculate how many items to retain for next …","Amount of latest blocks to exlude from the calculation. …","","Append provided timestamp and difficulty to the ring …","Append provided block difficulty to the ring buffers and …","","","","","","","Total blocks cummulative difficulty Note: we keep this as …","Calculate cutoff indexes. If buffers have been filled, we …","","","","Latest block cummulative difficulties ringbuffer","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","Mine provided block, based on provided PoW module next …","","Compute the next mining difficulty, based on current ring …","Compute the next mine target","","Target block time, in seconds","Number of threads to use for hashing","Latest block timestamps ringbuffer","","","","","","","","","Verify provided block corresponds to next mine target","Verify provided block timestamp and hash","Verify provided block timestamp is not far in the future …","Verify provided difficulty corresponds to the next one","Verify provided block timestamp is valid and matches …","","Compute a block’s rank, assuming the its valid. Genesis …","Deploy DarkFi native wasm contracts to provided blockchain …","Auxiliary function to calculate the total amount of minted …","Auxiliary function to calculate the middle value between …","Auxiliary function to calculate the median of a given …","Validate provided block, using its previous, based on its …","A blockchain is considered valid, when every block is …","A PoS block is considered valid when the following rules …","A PoS slot is considered valid when the following rules …","A PoW block is considered valid when the following rules …","A PoW slot is considered valid when the following rules …","Verify given <code>BlockInfo</code>, and apply it to the provided …","Verify given genesis <code>BlockInfo</code>, and apply it to the …","Verify given PoS <code>Proposal</code> against provided consensus state,","Verify given PoW <code>Proposal</code> against provided consensus state,","Verify block proposer signature, using the proposal …","Verify WASM execution, signatures, and ZK proofs for a …","Verify given <code>Proposal</code> against provided consensus state","Verify WASM execution, signatures, and ZK proofs for a …","Verify a set of <code>Transaction</code> in sequence and apply them if …","","","Main wallet primitives, extendable by traits.","Blob gets decoded into <code>Vec&lt;u8&gt;</code>","","Integer gets decoded into <code>u64</code>","","Last type, increment this when you add new types.","","OptionBlob gets decoded into <code>Option&lt;Vec&lt;u8&gt;&gt;</code>","OptionInteger gets decoded into <code>Option&lt;u64&gt;</code>","Types we want to allow to query from the SQL wallet","","Text gets decoded into <code>String</code>","","Structure representing base wallet operations. Additional …","","","","","","","","","","","","","","","","","","","","","","","","","","","","This function executes a given SQL query, but isn’t able …","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Create a new wallet. If <code>path</code> is <code>None</code>, create it in memory.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Export witness.json which can be used by zkrunner for …","ZK gadget implementations","","Proof creation API","Trace computation of intermediate values in circuit","Halo2 zkas virtual machine","VM heap variable definitions and utility functions VM heap …","Call this before <code>Proof::create()</code> to perform type checks on …","Export witness.json which can be used by zkrunner for …","Call this before <code>Proof::create()</code> to perform type checks on …","Base field arithmetic gadget","Conditional selection","is_zero comparison gadget","Field-native less than comparison gadget with a lookup …","Field-native range check gadget with a lookup table","Small range check, 0..8 bits","Conditional selection based on lhs (will output lhs if …","Arithmetic Chip","Configuration for the Arithmetic Chip","Arithmetic instructions implemented in the chip","","","lhs","Add two field elements and return their sum","","","","","","rhs","","","","","out","","","","","Configure the Arithmetic chip with the given columns","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Multiply two field elements and return their product","","","","Selector for the <code>add</code> operation","Selector for the <code>mul</code> operation","Selector for the <code>sub</code> operation","Subtract two field elements and return their difference","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","<code>k_values_table</code> should be reused across different chips …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Checks that an expression is in the small range [0..range),","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An advice column","A value assigned to a cell within a circuit.","An assigned cell.","A column with an index and type","This trait represents an element of a field.","A layout strategy within a circuit. The layouter is …","The one element of the field, the multiplicative identity.","A value stored as a fraction to enable batch inversion.","Represents the type of the “root” of this layouter, so …","A value that does not require inversion to evaluate.","A value that might exist within a circuit.","The zero element of the field, the additive identity.","The field element zero.","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>Value::unknown()</code> if the value is <code>Value::unknown()</code>, …","","","","","","","","","","","Converts from <code>&amp;mut Value&lt;V&gt;</code> to <code>Value&lt;&amp;mut V&gt;</code>.","Converts from <code>&amp;Value&lt;V&gt;</code> to <code>Value&lt;&amp;V&gt;</code>.","Enforces an assertion on the contained value, if known.","Assign a region of gates to an absolute row number.","Assign a table region to an absolute row number.","","","","","","","","","","","","Returns the cell.","","","","","","","","","","","","Maps a <code>Value&lt;&amp;mut V&gt;</code> to a <code>Value&lt;V&gt;</code> by cloning the contents …","Maps a <code>Value&lt;&amp;V&gt;</code> to a <code>Value&lt;V&gt;</code> by cloning the contents of …","","Type of this column.","","","Constrains a <code>Cell</code> to equal an instance column’s row …","Maps a <code>Value&lt;&amp;V&gt;</code> to a <code>Value&lt;V&gt;</code> by copying the contents of …","Maps a <code>Value&lt;&amp;mut V&gt;</code> to a <code>Value&lt;V&gt;</code> by copying the contents …","Copies the value to a given advice cell and constrains …","Cubes this element.","Cubes this field element.","Cubes this element.","","Returns the denominator, if non-trivial.","","","","","","","","","","","","","","","","Tools for developing circuits.","Doubles this element.","Doubles this field element.","Doubles this element.","","","","","","","","","","","","","","","","","","","","","Checks the contained value for an error condition, if …","Evaluates this value directly, performing an unbatched …","Evaluates this assigned cell’s value directly, …","Evaluates this assigned value directly, performing an …","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Takes each element in the <code>Iterator</code>: if it is …","","","Gets the “root” of this assignment, bypassing the …","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the field element corresponding to this value.","Computes the multiplicative inverse of this element, …","Inverts this assigned value (taking the inverse of zero to …","Inverts this assigned value (taking the inverse of zero to …","Returns true iff this element is zero.","Returns true iff this element is zero.","Returns true iff this element is zero.","Constructs a known value.","","","","","","Maps a <code>Value&lt;V&gt;</code> to <code>Value&lt;W&gt;</code> by applying a function to the …","","","","","","","","","","","","","","","","","Enters into a namespace.","","","","Returns the numerator.","","This module provides an implementation of a variant of …","","","","","","Exits out of the existing namespace.","Exponentiates <code>self</code> by <code>exp</code>, where <code>exp</code> is a little-endian …","Exponentiates <code>self</code> by <code>exp</code>, where <code>exp</code> is a little-endian …","Creates a new (sub)namespace and enters into it.","Returns an element chosen uniformly at random using a …","Returns the square root of the field element, if it is …","Equivalent to <code>Self::sqrt_ratio(self, one())</code>.","Computes:","Squares this element.","Squares this field element.","Squares this element.","","","","","","","","","","","","","","","","","","","Returns the field element corresponding to this value.","","","","","","Transposes a <code>Value&lt;[V; LEN]&gt;</code> into a <code>[Value&lt;V&gt;; LEN]</code>.","Transposes a <code>Value&lt;impl IntoIterator&lt;Item = V&gt;&gt;</code> into a …","","","","","","","","","","","","","","","","","","","","","","","Constructs an unwitnessed value.","Unzips a value containing a tuple of two values.","","","","","","","","","","","","","","","","","","","Returns the value of the <code>AssignedCell</code>.","","Returns the field element value of the <code>AssignedCell</code>.","","","","","","Zips <code>self</code> with another <code>Value</code>.","A cell used in an active gate was not assigned to.","Measures a circuit to determine its costs, and explain …","A struct for collecting and displaying the gates within a …","A constraint was not satisfied for a particular row.","A constraint was active on an unusable row, and is likely …","The location within the circuit at which a particular …","A location inside a region.","An instance cell used in an active gate was not assigned …","A lookup input did not exist in its corresponding table.","A test prover for debugging circuits.","A location outside of a region.","A permutation did not preserve the original value of a …","A helper type that augments a <code>FloorPlanner</code> with <code>tracing</code> …","The reasons why a particular circuit is not satisfied.","","","","","","","","","","","","","","","","","","Panics if the circuit being checked by this <code>MockProver</code> is …","","","","","","","","","","","","","","","Collects the gates from within the circuit.","","Developer tools for investigating the cost of a circuit.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the marginal proof size per instance of this …","","","","","Measures a circuit with parameter constant <code>k</code>.","Metadata about circuits.","","","","","","","","","","","","","","","","Returns the proof size for the given number of instances …","","Prints the queries in this circuit to a CSV grid.","","","Runs a synthetic keygen-and-prove operation on the given …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>Ok(())</code> if this <code>MockProver</code> is satisfied, or a list …","","","","","","","The offset (relative to the start of the region) at which …","The region in which the failure occurred.","The circuit row on which the failure occurred.","The values of the virtual cells used by this constraint.","The column in which this cell should be assigned.","The column in which this cell should be assigned.","The column in which this permutation is not satisfied.","The polynomial constraint that is not satisfied.","The polynomial constraint that is not satisfied.","The index of the active gate.","The index of the active gate.","The offset (relative to the start of the region) at which …","The offset (relative to the start of the region) at which …","The location at which this constraint is not satisfied.","The location at which the lookup is not satisfied.","The location at which the permutation is not satisfied.","The index of the lookup that is not satisfied. These …","The offset (relative to the start of the region) at which …","The region in which this cell should be assigned.","The region in which this gate was activated.","The absolute row at which this cell should be assigned.","Measures a circuit to determine its costs, and explain …","The marginal size of a Halo 2 proof, broken down into its …","The size of a Halo 2 proof, broken down into its …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Metadata about a column within a circuit.","Metadata about a configured constraint within a circuit.","Metadata about a configured gate within a circuit.","Metadata about an assigned region within a circuit.","A “virtual cell” is a PLONK cell that has been queried …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An advice column","An Advice variant","This is an advice (witness) column queried at a certain …","Query of advice column at a certain relative location","An enum over the Advice, Fixed, Instance structs","A value assigned to a cell within a circuit.","This trait allows a <code>Circuit</code> to direct some backend to …","A verifier that checks multiple proofs in a batch. <strong>This </strong>…","Out of bounds index passed to a backend","This is a trait that circuits provide implementations for …","A column with an index and type","A <code>TableColumn</code> has not been assigned.","The instance sets up a copy constraint involving a column …","A column type","This is a configuration object that stores things like …","This is a constant polynomial","An individual polynomial constraint.","This is a description of the circuit environment, such as …","The constraint system is not satisfied.","A set of polynomial constraints with a common selector.","This is an error that could occur during proving or …","Low-degree expression representing an identity that must …","A fixed column","A Fixed variant","This is a fixed column queried at a certain relative …","Query of fixed column at a certain relative location","A floor planning strategy for a circuit.","The floor planner used for this circuit. This is an …","An instance column","An Instance variant","This is an instance (external) column queried at a certain …","Query of instance column at a certain relative location","Instance provided exceeds number of available rows","The provided instances do not match the circuit parameters.","This is a negated polynomial","Circuit synthesis requires global constants, but circuit …","<code>k</code> is too small for the given circuit.","Opening error","The output type of this verification strategy after …","Attempt to overwrite a default value","Optional circuit configuration parameters. Requires the …","Represents the minimal parameters that determine a …","Minimal representation of a verification key that can be …","This is the product of two polynomials","This is a proving key which allows for the creation of …","A value stored as a fraction to enable batch inversion.","This is a scaled polynomial","A selector, representing a fixed boolean value per row of …","This is a virtual selector","A verifier that checks a single proof at a time.","This is the sum of two polynomials","This is an error that can occur during synthesis of the …","A fixed column of a lookup table.","This is an error that could occur during table synthesis.","An error relating to a lookup table.","Transcript error","A value that does not require inversion to evaluate.","A Table has columns of uneven lengths.","Attempt to assign a used <code>TableColumn</code>","Trait representing a strategy for verifying Halo 2 proofs.","This is a verifying key which allows for the verification …","Exposes the “virtual cells” that can be queried while …","The field element zero.","","","","","","","","","","","","","","Adds a proof to the batch.","Allocate a new advice column","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Assign an advice column value (witness)","Assign a fixed value","","Compute the number of blinding factors necessary to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Allocate a new complex selector that can appear anywhere …","The circuit is given an opportunity to describe the exact …","The circuit is given an opportunity to describe the exact …","","","","Assign two cells to have the same value","Creates a new gate.","This creates a proof for the provided <code>circuit</code> when given …","","","","","","Compute the degree of this polynomial","Compute the degree of the constraint system (the maximum …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Enable this selector at the given offset within the given …","Enables this fixed column to be used for global constant …","Enable equality on this TableColumn.","Enable the ability to enforce equality over cells in this …","Enables a selector at the given row.","Creates a new region and enters into it.","","","","","","","","","","","","","","","","","","","","","","","","","","Evaluate the polynomial using the provided closures to …","Exits the current region.","Fills a fixed <code>column</code> starting from the given <code>row</code> with …","Finalizes the batch and checks its validity.","Allocate a new fixed column","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Reads a verification key from a slice of bytes using …","Reads a proving key from a slice of bytes using <code>Self::read</code>.","","","Get the underlying <code>EvaluationDomain</code>.","","","","","","Get the underlying <code>VerifyingKey</code>.","","","","","","Hashes a verification key into a transcript.","","","","","","","","","","","","","","","","","","","","","","","","","","","Allocate a new instance column","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Is this selector “simple”? Simple selectors can only …","","Generate a <code>ProvingKey</code> from a <code>VerifyingKey</code> and an instance …","Generate a <code>VerifyingKey</code> from an instance of <code>Circuit</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Add a lookup argument for some input expressions and table …","Allocates a new fixed column that can be used in a lookup …","","","","","","Returns the minimum necessary rows that need to exist in …","","","","","","Constructs a new batch verifier.","Constructs a new single proof verifier.","","","","","","","","","","Returns a reference to the parameters that should be used …","","","","","","","","Obtain a pinned version of this constraint system; a …","Obtains a pinned representation of this verification key …","","","","","","","","","","","","","","","","","","","","","","","Exits out of the existing namespace.","Obtains an MSM from the verifier strategy and yields back …","","Creates a new (sub)namespace and enters into it.","","","Query an advice column at a relative position","Query an Any column at a relative position","Query a fixed column at a relative position","Queries the cell of an instance column at a particular …","Query an instance column at a relative position","Query a selector at the current position.","Reads a verification key from a buffer.","Reads a proving key from a buffer. Does so by reading …","","","","","Allocate a new (simple) selector. Simple selectors cannot …","","","","Sets the minimum degree required by the circuit, which can …","","Square this expression.","","Given the provided <code>cs</code>, synthesize the given circuit.","Given the provided <code>cs</code>, synthesize the circuit. The …","Writes a verifying key to a vector of bytes using …","Writes a proving key to a vector of bytes using <code>Self::write</code>…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a boolean indicating whether or not the proof is …","","","","","","","","","","","","","","","","","","","","","","","Constructs a set of constraints that are controlled by the …","Returns a copy of this circuit with no witness values …","Writes a verifying key to a buffer.","Writes a proving key to a buffer.","The current value of <code>k</code> being used.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Base field arithmetic chip","Boolean check","Conditional selection","ECC Chip","","253 bit <code>a &lt; b</code> check","Merkle tree chip (using Sinsemilla)","253 bit native range check","64 bit native range check","Poseidon hash chip","Sinsemilla chip","Available chips/gadgets in the zkvm","zkvm configuration","","Zero-Cond selection","","Configuration parameters for the circuit. Defines which …","","","","","","","","","","","","","","","","","","","","","","Chips used in the circuit","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Instance column used for public inputs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Advice column used to witness values","","","","","","","","","","","","","These represent the witness types inside the circuit","","","","","","","","","","","These represent the witness types outside of the circuit","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Helper function for verifiers to generate empty witnesses …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Analyzer module","Language AST","Compiler module","Constants","Decoder module","Error emitter","Lexer module","Language opcodes","Parser module","Language types","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Version of the binary","","Magic bytes prepended to the binary","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Allowed fields for proofs","Maximum allowed k param (circuit rows = 2^k)","Maximum allowed namespace length in bytes","Minimum size allowed for a syntactically valid ZkBinary …","A ZkBinary decoded from compiled zkas code. This is used …","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Base field element addition","Base field element multiplication","Base field element subtraction","Check if a field element fits in a boolean (Either 0 or 1)","Conditionally select between two base field elements given …","Constrain equality of two Base field elements inside the …","Constrain equality of two EcPoint elements inside the …","Constrain a Base field element to a circuit’s public …","Debug a variable’s value in the ZK circuit table.","Elliptic curve addition","Get the x coordinate of an elliptic curve point","Get the y coordinate of an elliptic curve point","Elliptic curve multiplication","Elliptic curve multiplication with a Base field element","Elliptic curve multiplication with a Base field element of …","Variable Elliptic curve multiplication with a Base field …","Loosely two Base field elements and see if a is less than b","Strictly compare two Base field elements and see if a is …","Calculate Merkle root, given a position, Merkle path, and …","Intermediate opcode for the compiler, should never appear …","Opcodes supported by the zkas VM","Poseidon hash of N Base field elements","Range check a Base field element, given bit-width (up to …","Witness an unsigned integer into a Base field element","Conditionally select between a and b (return a if a is …","","Return a tuple of vectors of types that are accepted by a …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","zkas language builtin keywords. These can not be used …","Forbidden namespaces","","","","","Valid EcFixedPoint constant names supported by the VM.","Valid EcFixedPointBase constant names supported by the VM.","Valid EcFixedPointShort constant names supported by the VM.","","","","","","","","","","Routine checks on section structure","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Catch-all for any type","Base field element","Base field element array","Dummy intermediate type","Dummy intermediate type","Elliptic curve fixed point (a constant)","Elliptic curve fixed point in base field","Elliptic curve fixed point short","Elliptic curve nonidentity point","Elliptic curve point","Heap types in bincode &amp; vm","","Literal types supported by the zkas VM","A Merkle tree path","Scalar field element","Scalar field element array","Unsigned 32-bit integer","Unsigned 64-bit integer","Unsigned 64-bit integer","","Varable types supported by the zkas VM","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,3,7,7,53,17,3,7,3,7,7,0,3,7,3,7,3,7,3,7,3,7,7,0,3,7,3,7,3,7,3,7,3,7,3,7,3,7,3,7,7,7,3,7,7,3,7,7,7,7,3,7,7,7,0,3,7,3,7,3,7,3,7,3,7,3,7,3,7,3,7,3,7,7,3,7,7,3,7,3,7,3,0,0,7,7,53,17,3,7,53,17,7,3,7,0,3,7,7,3,7,3,7,3,7,0,7,3,7,3,7,3,7,3,7,3,7,3,7,0,0,0,0,0,0,0,0,0,0,0,0,0,19,4,32,33,34,4,4,50,51,52,19,4,32,37,33,38,34,50,51,52,19,4,32,37,33,38,34,37,50,51,52,19,4,32,37,33,38,34,50,51,52,19,4,32,37,33,38,34,19,4,32,33,34,19,4,32,33,34,32,33,38,19,4,37,38,19,4,37,4,50,51,52,19,4,32,37,33,38,34,50,51,52,19,4,32,37,33,38,34,50,51,52,19,4,32,37,33,38,34,38,50,51,52,19,4,32,37,33,38,34,19,4,37,38,19,4,37,19,4,37,38,50,51,52,19,4,4,32,37,33,38,34,19,4,50,51,32,33,34,33,32,33,34,33,51,33,34,19,4,19,4,38,50,51,52,19,4,32,37,33,38,34,50,51,52,32,33,34,32,33,34,50,51,52,19,4,32,37,33,38,34,50,51,52,19,4,32,37,33,38,34,50,51,52,19,4,32,37,33,38,34,50,51,52,19,4,32,37,33,38,34,51,33,50,51,52,19,4,32,37,33,38,34,33,50,51,52,19,4,32,33,38,34,4,37,50,51,52,19,4,32,37,33,38,34,4,19,4,4,38,19,4,32,33,34,50,51,52,19,4,32,37,33,38,34,50,51,52,19,4,32,37,33,38,34,19,4,50,51,52,19,4,32,37,33,38,34,50,51,52,19,4,32,37,33,38,34,50,51,52,19,4,32,37,33,38,34,50,51,52,19,4,32,37,33,38,34,50,51,52,19,4,32,37,33,38,34,0,0,0,0,0,0,0,58,59,60,63,58,59,60,63,58,59,60,63,58,59,60,63,58,59,58,59,58,59,60,63,58,59,60,63,58,59,60,63,58,59,60,63,58,59,60,63,58,59,60,58,63,59,60,63,63,58,59,60,60,63,58,59,60,63,58,59,60,63,58,59,60,63,58,59,60,63,58,59,63,59,60,63,58,59,60,63,58,59,59,58,59,60,63,58,59,60,63,58,59,60,63,58,59,60,63,58,59,60,63,58,59,60,63,58,59,60,63,58,59,0,0,0,0,55,68,69,55,68,69,55,68,69,55,68,69,55,68,55,68,55,68,68,55,55,55,69,55,68,69,55,68,69,55,68,69,55,68,55,55,55,55,55,55,55,55,55,69,55,68,69,68,68,55,55,69,55,68,69,68,68,69,55,68,69,55,68,69,55,68,69,55,68,69,55,68,69,55,68,55,69,55,68,55,55,55,68,55,69,55,68,69,55,68,69,55,68,69,55,68,69,55,68,69,55,68,55,69,55,68,0,0,0,0,0,0,72,73,74,75,72,73,74,75,72,73,74,75,72,73,74,75,72,73,72,73,72,73,72,73,74,75,72,73,74,75,72,73,74,75,72,73,74,75,72,73,74,75,72,73,74,75,72,73,72,72,73,74,74,72,74,75,72,73,74,75,72,73,72,73,74,75,72,73,74,75,72,73,74,75,72,73,74,75,72,73,72,74,75,72,73,72,74,75,72,73,74,75,72,73,72,73,74,75,72,73,74,75,72,73,74,75,72,73,74,75,72,73,74,75,72,73,74,75,72,73,74,75,72,73,0,0,0,0,0,0,0,76,77,78,79,76,77,78,79,76,77,78,79,76,77,78,79,76,77,78,76,77,78,76,77,78,76,77,79,76,77,78,79,76,77,78,79,76,77,78,79,76,77,78,79,76,77,78,79,76,77,76,77,78,79,76,77,78,79,76,77,78,76,77,78,79,76,77,78,79,76,77,78,79,76,77,78,79,76,77,78,76,79,76,77,78,76,79,76,77,78,79,76,77,78,77,78,77,78,76,77,78,79,76,77,78,79,76,77,78,79,76,77,78,79,76,77,78,79,76,77,78,79,76,77,78,79,76,77,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,81,82,84,85,83,81,86,82,84,85,83,81,86,82,84,85,86,85,81,82,84,83,81,86,82,84,85,83,81,86,82,84,85,83,81,82,84,85,83,81,82,84,85,83,81,86,82,84,85,83,81,86,82,84,85,83,82,83,81,86,82,84,85,83,81,86,82,84,85,83,81,86,82,84,85,83,81,86,82,84,85,83,81,86,82,84,85,83,81,86,82,84,85,83,83,85,83,83,83,83,83,81,86,82,84,85,85,83,81,81,86,82,82,84,85,81,83,85,81,82,85,83,83,81,86,82,84,85,83,81,86,82,84,85,83,81,86,82,84,85,83,81,86,82,84,85,83,81,86,82,84,85,83,81,86,82,84,85,81,82,81,82,83,81,82,85,83,81,86,82,84,85,83,83,83,86,83,83,81,82,84,85,85,83,81,86,82,84,85,83,81,86,82,84,85,81,82,83,81,86,82,84,85,83,81,86,82,84,85,83,81,86,82,84,85,83,81,86,82,84,85,83,83,81,86,82,84,85,0,0,0,92,92,92,92,92,92,0,92,90,92,90,92,90,92,90,92,90,92,90,92,90,92,90,90,90,90,90,92,90,90,90,90,92,90,92,90,92,90,92,90,92,90,92,90,90,90,92,90,90,90,90,90,90,90,90,90,90,90,90,92,90,92,90,92,90,92,90,92,90,92,90,92,90,547,548,549,547,548,549,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,93,94,95,96,97,98,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,93,94,95,96,97,98,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,93,94,95,96,97,98,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,93,94,95,96,97,98,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,93,94,95,96,97,98,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,93,93,94,94,95,95,96,96,97,97,98,98,99,99,100,100,101,101,103,103,104,104,105,105,106,106,107,107,108,108,109,109,110,110,111,111,112,112,113,113,114,114,115,115,116,116,117,117,118,118,119,119,93,94,95,96,97,98,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,93,94,95,96,97,98,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,93,94,95,96,97,98,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,93,94,95,96,97,98,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,93,94,95,96,97,98,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,93,94,95,96,97,98,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,93,94,95,96,97,98,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,93,94,95,96,97,98,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,93,94,95,96,97,98,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,93,94,95,96,97,98,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,93,94,95,96,97,98,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,93,94,95,96,97,98,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,93,94,95,96,97,98,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,93,94,95,96,97,98,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,93,94,95,96,97,98,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,93,94,95,96,97,98,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,93,94,95,96,97,98,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,93,94,95,96,97,98,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,0,0,0,0,0,0,0,0,0,0,0,0,120,128,120,128,120,128,120,128,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,128,120,128,120,120,120,120,128,120,128,120,120,120,120,120,120,128,120,128,120,128,120,128,120,128,120,128,120,128,120,120,128,120,128,128,120,120,120,128,120,120,128,120,120,120,128,120,128,120,128,120,128,120,128,120,128,120,120,120,120,128,120,0,0,88,129,88,129,88,129,88,129,88,129,88,129,88,129,88,88,88,129,88,129,88,129,88,129,88,129,88,129,88,129,88,129,88,129,88,129,88,88,88,88,129,129,129,129,88,129,88,129,129,88,129,88,129,88,129,88,129,88,129,88,129,88,88,88,129,88,129,88,88,88,88,129,88,129,88,129,88,129,88,129,88,129,88,129,129,88,129,0,0,0,0,137,137,138,131,139,137,131,139,137,138,131,139,137,131,0,0,0,0,137,138,137,137,131,139,137,138,138,139,0,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,0,0,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,0,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,0,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,0,0,0,0,0,125,140,125,140,125,140,125,140,125,140,140,125,140,125,140,125,140,125,140,140,125,140,125,140,125,140,125,140,125,140,125,140,125,140,125,140,125,125,125,125,140,140,140,140,125,140,125,140,125,140,125,140,125,140,125,140,125,140,125,140,125,125,140,125,125,140,125,140,125,140,125,140,125,140,125,140,125,140,125,125,140,0,0,0,0,0,0,0,0,0,0,0,144,145,146,147,148,142,149,141,150,141,143,144,145,151,146,147,148,142,149,141,150,143,144,145,151,146,147,148,142,149,141,150,143,143,145,146,143,143,144,145,151,146,147,148,142,149,141,150,143,144,145,151,146,147,148,142,149,141,150,143,141,141,143,144,145,146,147,148,142,149,141,150,144,145,146,147,148,142,149,141,150,143,142,143,142,143,145,144,145,151,146,147,148,149,150,144,145,151,146,147,148,149,150,143,144,145,151,146,147,148,142,149,141,150,143,144,145,151,146,147,148,142,149,141,150,143,144,145,151,146,147,148,142,149,141,150,143,143,144,145,151,146,147,148,142,149,141,150,144,145,151,146,147,148,149,150,144,145,151,146,147,148,149,150,143,143,143,145,143,143,145,143,144,145,151,146,147,148,142,149,141,150,143,143,145,143,144,145,151,146,147,148,142,142,149,149,141,141,150,150,143,143,141,150,143,143,143,144,145,151,146,147,148,142,149,141,150,143,143,143,144,145,151,146,147,148,142,149,141,150,143,144,145,151,146,147,148,142,149,141,150,143,144,145,151,146,147,148,142,149,141,150,143,144,145,151,146,147,148,142,149,141,150,146,143,143,143,144,145,151,146,147,148,142,149,141,150,143,143,143,142,141,143,145,142,149,143,145,143,144,145,151,146,147,148,142,149,141,150,143,142,149,143,143,146,143,143,141,150,143,143,143,147,143,143,145,148,143,143,144,145,146,147,148,142,149,141,150,143,143,144,145,151,146,147,148,142,149,141,150,143,144,145,151,146,147,148,142,149,141,150,143,144,145,151,146,147,148,142,149,141,150,143,144,145,151,146,147,148,142,149,141,150,143,144,145,151,146,147,148,142,149,141,150,143,144,145,151,146,147,148,142,149,141,150,143,143,144,145,151,146,147,148,142,149,141,150,143,143,0,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,0,0,0,0,0,0,0,0,0,0,0,0,0,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,0,0,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,0,0,0,0,0,133,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,133,158,158,133,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,0,0,0,550,160,160,160,161,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,0,160,0,160,160,160,160,160,160,160,163,160,160,160,160,160,160,160,160,160,160,160,160,160,6,551,161,160,0,160,160,160,160,160,160,160,160,160,160,160,162,160,162,162,160,160,160,163,160,160,160,161,162,161,160,162,163,160,160,160,160,160,160,160,161,160,161,161,160,160,160,160,160,160,162,160,6,551,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,0,160,160,0,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,0,160,160,160,160,160,160,160,160,160,160,160,162,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,161,162,163,160,161,162,163,160,161,162,163,160,161,162,163,160,161,162,163,160,161,162,163,160,161,162,163,160,161,162,163,160,161,162,163,160,161,162,163,160,161,162,163,160,161,162,163,160,160,161,161,162,162,163,163,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,161,162,162,162,163,163,160,161,162,163,160,161,162,163,160,161,162,163,160,161,162,163,160,161,162,163,160,161,162,163,160,161,162,163,160,160,160,161,162,163,160,161,162,163,160,161,162,163,160,161,162,163,160,161,162,163,160,161,162,163,160,161,162,163,160,161,162,163,160,161,162,163,0,0,0,0,0,0,0,0,199,203,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,0,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,203,199,0,199,203,199,199,199,199,199,199,199,199,0,199,0,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,0,0,0,0,0,0,0,0,204,205,206,207,208,209,209,204,205,206,207,208,209,204,205,206,207,208,209,204,205,206,207,208,209,204,205,206,207,208,209,204,205,206,207,208,204,205,206,207,208,204,205,206,207,208,204,205,206,207,208,209,204,205,206,207,208,209,204,205,206,207,208,209,204,205,206,207,208,209,204,205,206,207,208,204,205,206,207,208,204,205,206,207,208,209,209,209,209,209,204,205,206,207,208,209,209,209,209,209,204,205,206,207,208,209,204,205,206,207,208,209,204,205,206,207,208,209,204,205,206,207,208,209,204,205,206,207,208,209,209,204,205,206,207,208,209,209,209,204,205,206,207,208,209,209,204,205,206,207,208,209,204,205,206,207,208,209,204,205,206,207,208,209,204,205,206,207,208,209,204,205,206,207,208,209,204,205,206,207,208,209,204,205,206,207,208,209,204,205,206,207,208,0,0,0,0,0,0,0,0,0,210,211,210,211,210,211,210,211,210,211,210,210,211,210,211,210,211,210,211,210,211,211,210,211,211,211,211,210,211,211,211,211,210,211,210,211,210,211,210,210,210,211,210,211,210,211,210,211,210,211,210,211,210,211,210,211,210,211,210,211,210,211,210,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,215,218,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,218,215,218,215,215,215,215,215,215,215,215,215,215,215,215,215,0,0,0,221,221,220,132,220,221,220,221,220,221,220,221,221,221,221,221,220,221,220,221,220,221,220,221,221,221,220,221,220,221,220,221,220,220,221,220,221,220,221,220,221,220,221,220,220,220,221,220,220,220,220,221,220,132,220,221,132,220,220,220,220,220,220,220,220,220,220,220,220,220,220,221,220,221,220,221,220,221,220,221,220,221,220,221,220,221,220,0,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,0,0,237,0,237,0,0,0,237,0,237,0,237,0,237,0,237,0,237,0,237,230,231,232,233,234,235,236,237,552,553,231,233,234,230,231,232,233,234,235,236,237,230,231,232,233,234,235,236,237,236,230,231,232,233,234,235,236,237,230,231,232,233,234,235,236,237,554,555,230,552,553,231,234,230,231,232,233,234,235,236,237,230,231,232,233,234,235,236,237,554,555,230,230,231,232,233,234,235,236,237,230,231,232,233,234,235,236,237,230,231,232,233,234,235,236,237,0,230,231,232,233,234,235,236,237,235,230,231,232,233,234,235,236,237,230,231,232,233,234,235,236,237,230,231,232,233,234,235,236,237,230,231,232,233,234,235,236,237,230,231,232,233,234,235,236,237,230,231,232,233,234,235,236,237,230,231,232,233,234,235,236,237,230,231,232,233,234,235,236,237,230,231,232,233,234,235,236,237,232,233,234,235,236,554,555,230,230,231,232,233,234,235,236,237,230,231,232,233,234,235,236,237,230,231,232,233,234,235,236,237,230,231,232,233,234,235,236,237,230,231,232,233,234,235,236,237,230,231,232,233,234,235,236,237,230,231,232,233,234,235,236,237,230,231,232,233,234,235,236,237,0,0,0,238,240,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,240,238,240,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,0,0,0,0,224,0,0,0,0,0,241,242,243,244,245,246,244,246,241,242,243,244,245,246,247,241,242,243,244,245,246,247,241,242,243,244,245,246,247,241,242,243,244,245,246,247,241,242,243,244,245,246,241,242,243,244,245,246,247,241,242,243,244,245,246,247,241,242,243,244,245,246,247,241,242,243,244,245,246,247,241,242,243,244,245,246,247,241,242,243,244,245,246,247,241,242,243,244,245,246,247,241,242,243,244,245,246,247,241,242,243,244,245,246,247,241,242,243,244,245,246,247,241,242,243,244,245,246,247,241,242,243,244,245,246,247,241,242,243,244,245,246,247,241,242,243,244,245,246,247,241,242,243,244,245,246,247,241,242,243,244,245,246,247,241,242,243,244,245,246,247,243,245,241,242,247,241,242,243,244,245,246,247,0,0,241,242,243,244,245,246,243,241,242,243,244,245,246,247,241,242,243,244,245,246,247,241,242,243,244,245,246,247,241,242,243,244,245,246,247,241,242,243,244,245,246,247,241,242,243,244,245,246,247,241,242,243,244,245,246,247,556,0,0,0,0,0,0,556,249,222,557,249,249,227,222,249,227,222,249,227,222,249,227,222,222,249,227,222,249,227,222,249,227,222,222,249,227,222,249,227,249,227,222,227,249,227,222,249,227,222,249,227,222,249,227,222,249,227,222,249,227,222,249,222,222,227,249,227,222,249,227,227,249,249,222,557,249,557,249,222,249,227,222,249,227,222,249,227,222,249,227,249,227,222,249,227,222,249,227,222,249,227,222,0,0,0,0,252,134,252,252,252,252,252,252,252,252,252,252,558,559,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,558,559,252,252,252,134,252,252,252,134,252,252,252,252,252,252,252,252,252,252,252,252,252,558,559,252,252,252,252,252,252,252,252,252,0,0,0,0,0,0,0,0,0,0,0,0,0,0,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,0,0,135,560,135,135,560,0,0,261,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,261,260,261,260,260,260,260,260,260,260,260,260,260,0,0,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,266,266,266,266,266,266,266,266,266,266,266,266,266,266,266,266,266,266,266,266,266,266,266,266,266,266,266,266,266,266,266,0,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,217,0,0,0,225,225,217,225,0,0,225,0,0,268,268,256,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,256,268,256,268,268,268,268,268,268,268,268,268,268,268,268,0,0,257,269,269,269,269,269,269,269,269,269,269,269,269,269,269,269,269,269,269,269,269,269,269,257,269,257,269,269,269,269,269,269,269,269,269,0,0,0,0,258,271,270,273,271,270,273,271,270,273,271,270,273,270,271,271,270,273,271,270,273,271,270,273,271,270,273,270,271,270,273,271,270,273,271,270,273,271,270,273,271,270,273,271,270,273,271,270,273,271,270,273,270,273,271,270,273,271,271,258,271,270,273,270,273,258,270,273,270,273,270,273,270,270,271,271,271,270,273,271,270,273,270,271,270,273,271,270,273,271,271,270,273,271,270,273,271,270,273,271,270,273,271,270,273,273,271,270,273,271,0,0,274,275,275,275,275,275,275,275,275,275,275,275,275,275,275,275,275,275,275,274,275,274,275,275,275,275,275,275,275,275,275,275,0,0,0,254,277,229,254,277,254,254,277,254,277,254,277,254,277,254,277,254,277,277,254,277,254,277,254,277,254,277,254,277,254,277,277,254,277,254,277,254,277,254,254,277,277,254,277,277,254,254,277,254,277,254,277,254,277,254,277,254,277,254,277,254,277,254,277,277,254,277,254,277,254,277,254,277,254,277,254,277,229,254,277,229,254,277,254,277,254,277,254,277,254,277,254,277,254,277,254,277,254,277,254,277,0,0,0,0,280,280,0,0,280,281,280,281,280,280,280,281,280,281,282,284,280,281,282,284,280,281,282,284,280,281,282,284,280,281,280,281,280,281,282,284,280,281,282,284,280,281,282,284,280,281,282,282,284,280,281,282,284,282,284,0,0,280,281,282,284,280,281,282,284,280,281,282,284,280,281,282,284,280,281,282,284,280,281,282,284,280,281,282,284,280,281,284,282,284,216,0,282,284,280,281,0,0,280,281,0,282,284,280,281,282,284,280,281,282,284,280,281,0,282,284,280,281,282,284,280,281,282,284,280,281,282,284,282,284,280,281,0,0,286,285,285,286,286,286,285,286,285,286,285,286,285,286,285,286,285,286,285,286,285,286,285,286,285,286,286,286,286,286,286,285,286,285,286,286,286,285,286,285,286,285,286,285,286,285,286,285,285,286,285,286,285,286,285,286,285,286,285,286,285,286,285,286,285,286,285,0,0,290,291,290,291,290,291,291,290,291,290,291,290,291,290,291,290,291,290,291,290,291,290,291,290,291,290,291,290,291,290,291,290,291,290,291,290,291,290,291,290,291,290,291,290,291,290,291,290,291,290,291,290,291,290,290,291,290,291,290,291,290,291,290,291,0,0,0,0,308,298,300,308,298,300,308,298,300,308,298,300,0,298,300,300,308,298,300,308,298,300,308,298,300,308,298,300,308,298,300,308,298,300,308,298,300,308,298,300,308,298,300,308,298,300,308,298,300,300,308,298,300,300,308,298,300,308,298,300,308,298,300,308,298,300,308,298,300,308,298,300,300,300,0,298,308,308,298,300,0,0,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,0,0,314,315,314,315,314,315,314,315,314,315,314,315,314,315,314,315,314,315,314,315,314,315,314,315,314,315,314,315,314,315,314,315,314,315,314,315,314,315,314,315,314,315,314,315,314,315,314,315,314,315,314,315,314,315,314,315,314,315,314,315,0,0,0,0,0,0,0,0,0,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,0,0,0,0,0,0,0,0,0,0,0,322,0,328,328,328,328,328,0,0,0,0,0,0,0,328,322,328,322,322,328,322,322,328,322,320,329,330,331,332,333,328,322,320,329,330,331,332,333,328,322,320,329,330,331,332,333,328,322,320,329,330,331,332,333,328,322,320,329,330,331,332,333,328,322,320,329,330,331,332,333,328,322,320,329,330,331,332,333,328,332,328,322,320,329,330,331,332,333,328,322,320,329,330,331,332,333,328,328,322,320,329,330,331,332,333,328,322,320,329,330,331,332,333,331,328,322,320,329,330,331,332,333,328,322,322,322,322,322,322,320,329,330,331,332,333,320,330,331,328,322,320,329,330,331,332,333,328,322,320,329,330,331,332,333,328,322,320,329,330,331,332,333,328,322,320,329,330,331,332,333,328,322,320,329,330,331,332,333,320,329,330,331,328,322,320,329,330,331,332,333,328,332,320,329,333,320,329,330,331,333,333,320,329,328,322,320,329,330,331,332,333,330,320,329,330,331,333,328,322,320,329,330,331,332,333,328,322,320,320,329,329,330,330,331,331,332,333,322,328,322,320,329,330,331,332,333,328,322,320,329,330,331,332,333,328,322,320,329,330,331,332,333,328,322,320,329,330,331,332,333,328,322,320,329,330,331,332,333,328,322,320,329,330,331,332,333,0,561,561,0,0,335,335,335,335,0,335,335,0,335,335,321,321,0,0,0,0,0,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,0,0,321,321,321,321,321,321,321,321,321,321,321,321,0,0,0,0,0,0,0,345,345,345,345,345,0,0,0,0,0,0,345,345,345,345,345,345,345,345,345,345,345,345,345,345,345,345,345,345,345,345,345,0,0,0,0,0,0,0,0,0,0,0,0,0,0,562,0,347,0,347,0,0,347,347,0,347,347,346,342,346,347,342,346,347,342,342,346,347,342,346,347,346,347,347,342,342,342,342,346,346,342,346,342,346,347,342,346,347,342,346,347,342,346,347,347,346,342,346,347,346,346,342,346,347,346,342,346,347,342,346,347,347,342,346,347,342,346,347,342,342,342,342,346,347,346,342,342,346,347,346,346,346,346,346,346,342,347,342,346,347,342,346,347,342,346,347,347,347,347,342,346,347,0,0,0,0,0,0,0,0,253,0,0,0,0,253,253,0,0,0,0,0,0,0,0,353,563,354,353,563,354,353,563,354,353,563,354,353,353,563,354,353,563,354,353,563,354,353,563,354,353,563,354,353,563,354,353,563,354,353,563,354,353,563,354,353,563,354,354,354,563,353,563,354,353,353,353,563,354,354,353,353,354,353,563,354,353,563,354,353,563,354,353,563,354,353,563,354,353,563,354,353,563,354,353,563,0,357,357,357,357,357,357,357,357,357,357,357,357,357,357,357,357,357,357,357,357,357,357,357,357,357,357,357,0,0,336,358,358,358,358,358,358,358,358,358,358,358,358,358,358,358,358,358,358,358,358,358,358,358,358,336,358,336,358,358,358,358,358,358,358,358,358,358,358,0,0,0,0,325,219,360,219,360,219,360,219,360,219,360,219,360,219,360,219,360,219,360,219,360,219,219,219,360,219,360,219,360,219,360,219,360,219,360,360,360,360,219,325,219,360,325,360,219,219,360,360,219,360,219,360,219,360,219,360,219,360,219,360,219,360,219,360,0,0,0,166,166,363,364,166,363,364,166,166,363,364,166,363,364,166,166,166,364,363,364,166,363,364,166,363,364,166,363,364,166,166,166,166,166,166,363,166,166,363,364,166,363,364,363,364,166,363,364,166,363,364,166,363,364,166,363,364,166,363,363,364,364,0,363,364,166,364,363,364,166,363,364,0,363,166,166,363,364,166,363,364,166,363,364,363,364,166,363,364,166,363,364,166,363,364,166,363,364,166,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0,0,0,0,367,367,367,367,367,367,367,367,367,0,0,0,367,367,0,0,367,367,367,367,367,367,367,367,367,367,367,0,367,367,367,367,367,367,367,367,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,371,371,0,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,0,376,376,376,376,376,376,376,376,376,376,376,376,376,376,376,376,376,376,376,376,376,376,376,376,376,376,376,376,376,376,376,376,376,376,376,376,376,376,376,376,376,376,376,376,376,0,385,0,0,385,385,0,0,385,0,0,0,0,0,351,381,70,382,383,384,70,385,351,381,70,382,383,384,385,351,381,70,382,383,384,351,381,385,351,381,70,382,383,384,385,351,381,70,382,383,384,351,381,70,382,383,384,351,381,70,382,383,384,351,381,351,381,351,381,70,382,383,383,384,70,382,70,382,383,384,385,351,381,70,382,383,384,385,351,381,70,382,383,384,385,351,381,70,382,383,384,385,351,381,70,382,383,384,70,70,382,70,382,351,70,382,70,70,70,70,382,382,382,382,70,70,382,382,383,383,384,384,385,351,381,70,382,383,384,383,351,70,70,383,385,351,381,70,382,383,384,385,351,381,70,382,383,384,385,351,381,70,382,383,384,385,351,381,70,382,383,384,385,351,381,70,382,383,384,385,351,381,70,382,383,384,383,383,384,383,351,381,383,351,381,351,381,70,382,385,351,381,70,382,383,384,351,381,383,351,381,351,351,381,351,381,381,0,351,381,70,382,383,384,70,382,383,384,385,351,381,70,382,383,384,385,351,381,70,382,383,384,385,351,381,70,382,383,384,385,351,381,70,382,383,384,385,351,381,70,382,383,384,385,351,381,70,382,383,384,351,351,381,385,351,381,70,382,383,384,383,384,0,0,0,387,386,386,386,388,386,386,386,387,386,387,386,386,387,386,387,387,387,0,386,386,387,386,387,386,387,386,387,387,386,387,0,386,387,387,387,386,387,386,387,386,387,386,387,386,387,386,387,386,387,388,0,386,387,0,387,387,388,386,386,386,386,387,387,387,386,387,386,387,386,387,386,387,386,387,386,387,0,386,0,0,386,387,0,0,0,0,49,390,389,390,389,49,390,389,49,390,389,49,389,389,49,390,389,49,390,389,49,390,49,390,49,49,389,49,390,389,49,390,389,49,390,389,49,390,49,49,389,389,389,389,49,389,389,49,390,390,389,390,389,390,389,389,390,49,389,49,390,389,49,390,389,49,390,389,49,390,389,49,390,390,389,49,390,390,389,390,389,49,390,390,389,389,49,390,389,390,390,390,390,389,389,49,390,389,49,390,389,49,390,389,49,390,390,389,49,390,389,49,390,389,49,390,389,49,390,0,0,0,0,0,0,0,0,0,0,0,0,392,393,394,395,396,397,398,399,400,401,392,392,392,392,393,394,395,396,397,398,399,400,401,392,393,394,395,396,397,398,399,400,401,0,392,393,394,395,396,397,398,399,400,401,392,393,394,395,396,397,398,399,400,401,392,392,392,393,393,394,394,395,395,396,396,397,397,398,398,399,399,400,400,401,401,392,393,394,395,396,397,398,399,400,401,392,393,394,395,396,397,398,399,400,401,392,392,393,394,395,396,397,398,399,400,401,392,0,0,392,392,392,393,394,395,396,397,398,399,400,401,392,393,394,395,396,397,398,399,400,401,392,393,394,395,396,397,398,399,400,401,392,393,394,395,396,397,398,399,400,401,392,393,394,395,396,397,398,399,400,401,392,393,394,395,396,397,398,399,400,401,392,393,394,395,396,397,398,399,400,401,392,392,392,392,393,394,395,396,397,398,399,400,401,392,392,392,392,392,392,392,392,392,392,392,393,394,395,396,397,398,399,400,401,392,393,394,395,396,397,398,399,400,401,392,393,394,395,396,397,398,399,400,401,392,393,394,395,396,397,398,399,400,401,392,393,394,395,396,397,398,399,400,401,392,393,394,395,396,397,398,399,400,401,392,393,394,395,396,397,398,399,400,401,0,0,0,0,0,0,0,0,0,0,0,402,403,404,405,406,407,408,409,410,411,402,403,404,405,406,407,408,409,410,411,402,403,404,405,406,407,408,409,410,411,402,403,404,405,406,407,408,409,410,411,402,403,404,405,406,407,408,409,410,411,0,0,402,402,403,403,404,404,405,405,406,406,407,407,408,408,409,409,410,410,411,411,402,403,404,405,406,407,408,409,410,411,402,403,404,405,406,407,408,409,410,411,402,403,404,405,406,407,408,409,410,411,402,403,404,405,406,407,408,409,410,411,402,403,404,405,406,407,408,409,410,411,402,403,404,405,406,407,408,409,410,411,402,403,404,405,406,407,408,409,410,411,402,403,404,405,406,407,408,409,410,411,402,403,404,405,406,407,408,409,410,411,402,403,404,405,406,407,408,409,410,411,402,403,404,405,406,407,408,409,410,411,0,402,403,404,405,406,407,408,409,410,411,402,403,404,405,406,407,408,409,410,411,402,403,404,405,406,407,408,409,410,411,402,403,404,405,406,407,408,409,410,411,402,403,404,405,406,407,408,409,410,411,402,403,404,405,406,407,408,409,410,411,402,403,404,405,406,407,408,409,410,411,0,0,0,0,0,0,0,0,0,0,391,391,391,391,391,391,391,391,391,391,391,391,391,391,391,391,391,391,391,391,391,391,391,391,391,391,391,391,391,391,391,391,391,391,391,391,391,391,391,391,391,391,391,391,391,391,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,414,413,414,413,414,413,414,414,0,0,414,413,0,0,153,414,412,413,414,412,413,414,412,413,414,412,413,412,414,412,413,414,412,413,414,412,413,414,412,413,412,413,414,414,412,413,412,414,412,413,413,414,412,413,414,412,413,414,412,413,414,412,413,414,412,413,412,153,414,412,413,153,412,414,412,413,414,412,413,414,412,413,414,412,413,414,412,413,414,412,413,414,412,413,513,0,513,0,0,0,513,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,427,424,427,564,424,424,427,424,427,427,424,427,424,427,427,427,427,424,424,424,424,424,427,424,427,424,427,424,427,427,424,427,424,427,424,427,424,427,424,427,424,427,424,427,424,564,424,424,427,427,427,427,564,424,427,424,427,424,427,424,427,424,427,424,427,424,427,424,427,0,0,0,429,430,429,429,430,429,430,429,430,429,430,429,429,429,430,430,430,430,430,430,429,430,429,430,429,430,429,429,430,429,430,429,430,429,430,429,430,429,430,429,430,429,430,430,429,429,429,430,429,430,429,430,429,430,429,430,429,430,429,430,429,0,0,433,431,433,431,433,431,431,433,431,433,433,433,431,431,431,431,433,431,433,431,433,431,433,433,433,431,433,431,433,431,433,431,433,431,433,431,433,433,431,433,431,433,433,431,433,431,433,431,433,431,433,431,433,431,433,433,431,433,0,0,435,436,435,435,435,436,435,436,435,435,436,435,436,435,436,435,436,436,436,436,436,436,435,436,435,436,435,436,435,436,435,436,435,436,435,436,435,436,435,436,435,436,435,436,435,435,436,436,436,436,435,436,435,435,435,435,435,436,435,436,435,436,435,436,435,436,435,436,435,436,435,436,436,0,0,438,439,438,439,438,439,438,439,438,439,438,439,438,439,439,439,439,439,439,439,439,438,439,438,439,438,439,438,439,438,439,438,439,438,439,438,439,438,439,438,439,438,439,438,438,439,439,439,438,439,438,438,438,439,438,439,438,439,438,439,438,439,438,439,438,439,438,439,439,438,0,0,440,441,441,440,441,440,441,440,441,440,441,440,441,440,441,441,441,441,441,440,441,440,441,440,441,440,441,440,441,440,441,440,441,440,441,440,441,440,441,440,441,440,441,441,440,441,0,440,441,440,441,440,441,440,441,440,441,440,441,440,441,440,441,440,441,440,0,0,443,442,443,443,443,442,443,442,442,443,443,442,443,442,443,442,443,442,442,442,442,443,442,443,442,443,442,443,442,443,442,443,442,443,442,443,442,443,442,443,442,443,442,443,443,442,443,443,442,443,443,442,443,442,443,442,443,442,443,442,443,442,443,442,443,442,0,0,0,0,0,0,419,444,420,444,0,419,444,417,418,444,416,415,418,417,417,417,417,417,417,417,417,417,417,444,444,444,444,444,444,444,444,417,417,418,444,416,415,417,418,444,416,415,417,417,417,420,420,417,418,444,416,415,417,418,444,416,415,418,418,418,417,418,444,416,415,417,418,444,416,415,417,417,416,416,416,416,420,417,417,418,419,417,444,417,444,417,418,444,416,415,417,418,444,416,415,417,418,444,416,415,0,419,417,444,417,418,444,416,415,444,416,415,444,444,444,444,416,416,416,416,415,415,415,415,417,417,418,444,417,418,444,416,415,417,417,418,418,444,444,444,444,444,416,416,416,416,415,417,416,415,420,416,415,416,417,418,444,416,415,417,417,418,444,416,415,417,418,444,416,415,417,418,444,416,415,417,418,444,416,415,417,419,417,444,419,419,444,417,417,418,444,416,415,417,417,417,417,417,417,417,417,417,417,417,444,444,444,444,444,444,420,417,444,444,444,416,0,417,418,444,416,415,420,419,419,420,419,419,419,419,419,417,444,417,417,417,417,417,417,417,417,417,417,444,444,444,444,444,444,444,444,417,417,418,444,416,415,417,417,417,417,417,417,418,418,444,416,416,416,416,415,417,418,444,416,415,417,418,444,416,415,417,417,417,418,444,416,415,417,418,444,416,415,417,418,444,416,415,417,418,418,418,418,418,417,418,444,416,415,417,468,0,0,468,468,0,467,468,468,0,467,468,0,0,469,472,464,469,469,467,468,469,465,472,464,467,468,469,465,472,464,464,464,464,467,468,469,465,472,464,467,468,469,465,472,464,465,464,0,464,464,467,468,469,465,472,464,467,468,469,465,472,464,467,468,469,465,472,464,467,468,469,465,472,464,464,464,467,468,467,467,467,467,468,468,468,468,464,464,464,469,467,467,468,468,469,465,465,472,464,467,468,469,465,472,464,465,467,468,469,465,472,464,464,469,467,468,469,465,472,464,467,468,469,465,472,464,467,468,469,465,472,464,467,468,469,465,472,464,469,464,467,468,469,465,472,464,469,469,469,469,469,469,469,0,464,469,469,469,469,464,469,469,467,468,469,465,472,464,464,469,464,465,464,464,464,464,472,467,468,465,465,465,465,467,468,469,465,472,464,467,468,469,465,472,464,467,468,469,465,472,464,467,468,469,465,472,464,467,468,469,465,472,464,467,468,469,465,472,464,464,464,467,468,469,465,472,464,565,565,566,567,568,569,570,567,571,568,569,568,569,567,572,570,572,568,568,569,569,0,0,0,469,474,475,474,475,469,469,474,475,474,475,474,475,474,475,474,475,474,475,474,475,474,475,474,475,475,469,474,475,474,475,474,475,474,475,474,475,474,475,474,475,474,475,474,475,474,475,469,474,475,474,475,474,475,474,475,469,474,475,469,474,475,469,469,469,469,475,469,469,469,469,469,469,474,475,475,474,475,474,475,474,475,474,475,474,475,474,475,475,474,475,0,0,0,0,0,478,479,478,480,481,482,479,478,480,481,482,479,478,480,481,482,479,478,480,481,482,479,478,479,478,479,478,480,480,478,478,480,478,480,481,482,479,478,480,481,482,479,478,480,481,482,479,478,480,481,482,479,478,480,481,482,479,478,478,478,478,480,480,480,480,481,481,481,481,482,482,482,482,479,479,479,479,478,478,480,480,481,481,482,482,479,479,478,478,478,480,480,480,480,481,481,482,482,479,479,479,482,478,481,482,479,478,480,481,482,479,478,480,481,482,479,478,480,481,482,479,478,480,481,482,479,478,480,481,482,479,478,480,481,482,479,480,481,482,479,478,480,478,480,481,482,479,480,478,479,478,480,481,482,479,478,480,481,482,479,478,480,481,482,479,478,480,481,482,479,478,480,481,482,479,478,480,481,482,479,478,480,481,482,479,478,480,481,482,479,0,453,434,0,0,0,0,0,195,0,0,498,195,0,471,434,0,0,195,0,0,0,0,453,434,0,0,471,0,453,434,0,195,195,434,195,195,195,506,498,471,0,0,434,0,444,434,0,434,0,434,195,0,0,195,195,444,498,498,0,0,0,444,452,449,453,466,486,487,488,437,434,428,489,490,434,484,428,428,496,452,449,453,466,486,487,488,437,434,494,495,428,496,497,195,498,484,499,489,500,490,452,449,453,466,486,487,488,437,434,494,495,428,496,497,195,498,484,499,489,500,490,195,476,476,500,428,452,449,453,466,486,487,488,437,434,494,495,428,496,497,195,498,484,499,489,500,490,452,449,453,466,486,487,488,437,434,494,495,428,496,497,195,498,484,499,489,500,490,452,449,453,466,486,487,488,437,434,428,489,490,452,449,453,466,486,487,488,437,434,428,489,490,453,437,486,487,488,416,453,437,428,471,471,428,496,495,476,428,0,489,500,489,428,484,434,428,452,449,453,466,486,487,488,437,434,494,495,428,496,497,195,498,484,499,489,500,490,452,449,453,466,486,487,488,437,434,494,495,428,496,497,195,498,484,499,489,500,490,452,449,453,466,486,487,488,437,434,494,495,428,496,497,195,498,484,499,489,500,490,489,500,452,449,453,466,486,487,488,437,434,494,495,428,496,497,195,498,484,499,489,500,490,466,428,437,428,476,476,452,449,453,466,437,452,452,452,452,449,449,449,449,453,453,453,453,466,466,466,466,437,437,437,437,434,476,476,484,428,489,500,490,490,428,496,490,452,449,453,466,486,487,488,437,434,494,495,428,496,497,195,195,498,498,484,499,489,500,490,452,449,453,453,453,453,466,486,487,488,437,434,494,494,494,495,428,496,497,195,195,498,484,499,489,500,490,489,490,428,496,489,452,449,453,466,437,490,452,449,453,466,437,489,416,486,487,488,452,449,453,466,486,487,488,437,434,494,495,428,496,497,195,498,484,499,489,500,490,437,428,428,496,452,449,453,466,486,487,488,437,434,494,495,428,496,497,195,498,484,499,489,500,490,452,449,453,466,486,487,488,437,434,494,495,428,496,497,195,498,484,499,489,500,490,452,449,453,466,486,487,488,437,434,494,495,428,496,497,195,498,484,499,489,500,490,452,449,453,466,486,487,488,437,434,494,495,428,496,497,195,498,484,499,489,500,490,495,466,484,0,0,490,490,490,452,449,453,466,486,487,488,437,434,494,495,428,496,497,195,498,484,499,489,500,490,428,428,428,496,497,428,496,428,499,434,434,494,434,484,499,428,496,428,428,496,428,496,428,496,471,453,437,428,496,489,500,490,428,489,452,449,453,466,486,487,488,437,434,494,495,428,496,497,195,498,484,499,489,500,490,494,476,506,499,476,497,497,497,497,497,476,497,497,489,490,486,487,488,500,428,495,428,489,428,195,434,434,473,471,489,490,452,449,453,466,486,487,488,437,434,428,489,490,195,498,489,452,449,453,466,486,487,488,437,434,494,495,428,496,497,195,498,484,499,489,500,490,452,449,453,466,486,487,488,437,434,494,495,428,496,497,195,498,484,499,489,500,490,452,449,453,466,486,487,488,437,434,494,495,428,496,497,195,498,484,499,489,500,490,452,449,453,466,486,487,488,437,434,494,495,428,496,497,195,498,484,499,489,500,490,452,449,453,466,486,487,488,437,434,494,495,428,496,497,195,498,484,499,489,500,490,452,449,453,466,486,487,488,437,434,494,495,428,496,497,195,498,484,499,489,500,490,0,490,452,449,453,466,486,487,488,437,434,494,495,428,496,497,195,498,484,499,489,500,490,495,471,489,490,573,0,0,0,66,123,124,66,123,124,66,123,124,124,124,66,123,124,66,123,124,66,123,66,123,124,66,123,124,124,124,124,124,66,123,124,66,123,124,66,123,124,66,123,124,124,124,124,124,124,124,124,124,124,66,123,124,66,123,124,66,123,124,66,123,124,66,123,124,66,123,124,66,123,124,66,123,124,124,66,123,123,66,123,124,66,123,66,123,124,124,66,123,124,66,123,124,66,123,124,66,123,124,66,123,124,66,123,124,124,66,66,123,124,66,123,513,0,513,513,0,513,512,513,512,513,512,512,513,512,513,512,512,513,512,513,512,513,512,513,512,513,512,513,512,513,513,512,513,512,512,512,513,512,513,512,513,513,512,512,513,512,512,512,513,512,512,512,512,512,513,512,513,512,513,512,513,512,513,513,513,513,512,519,519,519,519,0,519,519,519,519,519,519,0,0,0,519,0,0,519,518,423,518,519,518,520,423,519,518,520,423,518,519,518,520,423,519,518,520,423,518,519,518,423,519,518,423,518,423,423,423,520,519,518,520,423,519,518,520,423,519,518,520,423,519,518,520,423,518,423,519,519,518,520,423,519,518,520,423,520,520,520,520,520,520,520,520,520,519,518,520,423,519,518,520,423,519,518,520,519,518,520,423,519,518,520,423,518,423,518,518,423,423,423,519,518,520,423,518,518,518,518,423,519,518,423,423,519,518,520,423,519,518,520,423,519,518,520,423,519,518,520,519,518,520,519,518,520,519,518,520,423,423,518,423,518,422,463,422,463,463,463,422,463,422,463,0,0,422,463,422,463,422,463,574,422,463,0,422,463,574,422,463,574,422,463,574,422,463,574,422,463,422,463,422,463,574,422,463,574,422,463,574,422,463,574,422,463,0,463,574,422,463,0,574,422,463,574,422,463,574,422,463,574,422,463,574,422,463,574,422,463,422,574,422,463,422,463,574,422,463,574,422,463,574,422,463,574,422,463,574,422,463,574,422,463,574,422,463,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,525,525,525,525,525,525,525,525,525,525,525,525,525,525,525,525,525,525,525,525,525,525,525,525,525,525,525,525,525,525,525,525,525,525,525,525,525,0,534,534,0,528,533,533,0,534,0,0,0,533,0,528,0,528,526,529,527,532,533,534,531,526,529,527,532,528,533,534,531,526,529,527,532,528,533,534,531,526,529,527,532,528,533,534,531,526,529,527,532,528,533,534,531,526,529,527,532,533,534,531,526,529,527,532,533,534,531,526,529,527,532,531,526,529,527,532,528,533,534,531,526,529,527,532,528,533,534,531,526,529,527,532,528,533,534,531,526,529,527,532,528,533,534,531,534,534,534,534,534,526,529,527,532,528,533,534,531,526,529,527,532,528,533,534,531,526,529,527,532,528,533,534,531,526,529,527,532,528,533,534,531,526,529,527,532,528,533,534,531,526,529,527,532,528,533,534,531,526,529,527,532,528,533,534,531,526,529,527,532,528,533,534,531,531,526,529,527,532,531,526,529,527,532,531,526,529,527,532,528,533,534,531,531,526,529,527,532,533,534,531,526,529,527,532,528,533,534,531,526,529,527,532,528,533,534,531,526,529,527,532,531,526,529,527,532,528,533,534,531,526,529,527,532,528,533,534,531,526,529,527,532,528,533,534,531,526,529,527,532,528,533,534,531,526,529,527,532,528,533,534,531,0,0,0,535,535,535,535,535,535,535,535,535,535,535,535,535,535,535,535,535,535,535,535,535,535,535,535,535,535,535,535,535,535,535,535,535,535,535,0,0,0,0,0,65,65,65,65,65,65,65,65,65,65,65,65,65,0,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,0,540,540,540,540,540,540,540,540,540,540,540,540,540,540,540,540,540,540,540,540,540,540,540,540,540,540,540,540,540,540,540,541,541,541,541,541,0,541,541,541,541,0,541,541,541,0,0,541,542,543,541,542,543,541,542,543,541,542,543,541,542,541,542,541,542,542,543,541,542,543,541,542,543,541,542,543,541,542,541,541,541,541,541,543,541,542,543,541,542,543,541,542,543,541,542,543,541,542,543,541,542,543,541,542,0,0,543,541,542,543,542,543,542,543,541,542,543,541,542,542,542,543,541,542,543,541,542,543,541,542,543,541,542,543,541,542,543,541,542,543,541,542,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,0,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,0,0,0,0,0,0,0,0,0,0,545,544,545,544,545,544,545,544,545,544,545,545,545,544,545,544,545,544,545,544,545,544,544,545,545,544,545,545,544,545,544,545,544,545,544,545,544,545,545,544,545,575,576,545,544,544,544,544,544,544,545,545,545,544,544,545,544,545,544,545,544,545,544,545,544,545,544,545,538,538,538,538,539,538,538,538,538,538,0,537,0,538,538,538,538,538,539,537,0,537,538,539,537,538,539,537,538,539,537,538,539,537,538,539,537,538,539,537,538,539,537,538,539,537,538,539,537,538,539,537,538,539,538,539,538,538,538,538,539,539,539,539,537,538,539,537,538,539,537,538,539,537,538,539,537,538,539,537,538,539,537,538,539,537,538,539,537,538,539,538,537,538,539,537,538,539,539,537,538,539,537,538,539,537,538,539,537,538,539,537,538,539,537,538,539,537,538,539],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,1],2,[]],[[3,4],[[6,[5]]]],[[7,4],[[6,[5]]]],[[7,[9,[8]]],[[6,[[10,[5]]]]]],0,0,[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[[7,[9,[12]],[9,[13]]],[[6,[2]]]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[3,2],[7,7],[[-1,-2],2,[],[]],0,0,0,[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],0,0,[14,2],[14,2],[-1,-1,[]],[-1,-1,[]],[3,[[6,[17]]]],[7,[[6,[[2,[18,5]]]]]],[7,[[6,[[10,[4]]]]]],[[7,18,18],[[6,[[10,[4]]]]]],[[3,[9,[5]]],[[6,[[10,[4]]]]]],[[7,[9,[5]]],[[6,[[10,[4]]]]]],[[7,[9,[18]]],[[6,[[10,[4]]]]]],[[3,[9,[19]]],[[6,[[10,[4]]]]]],[[7,[9,[19]]],[[6,[[10,[4]]]]]],[7,[[6,[[10,[8]]]]]],[[7,18,18],[[6,[[10,[20]]]]]],[[7,[9,[18]]],[[6,[[10,[[21,[20]]]]]]]],[[3,4],[[6,[22]]]],[[7,4],[[6,[22]]]],[[7,20],[[6,[22]]]],[[7,18],[[6,[22]]]],0,0,0,[[],14],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[3,[[6,[22]]]],[7,22],[3,[[6,[[2,[18,5]]]]]],[7,[[6,[[2,[18,5]]]]]],[3,[[6,[4]]]],[7,[[6,[4]]]],[7,[[6,[20]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[7,14],[7,[[6,[17]]]],[28,[[6,[7]]]],0,0,0,[[[2,[29,29]]],[[6,[[2,[-1,-2]]]]],30,30],[[[2,[29,29]]],[[6,[[2,[18,-1]]]]],30],0,0,0,0,[[]],[[]],0,0,[[7,[9,[8]]],[[6,[2]]]],[3,[[6,[2]]]],0,0,0,0,[-1,-2,[],[]],0,0,[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],0,[7,14],[-1,31,[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[4,8],[[6,[2]]]],[[4,[10,[8]]],[[6,[2]]]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[19,19],[4,4],[32,32],[33,33],[34,34],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[32,5],[[6,[22]]]],[[33,18],[[6,[22]]]],0,[-1,[[16,[19,35]]],36],[-1,[[16,[4,35]]],36],[-1,[[16,[37,35]]],36],[-1,[[39,[38]]],36],[-1,[[41,[[23,[40]]]]],[42,43,44]],[-1,[[41,[[23,[40]]]]],[42,43,44]],[-1,[[41,[[23,[40]]]]],[42,43,44]],[[],4],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],0,[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[[19,-1],[[16,[14,35]]],45],[[4,-1],[[16,[14,35]]],45],[[37,-1],[[16,[14,35]]],45],[[38,-1],[[39,[14]]],45],[[19,-1],[[41,[[23,[40]]]]],[46,43,44]],[[4,-1],[[41,[[23,[40]]]]],[46,43,44]],[[37,-1],[[41,[[23,[40]]]]],[46,43,44]],[[19,47],48],[[4,47],48],[[37,47],48],[[38,47],48],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[49,4],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[4,[[6,[19]]]],[4,[[6,[5]]]],[[50,[9,[5]],22],[[6,[[10,[[21,[19]]]]]]]],[[51,[9,[18]],22],[[6,[[10,[[21,[5]]]]]]]],[[32,[9,[5]],22],[[6,[[10,[[21,[19]]]]]]]],[[33,[9,[18]],22],[[6,[[10,[[21,[5]]]]]]]],[[34,[9,[18]],22],[[6,[[10,[[21,[38]]]]]]]],[[33,18,18],[[6,[[10,[5]]]]]],[32,[[6,[[10,[[2,[5,19]]]]]]]],[33,[[6,[[10,[[2,[18,5]]]]]]]],[34,[[6,[[10,[[2,[18,38]]]]]]]],[33,[[6,[[2,[18,5]]]]]],[51,[[6,[[2,[18,5]]]]]],[33,[[6,[[2,[18,5]]]]]],[[34,14],[[6,[[10,[38]]]]]],[19,5],[4,[[6,[5]]]],0,0,0,[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[50,[9,[19]]],[[6,[[10,[5]]]]]],[[51,[9,[18]],[9,[5]]],[[6,[2]]]],[[52,[9,[38]]],[[6,[2]]]],[[32,[9,[19]]],[[6,[[10,[5]]]]]],[[33,[9,[18]],[9,[5]]],[[6,[2]]]],[[34,[9,[38]]],[[6,[2]]]],[[32,[9,[19]]],[[6,[[2,[13,[10,[5]]]]]]]],[[33,[9,[18]],[9,[5]]],[[6,[13]]]],[[34,[9,[38]]],[[6,[13]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[51,[[6,[22]]]],[33,22],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[33,14],[53,[[6,[50]]]],[53,[[6,[51]]]],[53,[[6,[52]]]],[[5,[10,[5]],54],19],[[55,[10,[8]],54,[10,[20]]],4],[28,[[6,[32]]]],[28,[[6,[33]]]],[[18,18,56,56],38],[28,[[6,[34]]]],[[55,[10,[20]]],4],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[4,57],[[6,[2]]]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],0,0,[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,[[-1,1],2,[]],[[-1,1],2,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[58,58],[59,59],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[14,2],[14,2],[14,2],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[60,61],[[6,[[10,[62]]]]]],[[58,61],[[6,[[10,[62]]]]]],[[63,61,64],[[6,[[2,[65,66]]]]]],[[59,28,61,64],[[6,[[2,[65,66]]]]]],[[],14],[[63,61,64],[[6,[[67,[62]]]]]],[[],14],[[],14],[[],14],[[60,61,[9,[62]]],[[6,[2]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[63,61,64],[[6,[[67,[62]]]]]],[[59,28,61,64],[[6,[12]]]],[53,[[6,[60]]]],[53,[[6,[63]]]],[28,[[6,[58]]]],[28,[[6,[59]]]],[[]],[[]],[[]],[[]],[[59,28,61,64],[[6,[2]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[[-1,1],2,[]],[[-1,1],2,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[55,55],[68,68],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[68,5],[[6,[22]]]],[-1,[[16,[55,35]]],36],[-1,[[41,[[23,[40]]]]],[42,43,44]],[[],55],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[14,2],[14,2],[[55,-1],[[16,[14,35]]],45],[[55,-1],[[41,[[23,[40]]]]],[46,43,44]],0,[[55,55],22],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[55,47],48],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[69,[9,[5]],22],[[6,[[10,[[21,[55]]]]]]]],[[68,[9,[5]],22],[[6,[[10,[[21,[55]]]]]]]],[68,[[6,[[10,[[2,[5,55]]]]]]]],[55,[[6,[5]]]],0,[[],14],[[],14],[[],14],[[69,[9,[55]]],[[6,[[10,[5]]]]]],[[68,[9,[55]]],[[6,[[10,[5]]]]]],[[68,[9,[55]]],[[6,[[2,[13,[10,[5]]]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[53,[[6,[69]]]],[[5,18,18,70,71],55],[28,[[6,[68]]]],0,[[]],[[]],[[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,[[-1,1],2,[]],[[-1,1],2,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[72,72],[73,73],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[72,18],[[6,[22]]]],[[73,5],[[6,[22]]]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[14,2],[14,2],[14,2],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[74,[9,[18]],22],[[6,[[10,[[21,[20]]]]]]]],[[75,[9,[5]],22],[[6,[[10,[[21,[[10,[18]]]]]]]]]],[[72,[9,[18]],22],[[6,[[10,[[21,[20]]]]]]]],[[73,[9,[5]],22],[[6,[[10,[[21,[[10,[18]]]]]]]]]],[[72,18,18],[[6,[[10,[20]]]]]],[72,[[6,[[10,[20]]]]]],[73,[[6,[[10,[[2,[5,[10,[18]]]]]]]]]],[[74,18],[[6,[[10,[62]]]]]],[74,[[6,[20]]]],[72,[[6,[20]]]],[[],14],[[],14],[[],14],[[],14],[[74,[9,[20]]],[[6,[2]]]],[[75,[9,[5]],[9,[[10,[18]]]]],[[6,[2]]]],[[72,[9,[20]]],[[6,[2]]]],[[73,[9,[5]],[9,[[10,[18]]]]],[[6,[2]]]],[[72,[9,[20]]],[[6,[13]]]],[[73,[9,[5]],[9,[[10,[18]]]]],[[6,[13]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[72,22],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[72,14],[53,[[6,[74]]]],[53,[[6,[75]]]],[28,[[6,[72]]]],[28,[[6,[73]]]],[[]],[[]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[76,76],[77,77],[78,78],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[76,5],[[6,[22]]]],[[77,5],[[6,[22]]]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[14,2],[14,2],[14,2],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[79,[9,[5]],22],[[6,[[10,[[21,[8]]]]]]]],[[76,[9,[5]],22],[[6,[[10,[[21,[8]]]]]]]],[[77,[9,[5]],22],[[6,[[10,[[21,[8]]]]]]]],[76,[[6,[[10,[[2,[5,8]]]]]]]],[77,[[6,[[80,[5,8]]]]]],[78,[[6,[[10,[[2,[18,5]]]]]]]],[[],14],[[],14],[[],14],[[],14],[[79,[9,[8]]],[[6,[[10,[5]]]]]],[[76,[9,[8]]],[[6,[[10,[5]]]]]],[[77,[9,[8]]],[[6,[[10,[5]]]]]],[[78,[9,[5]]],[[6,[2]]]],[[76,[9,[8]]],[[6,[[2,[13,[10,[5]]]]]]]],[[77,[9,[8]]],[[6,[[2,[13,[10,[5]]]]]]]],[[78,[9,[5]]],[[6,[13]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[76,22],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[76,14],[53,[[6,[79]]]],[28,[[6,[76]]]],[28,[[6,[77]]]],[28,[[6,[78]]]],[[]],[[]],[[]],[[]],[[77,[9,[5]]],[[6,[2]]]],[[78,[9,[18]]],[[6,[2]]]],[[77,[9,[5]]],13],[[78,[9,[18]]],13],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],0,0,[81,5],[82,5],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[83,83],[81,81],[82,82],[84,84],[85,85],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[-1,[[16,[83,35]]],36],[-1,[[16,[81,35]]],36],[-1,[[16,[86,35]]],36],[-1,[[16,[82,35]]],36],[-1,[[16,[84,35]]],36],[-1,[[16,[85,35]]],36],[-1,[[41,[[23,[40]]]]],[42,43,44]],[-1,[[41,[[23,[40]]]]],[42,43,44]],[-1,[[41,[[23,[40]]]]],[42,43,44]],[-1,[[41,[[23,[40]]]]],[42,43,44]],[-1,[[41,[[23,[40]]]]],[42,43,44]],[-1,[[41,[[23,[40]]]]],[42,43,44]],[[],83],[[],82],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[[83,-1],[[16,[14,35]]],45],[[81,-1],[[16,[14,35]]],45],[[86,-1],[[16,[14,35]]],45],[[82,-1],[[16,[14,35]]],45],[[84,-1],[[16,[14,35]]],45],[[85,-1],[[16,[14,35]]],45],[[83,-1],[[41,[[23,[40]]]]],[46,43,44]],[[81,-1],[[41,[[23,[40]]]]],[46,43,44]],[[86,-1],[[41,[[23,[40]]]]],[46,43,44]],[[82,-1],[[41,[[23,[40]]]]],[46,43,44]],[[84,-1],[[41,[[23,[40]]]]],[46,43,44]],[[85,-1],[[41,[[23,[40]]]]],[46,43,44]],0,[[83,83],22],[[85,85],22],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[83,47],48],[[81,47],48],[[86,47],48],[[82,47],48],[[84,47],48],[[85,47],48],[[85,47],48],[-1,-1,[]],[82,81],[-1,-1,[]],[-1,-1,[]],[85,82],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[70,5],81],[[70,5],83],0,0,0,0,[83,5],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],0,0,0,0,[[5,18,18,70,87],83],[[5,18,18,[10,[5]],87,88],81],[[83,[10,[8]],88],82],[[83,[10,[8]],88],85],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,89,[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],0,0,[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[14,2],0,0,[90,18],[[90,47],48],[-1,-1,[]],[-1,-1,[]],0,[90,18],[90,18],[[],14],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[[21,[18]],[21,[18]],[21,[18]],[10,[91]]],90],0,[[]],[[]],0,0,[90,18],[90,18],[90,[[6,[2]]]],0,[90,[[2,[18,18,18]]]],[90,22],[90,92],[90,[[6,[70]]]],[90,70],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[93,5],[14,-1,[]],[14,-1,[]],[94,70],[14,-1,[]],[95,70],[96,18],[14,-1,[]],[97,5],[14,-1,[]],[14,-1,[]],[98,70],[99,70],[14,-1,[]],[100,18],[14,-1,[]],[101,102],[14,-1,[]],[103,102],[14,-1,[]],[14,-1,[]],[104,102],[105,102],[14,-1,[]],[106,102],[14,-1,[]],[107,102],[14,-1,[]],[14,-1,[]],[108,102],[14,-1,[]],[109,102],[14,-1,[]],[110,102],[14,-1,[]],[111,102],[112,102],[14,-1,[]],[14,-1,[]],[113,102],[114,102],[14,-1,[]],[115,102],[14,-1,[]],[116,102],[14,-1,[]],[14,-1,[]],[117,102],[14,-1,[]],[118,102],[14,-1,[]],[119,102],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[65,18],0,0,0,0,0,0,0,0,0,0,0,[[-1,1],2,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[120,120],[[-1,-2],2,[],[]],0,0,0,0,0,0,0,0,0,[[71,71,71,121],122],[[120,71,71,71,71,123,121],[[2,[[6,[124]],[10,[71]]]]]],[[120,123,125,71,125,71,71,71,71,71,121],[[6,[126]]]],[-1,[[16,[120,35]]],36],[-1,[[41,[[23,[40]]]]],[42,43,44]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[120,127,121],120],[[120,121],122],[120,71],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[14,2],[[71,71],[[2,[71,71]]]],[[71,18],[[2,[71,71]]]],[[120,-1],[[16,[14,35]]],45],[[120,-1],[[41,[[23,[40]]]]],[46,43,44]],[[120,47],48],[-1,-1,[]],[-1,-1,[]],[[],128],[[],71],[[],14],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[120,71,71,71,71],22],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],0,0,[[18,18,71,87,14,[10,[87]],71,127],120],0,[120,71],[[]],[[]],[[120,71,71,71,71,121],[[10,[71]]]],0,0,[120,71],[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[[87,71],71],[[87,18],71],0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[-1,1],2,[]],[[-1,1],2,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[88,88],[129,129],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,0,[-1,[[16,[88,35]]],36],[-1,[[16,[129,35]]],36],[-1,[[41,[[23,[40]]]]],[42,43,44]],[-1,[[41,[[23,[40]]]]],[42,43,44]],[[],88],[[],129],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[14,2],[[88,-1],[[16,[14,35]]],45],[[129,-1],[[16,[14,35]]],45],[[88,-1],[[41,[[23,[40]]]]],[46,43,44]],[[129,-1],[[41,[[23,[40]]]]],[46,43,44]],[[88,88],22],[[129,129],22],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[88,47],48],[[129,47],48],[-1,-1,[]],[124,129],[-1,-1,[]],[[],14],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],0,[[54,130,[10,[71]],18,71,129,18],88],[[]],[[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[[129,66,[9,[71]]],[[6,[2]]]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[-1,-1,[]],[[[24,[131]]],[[6,[2]]]],[[132,133,134],[[6,[135]]]],[[],14],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],0,[[],[[16,[26,27]]]],[131,64],0,[[]],0,[[[24,[131]],[24,[136]]],[[41,[[23,[40]]]]]],0,[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],0,0,[-1,11,[]],[-1,11,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[-1,-1,[]],[[[24,[137]]],[[6,[2]]]],[[[24,[137]]],[[6,[2]]]],[[[24,[137]]],[[6,[2]]]],[[[24,[137]]],[[6,[2]]]],[[],14],[[132,133,134,22],[[6,[135]]]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],0,[[],[[16,[26,27]]]],[137,64],0,[[]],0,0,0,[[[24,[137]],[24,[136]]],[[41,[[23,[40]]]]]],0,[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],0,[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[-1,-1,[]],[[[24,[138]]],[[6,[2]]]],[[[24,[138]]],[[6,[2]]]],[[132,133,134],[[6,[135]]]],[[],14],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],0,[[],[[16,[26,27]]]],[138,64],[[]],0,[[[24,[138]],[24,[136]]],[[41,[[23,[40]]]]]],0,0,[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],0,[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[-1,-1,[]],[[[24,[139]]],[[6,[2]]]],[[],14],[[132,133,134],[[6,[135]]]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],0,[[],[[16,[26,27]]]],[139,64],0,[[]],[[[24,[139]],[24,[136]]],[[41,[[23,[40]]]]]],0,[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],0,[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],0,0,0,0,0,[[-1,1],2,[]],[[-1,1],2,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[125,125],[140,140],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[-1,[[16,[125,35]]],36],[-1,[[16,[140,35]]],36],[-1,[[41,[[23,[40]]]]],[42,43,44]],[-1,[[41,[[23,[40]]]]],[42,43,44]],[[140,57],125],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[14,2],[[125,-1],[[16,[14,35]]],45],[[140,-1],[[16,[14,35]]],45],[[125,-1],[[41,[[23,[40]]]]],[46,43,44]],[[140,-1],[[41,[[23,[40]]]]],[46,43,44]],[[125,130],140],0,[[125,125],22],[[140,140],22],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[125,47],48],[[140,47],48],[-1,-1,[]],[-1,-1,[]],[[],14],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],0,[[]],[[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[141,142],2],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[143,102,102],[[2,[71,71]]]],[141,22],[[141,142,142],22],0,[144,144],[145,145],[146,146],[147,147],[148,148],[142,142],[149,149],[141,141],[150,150],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,0,0,0,[143,[[6,[[10,[120]]]]]],0,[-1,[[16,[144,35]]],36],[-1,[[16,[145,35]]],36],[-1,[[16,[151,35]]],36],[-1,[[16,[146,35]]],36],[-1,[[16,[147,35]]],36],[-1,[[16,[148,35]]],36],[-1,[[16,[149,35]]],36],[-1,[[16,[150,35]]],36],[-1,[[41,[[23,[40]]]]],[42,43,44]],[-1,[[41,[[23,[40]]]]],[42,43,44]],[-1,[[41,[[23,[40]]]]],[42,43,44]],[-1,[[41,[[23,[40]]]]],[42,43,44]],[-1,[[41,[[23,[40]]]]],[42,43,44]],[-1,[[41,[[23,[40]]]]],[42,43,44]],[-1,[[41,[[23,[40]]]]],[42,43,44]],[-1,[[41,[[23,[40]]]]],[42,43,44]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[143,102],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[[144,-1],[[16,[14,35]]],45],[[145,-1],[[16,[14,35]]],45],[[151,-1],[[16,[14,35]]],45],[[146,-1],[[16,[14,35]]],45],[[147,-1],[[16,[14,35]]],45],[[148,-1],[[16,[14,35]]],45],[[149,-1],[[16,[14,35]]],45],[[150,-1],[[16,[14,35]]],45],[[144,-1],[[41,[[23,[40]]]]],[46,43,44]],[[145,-1],[[41,[[23,[40]]]]],[46,43,44]],[[151,-1],[[41,[[23,[40]]]]],[46,43,44]],[[146,-1],[[41,[[23,[40]]]]],[46,43,44]],[[147,-1],[[41,[[23,[40]]]]],[46,43,44]],[[148,-1],[[41,[[23,[40]]]]],[46,43,44]],[[149,-1],[[41,[[23,[40]]]]],[46,43,44]],[[150,-1],[[41,[[23,[40]]]]],[46,43,44]],0,[[143,[10,[5]],[10,[5]],71,71],[[6,[22]]]],0,0,[143,102],0,0,[[143,85],[[6,[152]]]],[[144,47],48],[[145,47],48],[[151,47],48],[[146,47],48],[[147,47],48],[[148,47],48],[[142,47],48],[[149,47],48],[[141,47],48],[[150,47],48],[143,[[2,[[10,[5]],[10,[5]]]]]],0,0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[149,142],[-1,-1,[]],[142,149],[-1,-1,[]],[150,141],[-1,-1,[]],[141,150],[-1,-1,[]],[[143,[10,[5]],[10,[5]],71,71],2],0,0,0,[143,71],[[143,18],[[6,[20]]]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[143,[[6,[2]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],0,[[143,71,71],[[2,[22,152,14]]]],[143,[[6,[18]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[143,152],[143,14],[[153,7,70,70,5,18,22],143],[[85,[10,[120]],127,[10,[71]]],142],[[5,142],141],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[143,5],22],0,0,[143,2],[143,18],0,0,[143,[[6,[2]]]],[143,[[2,[71,71]]]],0,0,[143,18],0,0,0,[143,22],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[143,18],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[143,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[143,102],0,[[-1,1],2,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[126,126],[[-1,-2],2,[],[]],0,0,0,[-1,[[16,[126,35]]],36],[-1,[[41,[[23,[40]]]]],[42,43,44]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[[126,-1],[[16,[14,35]]],45],[[126,-1],[[41,[[23,[40]]]]],[46,43,44]],[[126,47],48],[-1,-1,[]],[[],14],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[],[[16,[26,27]]]],0,[[]],0,[126,[[10,[71]]]],0,0,[-1,-2,[],[]],0,[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[[126,66],[[6,[2]]]],[-1,-2,[],[]],0,[[134,133],[[6,[2]]]],0,[[134,133],[[6,[22]]]],0,[[134,134,133,[24,[136]]],[[6,[2]]]],[[134,133],[[6,[2]]]],[[134,133],[[6,[22]]]],[[134,134,133,[24,[136]]],2],[[134,133,[24,[136]]],22],[[134,134,133,[24,[136]]],[[6,[2]]]],[[134,133],22],0,[[-1,1],2,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[154,154],[[-1,-2],2,[],[]],[-1,[[16,[154,35]]],36],[-1,[[41,[[23,[40]]]]],[42,43,44]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[[154,-1],[[16,[14,35]]],45],[[154,-1],[[41,[[23,[40]]]]],[46,43,44]],[[154,47],48],[-1,-1,[]],[[],14],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[],[[16,[26,27]]]],[[]],[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],0,0,0,[[-1,1],2,[]],[102,102],[[102,102],102],[[102,102],2],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[102,102],[[-1,-2],2,[],[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[102,102],102],[14,2],[[102,102],22],[[102,47],48],[[102,47],48],[-1,-1,[]],[[],14],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[],[[16,[26,27]]]],[102,102],[[102,102],102],[[102,102],[[21,[155]]]],[[]],[[102,102],102],[102,156],[[102,102],102],[-1,-2,[],[]],[-1,89,[]],[152,[[16,[102]]]],[-1,[[16,[-2]]],[],[]],[18,[[16,[102]]]],[64,[[16,[102]]]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[71,157],[102,71],[102,157],0,0,0,[[158,[9,[8]]],2],[[158,8],22],[-1,11,[]],[-1,11,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[158,[[6,[[2,[[10,[4]],[10,[20]]]]]]]],0,[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[-1,-1,[]],[[],14],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[],[[16,[26,27]]]],0,0,[[28,70,70,5,18,153,[10,[130]],22,22],[[6,[133]]]],0,[[]],[[158,18,152,14,71,71],[[6,[[21,[[2,[85,120,121]]]]]]]],0,[158,[[6,[2]]]],[[158,[9,[4]]],[[6,[2]]]],[[158,4],[[6,[22]]]],[[158,20],[[6,[22]]]],[[158,85,[21,[[2,[14,120,121]]]]],[[6,[22]]]],[[158,[9,[20]]],[[6,[2]]]],[[158,[9,[4]]],[[6,[2]]]],0,0,0,[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[[158,152],[[6,[[10,[8]]]]]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[[158,17,8,18],[[6,[2]]]],[[158,[9,[8]],18,22],[[6,[[10,[8]]]]]],[-1,-2,[],[]],0,0,0,0,[-1,[[41,[[23,[40]]]]],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,159,[]],[-1,159,[]],[-1,159,[]],[-1,159,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[160,160],[161,161],[162,162],[163,163],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[14,2],[14,2],[14,2],[[160,47],48],[[160,47],48],[[161,47],48],[[161,47],48],[[162,47],48],[[162,47],48],[[163,47],48],[[163,47],48],[164,160],[165,160],[2,160],[166,160],[167,160],[168,160],[169,160],[170,160],[171,160],[172,160],[173,160],[174,160],[175,160],[176,160],[177,160],[178,160],[179,160],[163,160],[180,160],[181,160],[182,160],[-1,-1,[]],[183,160],[184,160],[185,160],[186,160],[187,160],[188,160],[[[189,[-1]]],160,[]],[190,160],[191,160],[161,160],[35,160],[192,160],[193,160],[194,160],[162,160],[195,160],[196,160],[197,160],[198,160],[-1,-1,[]],[-1,-1,[]],[35,162],[160,162],[35,163],[-1,-1,[]],[[],14],[[],14],[[],14],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[]],[[]],[[]],[[]],[160,[[6,[[10,[8]]]]]],[160,[[21,[159]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,89,[]],[-1,89,[]],[-1,89,[]],[-1,89,[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,[[199,28],2],0,[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[199,5],[[6,[[21,[200]]]]]],[[199,[9,[200]]],[[6,[[10,[5]]]]]],[[199,200],[[6,[2]]]],[[[24,[199]],18],[[6,[2]]]],[199,[[6,[2]]]],[199,18],0,[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[199,200,[201,[5]],[202,[5]]],[[41,[[23,[40]]]]]],[14,2],0,0,[199,[[201,[5]]]],[-1,-1,[]],[18,200],[199,[[67,[5]]]],[199,[[67,[5]]]],[[],14],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[],[[16,[26,27]]]],[[134,28,64,18,[24,[136]]],[[6,[203]]]],[199,[[10,[5]]]],0,0,[[]],0,0,0,[[199,5,5],22],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],0,[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],0,[-1,-2,[],[]],0,[[-1,1],2,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[200,200],[[-1,-2],2,[],[]],[200,[[9,[62]]]],0,[-1,[[16,[200,35]]],36],[-1,[[41,[[23,[40]]]]],[42,43,44]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[[200,-1],[[16,[14,35]]],45],[[200,-1],[[41,[[23,[40]]]]],[46,43,44]],[[200,47],48],[-1,-1,[]],[200,5],[[],14],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[],[[16,[26,27]]]],[[[10,[62]],203],200],0,[[]],0,[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[200,22],[-1,-2,[],[]],0,0,0,0,0,0,0,0,[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],0,[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[204,204],[205,205],[206,206],[207,207],[208,208],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[-1,[[16,[204,35]]],36],[-1,[[16,[205,35]]],36],[-1,[[16,[206,35]]],36],[-1,[[16,[207,35]]],36],[-1,[[16,[208,35]]],36],[-1,[[41,[[23,[40]]]]],[42,43,44]],[-1,[[41,[[23,[40]]]]],[42,43,44]],[-1,[[41,[[23,[40]]]]],[42,43,44]],[-1,[[41,[[23,[40]]]]],[42,43,44]],[-1,[[41,[[23,[40]]]]],[42,43,44]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[[204,-1],[[16,[14,35]]],45],[[205,-1],[[16,[14,35]]],45],[[206,-1],[[16,[14,35]]],45],[[207,-1],[[16,[14,35]]],45],[[208,-1],[[16,[14,35]]],45],[[204,-1],[[41,[[23,[40]]]]],[46,43,44]],[[205,-1],[[41,[[23,[40]]]]],[46,43,44]],[[206,-1],[[41,[[23,[40]]]]],[46,43,44]],[[207,-1],[[41,[[23,[40]]]]],[46,43,44]],[[208,-1],[[41,[[23,[40]]]]],[46,43,44]],0,0,0,0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[24,[209]]],[[6,[2]]]],[[[24,[209]]],[[6,[2]]]],[[[24,[209]]],[[6,[2]]]],[[],14],[[203,132],[[6,[135]]]],[[],14],[[],14],[[],14],[[],14],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],0,[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],0,[209,64],[[]],[[]],[[]],[[]],[[]],[[]],[[[24,[209]],[24,[136]]],[[41,[[23,[40]]]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[18,18],[152,18],[[18,18],18],0,0,0,0,0,[[-1,1],2,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[210,210],[[-1,-2],2,[],[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[14,2],0,[-1,-1,[]],[-1,-1,[]],[211,[[6,[[2,[[201,[5]],[201,[5]]]]]]]],[[211,5],[[6,[210]]]],[[211,5],[[6,[212]]]],[[],14],[[],14],[[211,-1],[[6,[[2,[5,[10,[5]]]]]]],[42,43]],[[211,-1],[[6,[5]]],[[213,[[9,[62]]]]]],[[211,5,[9,[5]]],[[6,[2]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[210,22],[210,[[214,[[2,[5,[21,[212]]]]]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[212,[[6,[211]]]],[[[9,[5]]],210],[[]],[[]],[212,[[6,[[10,[5]]]]]],[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[24,[215]],[23,[216]],[24,[136]]],2],0,[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[-1,-1,[]],[[[24,[215]],[6,[2]]],2],[[],14],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[],[[16,[26,27]]]],[217,218],0,[[]],0,[[[24,[215]],[23,[216]],[24,[136]]],[[6,[2]]]],0,[[[24,[215]],91,[24,[136]]],[[6,[2]]]],[215,2],[[[24,[215]]],[[219,[[6,[132]]]]]],0,[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],0,0,0,[[-1,1],2,[]],0,[220,91],0,[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[221,221],[[-1,-2],2,[],[]],[-1,[[16,[221,35]]],36],[-1,[[41,[[23,[40]]]]],[42,43,44]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[14,2],[[221,-1],[[16,[14,35]]],45],[[221,-1],[[41,[[23,[40]]]]],[46,43,44]],[[220,47],48],[[221,47],48],[-1,-1,[]],[-1,-1,[]],[[[24,[220]],[6,[2]]],2],0,0,[[],14],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[160,22],[220,22],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[[24,[220]]],[[6,[2]]]],[220,222],0,[[[23,[223]],91,217],[[24,[220]]]],[91,221],[220,134],0,[[]],[[]],0,0,0,[[220,-1],[[6,[2]]],224],[[220,-1],[[6,[2]]],224],[220,[[24,[225]]]],0,[220,226],[222,2],[[[24,[220]],[24,[136]]],2],[220,2],0,0,[220,[[6,[[227,[-1]]]]],224],[220,[[6,[[219,[160]]]]]],[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[228,91],[[6,[[2,[91,132]]]]]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[-1,-1,[]],[[],14],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[],[[16,[26,27]]]],[[229,217],228],[[]],0,0,[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],0,0,0,0,0,[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,[230,230],[231,231],[232,232],[233,233],[234,234],[235,235],[236,236],[237,237],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,0,0,[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],0,[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],0,[[230,47],48],[[231,47],48],[[232,47],48],[[233,47],48],[[234,47],48],[[235,47],48],[[236,47],48],[[237,47],48],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[238,91],22],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[238,[[10,[91]]]],[[238,[9,[89]],[21,[14]]],[[10,[91]]]],[[238,239],[[10,[91]]]],[[238,[9,[89]],239],[[10,[91]]]],[[238,[9,[89]],239],[[10,[91]]]],[[238,[9,[89]],[21,[14]]],[[10,[91]]]],[[238,[9,[91]]],[[10,[91]]]],[-1,-1,[]],[[],14],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[238,22],[[238,91],22],[[238,91],22],[[],[[16,[26,27]]]],[[238,91],2],[229,240],0,[[]],0,[[238,91],2],0,0,[[238,91],2],0,[[238,[9,[91]]],2],0,[238,[[6,[[219,[14]]]]]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[[238,91],2],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],0,0,[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[241,241],[242,242],[243,243],[244,244],[245,245],[246,246],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[-1,[[16,[241,35]]],36],[-1,[[16,[242,35]]],36],[-1,[[16,[243,35]]],36],[-1,[[16,[244,35]]],36],[-1,[[16,[245,35]]],36],[-1,[[16,[246,35]]],36],[-1,[[16,[247,35]]],36],[-1,[[41,[[23,[40]]]]],[42,43,44]],[-1,[[41,[[23,[40]]]]],[42,43,44]],[-1,[[41,[[23,[40]]]]],[42,43,44]],[-1,[[41,[[23,[40]]]]],[42,43,44]],[-1,[[41,[[23,[40]]]]],[42,43,44]],[-1,[[41,[[23,[40]]]]],[42,43,44]],[-1,[[41,[[23,[40]]]]],[42,43,44]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[[241,-1],[[16,[14,35]]],45],[[242,-1],[[16,[14,35]]],45],[[243,-1],[[16,[14,35]]],45],[[244,-1],[[16,[14,35]]],45],[[245,-1],[[16,[14,35]]],45],[[246,-1],[[16,[14,35]]],45],[[247,-1],[[16,[14,35]]],45],[[241,-1],[[41,[[23,[40]]]]],[46,43,44]],[[242,-1],[[41,[[23,[40]]]]],[46,43,44]],[[243,-1],[[41,[[23,[40]]]]],[46,43,44]],[[244,-1],[[41,[[23,[40]]]]],[46,43,44]],[[245,-1],[[41,[[23,[40]]]]],[46,43,44]],[[246,-1],[[41,[[23,[40]]]]],[46,43,44]],[[247,-1],[[41,[[23,[40]]]]],[46,43,44]],[[241,47],48],[[242,47],48],[[243,47],48],[[244,47],48],[[245,47],48],[[246,47],48],[[247,47],48],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[-1,[[6,[247]]],[42,43,44,248]],[[-1,247],[[6,[14]]],[46,43,44,248]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,[[[249,[-1]],[6,[[24,[-1]]]]],2,224],[222,2],[[[24,[-1]]],[[24,[11]]],[]],[-1,11,[]],[[[24,[[249,[-1]]]]],[[24,[11]]],224],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],222],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],0,[14,2],[14,2],[14,2],[[[249,[-1]],47],48,[250,224]],[[[227,[-1]],47],48,[250,224]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[[],14],[[],14],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[249,[-1]]],224],[[],222],[[222,64,[9,[62]]],[[6,[2]]]],0,[[]],[[]],[[]],[[],251],[[[227,[-1]]],[[6,[[24,[-1]]]]],224],0,0,[[[24,[[249,[-1]]]]],[[227,[-1]]],224],[222,[[6,[[227,[-1]]]]],224],[[-1,[9,[62]]],[[41,[[23,[40]]]]],[]],[[[249,[-1]],[9,[62]]],[[41,[[23,[40]]]]],224],[[-1,160],[[41,[[23,[40]]]]],[]],[[[249,[-1]],160],[[41,[[23,[40]]]]],224],[[222,160],2],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[[[249,[-1]],251],2,224],[[[227,[-1]]],2,224],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[[252,91],22],0,[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[252,-1],2,224],[[252,-1,[9,[132]]],2,224],[[252,-1,[9,[91]]],2,224],0,[252,[[10,[132]]]],0,0,0,[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[252,2],[252,2],0,[[252,237],2],[252,[[219,[237]]]],0,[14,2],[252,253],0,[[252,91],22],[-1,-1,[]],[252,240],0,[[],14],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[252,22],[[],[[16,[26,27]]]],0,0,[[254,253],134],0,0,0,[[]],[252,255],0,0,[252,[[21,[132]]]],[[252,132],2],[[252,91],2],[[[24,[252]]],[[6,[2]]]],[252,256],0,[252,257],0,[252,258],0,[252,229],0,[[[24,[252]]],[[6,[2]]]],0,0,[252,2],[[252,132],2],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,[134,2],0,0,0,[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[-1,-1,[]],0,[[[24,[259]]],[[6,[2]]]],[[[24,[259]]],[[6,[2]]]],0,[[132,134],135],[[],14],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],0,[[],[[16,[26,27]]]],[259,64],[[]],[[[24,[259]]],[[6,[2]]]],0,[[[24,[259]],[24,[136]]],[[41,[[23,[40]]]]]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],0,0,0,[-1,64,[]],0,0,[[[24,[-1]],[24,[136]]],[[41,[[23,[40]]]]],[]],0,0,0,[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[24,[260]]],2],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[-1,-1,[]],[[[24,[260]]],2],[[],14],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[],[[16,[26,27]]]],0,[[64,132],261],0,[[]],0,[[260,-1,[24,[136]]],2,[40,44]],[[[24,[260]],[24,[136]]],2],0,[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],0,0,[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[-1,-1,[]],[[132,134],135],[[],14],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],0,[[],[[16,[26,27]]]],[262,64],0,[[]],0,[[],263],[[[24,[262]]],[[6,[2]]]],[[[24,[262]]],[[6,[2]]]],0,[[[24,[262]],[24,[136]]],[[41,[[23,[40]]]]]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],0,0,[-1,11,[]],[-1,11,[]],[[255,226,132,134],[[10,[135]]]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[],255],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[-1,-1,[]],[[],14],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[],[[16,[26,27]]]],[[],255],[[]],[[255,226,-1],2,[264,44,265]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],0,0,0,[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[-1,-1,[]],0,[[],14],[[132,134],135],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[],[[16,[26,27]]]],[266,64],[[]],[266,[[6,[2]]]],0,[[[24,[266]],[24,[136]]],[[41,[[23,[40]]]]]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],0,[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[[[24,[267]],[24,[136]]],[[6,[2]]]],[-1,-1,[]],0,[[],14],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[],[[16,[26,27]]]],[[132,229,240],[[24,[267]]]],[[]],[[[24,[267]]],[[6,[2]]]],[[[24,[267]],[24,[136]]],[[6,[2]]]],[[[24,[267]]],[[6,[2]]]],0,[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],0,0,[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,134,[]],[[-1,[24,[267]],132,[24,[136]]],[[41,[[23,[40]]]]],[]],0,[[-1,132,[24,[136]]],[[41,[[23,[40]]]]],[]],[[134,132],2],0,[-1,226,[]],0,0,0,0,0,[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[24,[268]],14,[24,[136]]],[[6,[2]]]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[-1,-1,[]],[[],14],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[],[[16,[26,27]]]],[[],256],[268,134],0,0,[[]],0,[[[24,[268]],14,132,[24,[136]]],[[6,[2]]]],[[[24,[268]]],[[6,[2]]]],[[[24,[268]],14,91,[24,[136]]],[[6,[2]]]],[268,2],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[268,226],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],0,0,0,[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[24,[269]],91],[[6,[2]]]],0,[[[24,[269]],91],2],0,[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[-1,-1,[]],[[],14],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[],[[16,[26,27]]]],[[],257],[269,134],0,0,[[]],0,[269,2],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[269,226],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],0,0,0,0,0,[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[14,2],[14,2],[[270,[9,[89]]],[[21,[91]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],14],[[],14],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],258],[[[272,[271]],239],[[24,[270]]]],[[],[[24,[273]]]],[270,2],[273,2],[271,134],[270,134],[273,134],0,0,0,[[]],[[]],[[]],0,0,0,[[[24,[270]]],2],[[[24,[273]]],2],[270,258],[273,258],0,0,[[270,91,132],[[6,[2]]]],0,[271,[[10,[239]]]],0,[[[24,[271]]],2],[[[24,[270]]],2],[[[24,[273]]],2],[271,2],[[[24,[270]]],2],[[[24,[273]]],2],[[270,91],[[6,[[2,[91,132]]]]]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[271,226],[-1,31,[]],[-1,31,[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[273,22],[271,2],0,0,[271,2],0,0,0,[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[-1,-1,[]],[[],14],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[],[[16,[26,27]]]],[[[272,[252]]],274],[275,134],0,0,[[]],0,[[[24,[275]]],[[6,[2]]]],[[[24,[275]],14,91,[24,[136]]],[[6,[2]]]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[275,226],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],0,0,0,[[-1,1],2,[]],[[-1,1],2,[]],0,0,0,0,[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[[],276],[254,254],[277,277],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[],254],[[],277],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[-1,[[16,[277]]],278],[14,2],[14,2],0,0,[[254,47],48],[[277,47],48],[277,254],[-1,-1,[]],[-1,-1,[]],[279,277],0,0,0,0,0,0,[[],14],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],0,0,0,0,[[277,277,279],277],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,1],2,[]],[[-1,1],2,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[280,280],[281,281],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[282,[21,[283]]],[[6,[[23,[223]]]]]],[14,2],[14,2],[14,2],[14,2],[282,91],[284,91],0,0,0,0,[[280,47],48],[[281,47],48],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],14],[[],14],[[],14],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[284,[[6,[[23,[216]]]]]],[91,[[6,[282]]]],[91,[[6,[284]]]],[-1,[[41,[[23,[40]]]]],[]],0,[[]],[[]],[[]],[[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],0,[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[-1,1],2,[]],[[-1,1],2,[]],[[285,91,[21,[283]]],[[6,[2]]]],[[[9,[62]]],286],[[],286],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[286,286],[285,285],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[14,2],[[286,286],22],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[286,47],48],[[285,47],48],[-1,-1,[]],[-1,-1,[]],[[-1,-2],18,[287,248],288],[[286,-1],2,289],[[],14],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[6,[285]]]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[-1,1],2,[]],[[-1,1],2,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[290,290],[291,291],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[290,292],[[39,[293]]]],[[291,292],[[39,[293]]]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[290,292,[21,[283]]],[[6,[294]]]],[[291,292],[[6,[295]]]],[14,2],[14,2],[[290,47],48],[[291,47],48],[-1,-1,[]],[-1,-1,[]],[[],14],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[[21,[239]]],[[6,[290]]]],[296,[[6,[291]]]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],0,[-1,31,[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],297],[298,[[9,[299]]]],0,[[],300],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[14,2],[14,2],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],14],[[],14],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],300],[[]],[[]],[[]],0,[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[[300,-1],[[6,[[301,[-1]]]]],223],[[300,295],[[6,[[2,[302,295]]]]]],[303,[[16,[304,176]]]],[[298,305,[9,[305]],306],[[16,[307,176]]]],[[308,305,[9,[305]],309,310,[9,[62]],306],[[16,[311,176]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[-1,1],2,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[312,312],[[-1,-2],2,[],[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[312,64,263,[21,[283]]],[[6,[313]]]],[14,2],[[312,47],48],[-1,-1,[]],[[],14],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[],[[16,[26,27]]]],[[],[[6,[312]]]],[[]],[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],0,0,[[-1,1],2,[]],[[-1,1],2,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[314,314],[315,315],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[314,-1],[[6,[316]]],[[213,[317]],250]],[[315,212],[[6,[318]]]],[14,2],[14,2],[[314,47],48],[[315,47],48],[-1,-1,[]],[-1,-1,[]],[[],14],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[6,[314]]]],[[],[[6,[315]]]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[-1,-1,[]],[[],14],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[],[[16,[26,27]]]],[[91,[24,[136]]],[[6,[319]]]],[[319,320],[[6,[321]]]],[[]],0,0,[[[23,[223]],[323,[322]],[324,[[2,[320,22]]]]],[[6,[2]]]],[[319,320],[[6,[321]]]],[319,2],[[319,320,[325,[322]]],[[6,[2]]]],0,[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],0,0,0,[[[9,[91]]],[[6,[2]]]],[[[9,[91]]],[[6,[2]]]],[[],[[6,[70]]]],0,0,0,[[[326,[[23,[223]]]],[10,[62]],22],[[6,[14]]]],[[[327,[[23,[223]]]],322],[[6,[2]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[328,328],[322,322],[320,320],[329,329],[330,330],[331,331],[332,332],[333,333],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[328,296],0,[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[328,321],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],0,[[328,47],48],[[322,47],48],[[320,47],48],[[329,47],48],[[330,47],48],[[331,47],48],[[332,47],48],[[333,47],48],[-1,-1,[]],[329,322],[331,322],[-1,-1,[]],[[[2,[333,330]]],322],[330,322],[333,322],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,0,[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],0,0,0,0,[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[328,89],0,0,0,0,[[64,321],320],[[64,321],329],[[321,263],330],[[328,[21,[89]],263],331],[64,333],[[333,321],2],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[320,[[6,[89]]]],[329,[[6,[89]]]],[330,[[6,[89]]]],[331,[[6,[89]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[321,[[16,[320]]]],[-1,[[16,[-2]]],[],[]],[321,[[16,[329]]]],[321,[[16,[330]]]],[-1,[[16,[-2]]],[],[]],[321,[[16,[331]]]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[321,[[6,[322]]]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,134,[]],[[-1,263,321],[[41,[[23,[40]]]]],[]],0,[[[24,[[334,[[326,[[23,[223]]]]]]]],[24,[[334,[[327,[[23,[223]]]]]]]],91,[24,[-1]],[21,[14]],[24,[136]]],[[6,[2]]],335],[-1,[[41,[[23,[40]]]]],[]],[-1,[[41,[[23,[40]]]]],[]],[-1,[[41,[[23,[40]]]]],[]],[[-1,320],[[41,[[23,[40]]]]],[]],[[91,[24,[-1]],[21,[14]],[24,[136]]],[[6,[2]]],335],[[-1,336],[[41,[[23,[40]]]]],[]],[[-1,263,321],[[41,[[23,[40]]]]],[]],[[[23,[216]],[24,[-1]],[21,[14]],[24,[136]]],[[6,[2]]],335],[-1,[[41,[[23,[40]]]]],[]],[[-1,336],[[41,[[23,[40]]]]],[]],0,0,0,0,0,0,0,0,0,0,0,[[-1,1],2,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[321,321],[[-1,-2],2,[],[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[[321,321],22],[[321,47],[[16,[2,337]]]],[321,[[16,[89,174]]]],[[321,-1],[[16,[2,35]]],45],[234,321],[235,321],[[[10,[321]]],321],[331,321],[233,321],[338,321],[2,321],[330,321],[221,321],[237,321],[232,321],[[[80,[89,321]]],321],[236,321],[329,321],[339,321],[320,321],[-1,-1,[]],[89,321],[230,321],[231,321],[22,321],[64,[[16,[321]]]],[321,[[21,[-1]]],340],[321,[[21,[-1]]],341],[[321,64]],[[321,14]],[[321,14]],[[321,64]],[[],14],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[321,22],[321,22],[321,22],[321,22],[321,22],[321,22],[[[67,[[2,[64,321]]]]],321],[64,321],[[],[[16,[26,27]]]],[[]],[321,[[16,[89,174]]]],[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[[321,-1],[[16,[2,35]]],45],0,0,0,0,0,0,0,[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[343,[342]],[344,[62]],239],296],[[[343,[342]],[344,[62]],239],296],[[[343,[342]],[344,[62]],239],152],[[[343,[342]],[344,[62]],239],296],[[[343,[342]],[344,[62]],239],296],[[[343,[342]],[344,[62]],239],296],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[-1,-1,[]],[[],14],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[],[[16,[26,27]]]],[[61,[67,[62]]],345],[[]],0,[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[[[343,[342]],[344,[62]],239],296],[[[343,[342]],[344,[62]],239],296],[[[343,[342]],[344,[62]],239],2],[[[343,[342]]],18],[[[343,[342]]],18],[[[343,[342]]],18],[[[343,[342]],[344,[62]],239],152],[[[343,[342]],239],152],[[[343,[342]],18],152],[[[343,[342]]],18],[[[343,[342]]],18],[[[343,[342]],[344,[62]],239],152],[[[343,[342]],[344,[62]],239],152],0,[[-1,[9,[62]],239],[[6,[2]]],[]],0,0,0,0,0,0,0,0,0,0,[[-1,1],2,[]],[[346,[9,[62]]],[[6,[2]]]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[346,347,[9,[62]]],[[6,[[10,[62]]]]]],[347,347],[[-1,-2],2,[],[]],0,0,0,0,[[346,[9,[62]]],[[6,[2]]]],0,0,[[346,[9,[62]]],[[6,[2]]]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[14,2],[14,2],[[347,347],22],[[346,[9,[62]]],[[6,[[10,[62]]]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[346,89],[346,18],[[],14],[[],14],[[],14],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],0,[342,348],0,[[342,-1],349,350],[[346,[9,[62]]],[[6,[[10,[62]]]]]],[347,64],[[[9,[62]],17,61,351],[[6,[346]]]],0,[[]],[[]],[[]],[346,2],[346,[[6,[2]]]],[[61,[9,[62]]],[[10,[62]]]],[[346,239],[[6,[352]]]],0,[346,348],0,[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,[18,2],0,0,[18,2],[[],2],0,0,0,0,0,0,[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],353],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[14,2],[14,2],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],14],[[],14],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[-1,[],[]],[-1,[],[]],0,[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],353],[353,2],[[]],[[]],[[]],[[[41,[354]],355],356],[353,2],0,0,[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[353,354],0,0,[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[357,[-1]]],[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[-1,-1,[]],[[[357,[-1]],[24,[-1]]],2,[]],[[],14],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[],[[16,[26,27]]]],[[],[[357,[-1]]],[]],[[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[[[357,[-1]]],[[24,[-1]]],[]],[-1,-2,[],[]],0,0,0,[-1,11,[]],[-1,11,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[[358,358],22],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[-1,-1,[]],[[-1,-2],18,[287,248],288],[[358,-1],2,289],[[],14],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[],[[16,[26,27]]]],[[],[[24,[358]]]],0,[[]],0,0,[[[24,[358]],-1,-2,-3,[24,[136]]],2,[40,44],[359,44],[159,44]],[358,2],0,[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],0,0,0,0,0,[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[14,2],[[[219,[-1]],47],48,250],[[[360,[-1]],47],48,250],[-1,-1,[]],[-1,-1,[]],[[[219,[-1]]],361,362],0,[[],14],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[24,[[360,[-1]]]]],362],[[[360,[-1]],-1],2,362],[[[360,[-1]],-1,[9,[361]]],2,362],0,0,[[]],[[]],0,[[],361],[[[219,[-1]]],-1,362],0,0,[[[24,[[360,[-1]]]]],[[219,[-1]]],362],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[[[219,[-1]]],2,362],[[[24,[[360,[-1]]]],361],2,362],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[-1,1],2,[]],0,[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,159,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[166,166],[[-1,-2],2,[],[]],0,[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[14,2],[14,2],[[166,166],22],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[[363,[-1,-2]],47],48,[40,250],250],[[166,47],48],[[166,47],48],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,[[],14],[[],14],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[[283,-1],[[39,[-2]]],40,[]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[-1,283],[[364,[-1]]],[]],[[]],[[]],[[]],[[[41,[[363,[-1,-2]]]],355],356,40,[]],[[[41,[[364,[-1]]]],355],356,40],[[283,-1],[[16,[-2,166]]],40,[]],0,[-1,-2,[],[]],[-1,89,[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[[[41,[-1]],355],356,[]],[[[41,[-1]],355],356,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[-1,1],2,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[8,8],[[-1,-2],2,[],[]],[[8,-1,[9,[57]]],[[6,[[10,[54]]]]],[365,366]],[-1,[[16,[8,35]]],36],[-1,[[41,[[23,[40]]]]],[42,43,44]],[[],8],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[[8,-1],[[16,[14,35]]],45],[[8,-1],[[41,[[23,[40]]]]],[46,43,44]],[[8,8],22],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[8,47],48],[-1,-1,[]],[8,[[6,[5]]]],[[],14],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[],[[16,[26,27]]]],[[]],0,0,[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[[8,[10,[[10,[130]]]]],[[6,[2]]]],[[8,[80,[[67,[62]],[80,[89,66]]]],[10,[[10,[[2,[89,[10,[71]]]]]]]]],[[6,[2]]]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],367],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[64,89],[64,89],[[],89],[367,2],[-1,-1,[]],[62,368],[62,369],[[367,18],2],[[],14],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[],[[16,[26,27]]]],[[],367],[[]],[367,18],0,[[317,[9,[62]]],[[6,[2]]]],0,[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],0,0,0,0,[64,[[21,[[10,[62]]]]]],[[22,[9,[62]]],89],0,0,0,0,0,0,0,0,[64,[[21,[[10,[62]]]]]],[[[9,[62]]],89],0,0,[317,[[6,[89]]]],[317,[[6,[321]]]],[[317,64],[[6,[2]]]],[[317,321,22],[[6,[2]]]],[[64,14,22],[[6,[18]]]],[[18,14],89],[[],[[21,[212]]]],[64,[[6,[212]]]],[[[21,[89]],64],[[6,[212]]]],[[],[[21,[212]]]],[[],[[21,[370]]]],[370,[[21,[212]]]],[317,[[6,[212]]]],[212,[[6,[89]]]],0,0,0,[-1,11,[]],[-1,11,[]],[-1,366,[]],[-1,-2,[],[]],[-1,-2,[],[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[[371,[9,[62]]],2],[-1,-1,[]],[[-1,14],372,[]],[[-1,372,372],372,[]],[[-1,14],373,[]],[[-1,373],373,[]],[[-1,373,373],373,[]],[[-1,14],373,[]],0,[[],14],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[],[[16,[26,27]]]],[18,371],[371,239],[371,239],[371,18],[[]],[-1,[[374,[-2]]],[],[]],0,[[371,[9,[62]]],[[16,[2,375]]]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],0,[[-1,1],2,[]],[-1,11,[]],[-1,11,[]],[[[376,[-1]]],[[21,[-1]]],[377,378,362]],[-1,-2,[],[]],[-1,-2,[],[]],[[[376,[-1]]],[[376,[-1]]],362],[[-1,-2],2,[],[]],[[[376,[-1]],-1],22,[377,378,362]],[[],[[376,[-1]]],379],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[[[376,[-1]],[376,[-1]]],22,378],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[[376,[-1]],47],48,250],[-1,-1,[]],[[[376,[-1]],14],-1,[]],[[],14],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[376,[-1]]],22,[377,378,362]],[[[376,[-1]]],[[380,[-1]]],[377,378,362]],[[],[[16,[26,27]]]],[[[376,[-1]]],14,[377,378,362]],[[[376,[-1]]],[[9,[-1]]],[377,378,362]],[[],[[376,[-1]]],[377,378,362]],[[]],[[[376,[-1]]],[[21,[-1]]],[377,378,362]],[[[376,[-1]],-1],2,[377,378,362]],[-1,-2,[],[]],[[[376,[-1]]],[[10,[-1]]],[377,378,362]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[70,18],2],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[351,18],[381,18],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[351,351],[381,381],[70,70],[382,382],[383,383],[384,384],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[351,351],[381,381],[351,18],[381,18],[351,18],[381,18],[[],70],[[],382],[383,384],0,0,[-1,[[16,[70,35]]],36],[-1,[[16,[382,35]]],36],[-1,[[41,[[23,[40]]]]],[42,43,44]],[-1,[[41,[[23,[40]]]]],[42,43,44]],[[],383],[[],384],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[70,18],[[70,-1],[[16,[14,35]]],45],[[382,-1],[[16,[14,35]]],45],[[70,-1],[[41,[[23,[40]]]]],[46,43,44]],[[382,-1],[[41,[[23,[40]]]]],[46,43,44]],0,[[70,70],22],[[382,382],22],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[70,47],48],[[70,47],48],[[382,47],48],[[382,47],48],[[383,47],48],[[383,47],48],[[384,47],48],[[384,47],48],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[18,239],383],0,[[-1,-2],18,[287,248],288],[[70,-1],2,289],0,[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],0,0,0,0,[[70,18,18,18],351],[[70,18,18,18],381],[[],383],[[351,18],18],[[381,18],18],[[351,18],18],[[381,18],18],[[70,70],[[21,[155]]]],[[382,382],[[21,[155]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[351,18],18],[[381,18],18],0,[[351,18],18],[[381,18],18],0,[[351,18],18],[[381,18],18],[351,[[6,[18]]]],[381,[[6,[18]]]],0,[[18,385],89],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,89,[]],[-1,89,[]],[-1,89,[]],[-1,89,[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],0,[351,18],[381,18],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,[[-1,1],2,[]],[[386,[9,[4]]],[[6,[2]]]],[[386,8,18,62,22],[[6,[2]]]],[[386,[9,[8]],18,22],[[6,[2]]]],0,[[386,4],[[6,[2]]]],[[386,8],[[6,[2]]]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[387,387],[[-1,-2],2,[],[]],0,0,[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[14,2],0,[386,[[6,[[10,[4]]]]]],0,0,[-1,-1,[]],[-1,-1,[]],0,0,[[],14],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[28,387],[[6,[388]]]],[[351,14,14,14,4,18,[10,[130]],22],387],0,0,[[]],[[]],0,0,0,0,[386,[[6,[2]]]],[[386,20],[[6,[2]]]],0,0,0,0,[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],0,[[386,18,[10,[130]],14,14],[[6,[2]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[[-1,1],2,[]],[[-1,1],2,[]],[[389,49],[[6,[2]]]],[[390,5,22],[[6,[2]]]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[389,[[6,[[10,[14]]]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[49,49],[390,390],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[-1,[[16,[49,35]]],36],[-1,[[41,[[23,[40]]]]],[42,43,44]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[14,2],[14,2],[[49,-1],[[16,[14,35]]],45],[[49,-1],[[41,[[23,[40]]]]],[46,43,44]],[389,[[6,[[10,[4]]]]]],0,[[389,49],[[6,[[2,[390,[21,[14]]]]]]]],[[389,49],[[6,[[2,[14,14]]]]]],[[49,47],48],0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[390,[[6,[390]]]],[389,[[6,[2]]]],[[390,18,18,[9,[5]],[9,[5]]],[[6,[2]]]],[389,[[6,[2]]]],[390,[[6,[2]]]],[[389,390,8,57],[[6,[49]]]],[[389,390,8],[[6,[4]]]],[390,[[6,[71]]]],0,[[],14],[[],14],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[390,[[6,[49]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],0,0,0,[[7,351,14,14,14,22],[[6,[389]]]],[4,[[6,[49]]]],[[7,391],[[6,[390]]]],0,0,[[]],[[]],[[]],[[389,18],[[6,[[2,[18,[10,[5]],[10,[5]]]]]]]],0,[[390,22],[[6,[18]]]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[[390,7,351],[[6,[[10,[8]]]]]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,[[-1,1],2,[]],0,0,0,0,0,0,0,0,0,[392,392],[[392,392],392],[[392,392],2],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[71,157],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[392,392],[[-1,-2],2,[],[]],[14,-1,[]],[14,-1,[]],[393,392],[394,392],[14,-1,[]],[395,392],[14,-1,[]],[396,392],[14,-1,[]],[14,-1,[]],[397,392],[398,392],[14,-1,[]],[14,-1,[]],[399,392],[14,-1,[]],[400,392],[14,-1,[]],[401,392],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[392,392],392],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[[392,392],22],[392,71],[392,157],[[392,47],48],[[392,47],48],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[392,392],[[392,392],392],[[392,392],[[21,[155]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[392,392],392],[392,156],[[392,392],392],[392,339],[-1,-2,[],[]],[-1,89,[]],[64,[[16,[392]]]],[152,[[16,[392]]]],[18,[[16,[392]]]],[339,[[16,[392]]]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[20,18],[[2,[392,392]]]],[[392,392],[[2,[71,71]]]],[402,392],[14,-1,[]],[403,392],[14,-1,[]],[14,-1,[]],[404,392],[14,-1,[]],[405,392],[14,-1,[]],[406,392],[407,392],[14,-1,[]],[408,392],[14,-1,[]],[409,392],[14,-1,[]],[410,392],[14,-1,[]],[411,392],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[20,18],[[2,[339,339,71,71]]]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[[-1,1],2,[]],[[391,18,56],2],[[391,17,38],[[6,[2]]]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[391,391],[[-1,-2],2,[],[]],0,[[391,14],[[6,[[2,[14,14]]]]]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],0,[14,2],[[391,47],48],[-1,-1,[]],[[],14],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[],[[16,[26,27]]]],[[391,4,[324,[2]]],[[6,[2]]]],[[7,14,14],[[6,[391]]]],[391,[[6,[56]]]],[391,[[6,[56]]]],[[]],0,0,0,[-1,-2,[],[]],[-1,89,[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[[391,4],[[6,[2]]]],[[391,4],[[6,[2]]]],[[391,18],22],[[391,56],[[6,[22]]]],[[391,18],22],[-1,-2,[],[]],[[4,4,22],[[6,[18]]]],[[17,351,[10,[130]]],[[6,[2]]]],[[[9,[8]]],[[6,[18]]]],[[18,18],18],[[[10,[18]]],18],[[4,4,18,391],[[6,[2]]]],[[7,14,14],[[6,[2]]]],[[4,4,18],[[6,[2]]]],[[20,20,5,5,71,18],[[6,[2]]]],[[4,4,18,391],[[6,[2]]]],[[20,20,5,5,71,18],[[6,[2]]]],[[17,351,391,4,4,18,22],[[6,[2]]]],[[17,351,4,18],[[6,[2]]]],[[389,49],[[6,[[2,[390,[21,[14]]]]]]]],[[389,49],[[6,[[2,[390,[21,[14]]]]]]]],[[4,130],[[6,[2]]]],[[17,351,8,62],[[6,[130]]]],[[389,49],[[6,[[2,[390,[21,[14]]]]]]]],[[17,351,8,[80,[[67,[62]],[80,[89,66]]]]],[[6,[2]]]],[[17,351,[9,[8]]],[[6,[[10,[8]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[14,2],[14,2],[[412,64],[[6,[2]]]],[[413,47],48],[-1,-1,[]],[62,414],[-1,-1,[]],[-1,-1,[]],[412,[[41,[[23,[40]]]]]],[[],14],[[],14],[[],14],[413,[[21,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[[21,[212]],[21,[64]]],[[6,[153]]]],0,[[]],[[]],[[]],0,[[412,64,[10,[64]],[21,[[10,[[2,[64,413]]]]]]],[[6,[[10,[413]]]]]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,[[-2,[416,[415]],[417,[-3]]],[[16,[[418,[-3,-1]],195]]],419,[[420,[-1]]],421],0,0,[[-1,[10,[422]],[10,[71]]],2,[[213,[317]]]],0,0,0,0,0,0,[[423,65,[10,[71]]],[[6,[2]]]],[[-1,[10,[422]],[10,[71]]],2,[[213,[317]]]],[[423,65,[10,[71]]],[[6,[2]]]],0,0,0,0,0,0,0,0,0,0,[[-1,1],2,[]],0,0,[[-1,-3,[418,[-2,-2]],[418,[-2,-2]]],[[16,[[418,[-2,-2]],195]]],[],[],[[420,[-2]]]],[[[424,[-1]],-2,[418,[-1,-1]],[418,[-1,-1]]],[[16,[[418,[-1,-1]],195]]],[425,426],[[420,[-1]]]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[427,427],[[-1,-2],2,[],[]],[[[424,[-1]]],[],[425,426]],0,[[[428,[-1]],[416,[415]],[416,[415]],[416,[415]]],427,[425,426]],[427,[[424,[-1]]],[425,426]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[14,2],[[427,47],48],[-1,-1,[]],[-1,-1,[]],[[],14],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[[424,[-1]]],[],[425,426]],[[-1,-3,[418,[-2,-2]],[418,[-2,-2]]],[[16,[[418,[-2,-2]],195]]],[],[],[[420,[-2]]]],[[[424,[-1]],-2,[418,[-1,-1]],[418,[-1,-1]]],[[16,[[418,[-1,-1]],195]]],[425,426],[[420,[-1]]]],[[]],[[]],0,0,0,[[-1,-3,[418,[-2,-2]],[418,[-2,-2]]],[[16,[[418,[-2,-2]],195]]],[],[],[[420,[-2]]]],[[[424,[-1]],-2,[418,[-1,-1]],[418,[-1,-1]]],[[16,[[418,[-1,-1]],195]]],[425,426],[[420,[-1]]]],[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[-1,1],2,[]],0,0,0,[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[429,[-1]]],[[429,[-1]]],[362,425,426]],[[-1,-2],2,[],[]],[[[430,[-1]],-2,[418,[-1,-1]],[418,[-1,-1]],[418,[-1,-1]]],[[16,[[418,[-1,-1]],195]]],[425,426],[[420,[-1]]]],[[[430,[-1]]],[],[425,426]],0,[[[428,[-1]],[67,[[416,[415]]]]],[],[425,426]],[[],[[430,[-1]]],[425,426]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[14,2],[[[429,[-1]],47],48,[250,425,426]],[-1,-1,[]],[-1,-1,[]],[[],14],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[[430,[-1]]],[],[425,426]],[[]],[[]],0,[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[-1,1],2,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[[[431,[-1]],[432,[-1]],14,[417,[-1]]],[[16,[2,195]]],[425,426]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[433,[-1]]],[[433,[-1]]],362],[[-1,-2],2,[],[]],0,[[[428,[-1]],-2,-3,[416,[415]]],[[433,[-1]]],[425,426],359,359],[[[433,[-1]]],[[431,[-1]]],[425,426]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[14,2],[[[433,[-1]]],[[434,[-1]]],[425,426]],[[[433,[-1]],47],48,250],[-1,-1,[]],[-1,-1,[]],[[],14],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],0,[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[]],[[]],[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[-1,1],2,[]],[[-1,1],2,[]],0,0,[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[435,435],[436,436],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[436],0,[[[428,[71]],[416,[415]],[416,[415]],[416,[415]],[416,[415]],[416,[415]],437],435],[435,436],[[436,-1,[418,[71,71]],[418,[71,71]],14,22],[[16,[2,195]]],[[420,[71]]]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[14,2],[[435,47],48],[[436,47],48],[-1,-1,[]],[-1,-1,[]],[[],14],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],0,[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[436,[432,[71]],[418,[71,71]],[418,[71,71]],14,22],[[16,[[418,[71,71]],195]]]],[[436,-1,[418,[71,71]],[418,[71,71]]],[[16,[2,195]]],[[420,[71]]]],[436],[[]],[[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[436,-1,[417,[71]],[417,[71]],14,22],[[16,[2,195]]],[[420,[71]]]],0,0,[[-1,1],2,[]],[[-1,1],2,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[438,438],[439,439],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[439],0,[[[428,[71]],[416,[415]],437],438],[438,439],[[439,-1,[418,[71,71]]],[[16,[2,195]]],[[420,[71]]]],[[439,[432,[71]],[418,[71,71]],14],[[16,[2,195]]]],[71,[[10,[[67,[22]]]]]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[14,2],[[438,47],48],[[439,47],48],[-1,-1,[]],[-1,-1,[]],[[],14],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],0,[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[-1,437],[[16,[2,195]]],[[420,[71]]]],[439],[[]],[[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[439,-1,[417,[71]]],[[16,[2,195]]],[[420,[71]]]],0,0,0,[[-1,1],2,[]],[[-1,1],2,[]],0,[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[440,440],[[[441,[-1]]],[[441,[-1]]],362],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[441,[-1]]],[],[425,426]],0,[[[428,[-1]],[416,[415]],62],440,[425,426]],[440,[[441,[-1]]],[425,426]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[14,2],[[440,47],48],[[[441,[-1]],47],48,250],[-1,-1,[]],[-1,-1,[]],[[],14],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[[441,[-1]]],[],[425,426]],[[]],[[]],[[[434,[-1]],62],[[434,[-1]]],[425,426]],0,[[[441,[-1]],-2,[418,[-1,-1]]],[[16,[2,195]]],[425,426],[[420,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[-1,1],2,[]],[[-1,1],2,[]],0,0,[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[[[442,[-1]],-2,[418,[-1,-1]],[418,[-1,-1]]],[[16,[[418,[-1,-1]],195]]],[425,426],[[420,[-1]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[443,[-1]]],[[443,[-1]]],362],[[[442,[-1]]],[[442,[-1]]],[362,425,426]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[[[428,[-1]],[67,[[416,[415]]]]],[[443,[-1]]],[425,426]],[[[443,[-1]]],[[442,[-1]]],[425,426]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[14,2],[[[443,[-1]],47],48,250],[[[442,[-1]],47],48,[250,425,426]],[-1,-1,[]],[-1,-1,[]],[[],14],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],0,[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],0,[[]],[[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],0,[[[417,[-1]],[417,[-1]]],[],[]],[[[417,[-1]],[417,[-1]]],[],[]],[[[417,[[444,[-1]]]],[417,[-1]]],[],419],[[[417,[-1]],[417,[-1]]],[],[]],[[[417,[-1]],[417,[-1]]],[],445],[[[417,[-1]],[417,[-1]]],[],[]],[[[417,[[444,[-1]]]],[417,[-1]]],[],419],[[[417,[-1]],[417,[-1]]],[],[]],[[[417,[[444,[-1]]]],-1],[],419],[[[417,[[444,[-1]]]],-1],[],419],[[[444,[-1]],-1],[[444,[-1]]],419],[[[444,[-1]],-1],[[444,[-1]]],419],[[[444,[-1]],[444,[-1]]],[[444,[-1]]],419],[[[444,[-1]],[444,[-1]]],[[444,[-1]]],419],[[[444,[-1]],[444,[-1]]],[[444,[-1]]],419],[[[444,[-1]],[444,[-1]]],[[444,[-1]]],419],[[[444,[-1]],[444,[-1]]],2,419],[[[444,[-1]],[444,[-1]]],2,419],[[[417,[-1]],-2],[[417,[-3]]],[],359,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[[[417,[-1]]],[[417,[-1]]],[]],[[[417,[-1]]],[[417,[-1]]],[]],[[[417,[-1]],-2],2,[],359],[[-1,-2,-3],[[16,[-4,195]]],[],264,446,[]],[[-1,-2,-3],[[16,[2,195]]],[],264,446],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[418,[-1,-1]]],447,419],[[[418,[-1,-2]]],447,[],419],0,[[[417,[-1]]],[[417,[-1]]],362],[[[418,[-1,-2]]],[[418,[-1,-2]]],362,[362,419]],[[[444,[-1]]],[[444,[-1]]],362],[[[416,[-1]]],[[416,[-1]]],[362,448]],[415,415],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[417,[-1]]],[[417,[-1]]],362],[[[417,[-1]]],[[417,[-1]]],362],[[[416,[-1]],[416,[-1]]],155,448],[[[416,[-1]]],-1,448],0,[[-1,-2],155,[],[]],[[-1,447,[416,[449]],14],[[16,[2,195]]],[]],[[[417,[-1]]],[[417,[-1]]],421],[[[417,[-1]]],[[417,[-1]]],421],[[[418,[-1,-2]],-3,[432,[-2]],[416,[415]],14],[[16,[[418,[-1,-2]],195]]],362,419,264],[-1,-1,[]],[[[417,[-2]]],[[417,[[444,[-1]]]]],419,[[450,[[444,[-1]]]]]],[[[444,[-1]]],[[444,[-1]]],419],[[],[[417,[-1]]],[]],[[[444,[-1]]],[[21,[-1]]],419],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],0,[-1,-1,[]],[[[417,[-2]]],[[417,[[444,[-1]]]]],419,[[450,[[444,[-1]]]]]],[[[444,[-1]]],[[444,[-1]]],419],[14,2],[14,2],[14,2],[14,2],[14,2],[[[444,[-1]],[444,[-1]]],22,419],[[[416,[-1]],[416,[-1]]],22,[378,448]],[[415,415],22],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[[417,[-1]],-2],[[16,[2,195]]],[],359],[[[417,[[444,[-1]]]]],[[417,[-1]]],419],[[[418,[[444,[-1]],-1]]],[[418,[-1,-1]]],419],[[[444,[-1]]],-1,419],[[[417,[-1]],47],[[16,[2,337]]],250],[[[418,[-1,-2]],47],[[16,[2,337]]],250,[250,419]],[[[444,[-1]],47],[[16,[2,337]]],250],[[[416,[-1]],47],[[16,[2,337]]],[250,448]],[[415,47],[[16,[2,337]]]],[-1,-1,[]],[[[417,[-1]]],[[417,[[444,[-1]]]]],419],[[[451,[-1]]],[[418,[-1,-1]]],419],[-1,-1,[]],[-1,-1,[]],[[[2,[-1,-1]]],[[444,[-1]]],419],[-1,[[444,[-1]]],419],[[[444,[-1]]],[[444,[-1]]],419],[-1,[[444,[-1]]],419],[[[416,[452]]],[[416,[453]]]],[[[416,[449]]],[[416,[453]]]],[-1,-1,[]],[[[416,[415]]],[[416,[453]]]],[-1,-1,[]],[-1,[[417,[-3]]],454,[],[[455,[-2]]]],[[-1,-2],18,[287,248],288],[[-1,-2],18,[287,248],288],[-1,[],[]],[[[416,[-1]],-2],2,[287,448],289],[[415,-1],2,289],0,[[],14],[[],14],[[],14],[[],14],[[],14],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[417,[-2]]],[[417,[[444,[-1]]]]],419,[[456,[[444,[-1]]]]]],[-1,[[457,[-1]]],[]],[[[417,[-2]]],[[417,[[444,[-1]]]]],419,[[450,[[444,[-1]]]]]],[[[444,[-1]]],[[444,[-1]]],419],[-1,458,[]],[-1,22,[]],[[[444,[-1]]],22,419],[-1,[[417,[-1]]],[]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[[417,[-1]],-2],[[417,[-3]]],[],359,[]],[[[417,[-1]],[417,[-1]]],[],[]],[[[417,[-1]],[417,[-1]]],[],[]],[[[417,[-1]],[417,[-1]]],[],459],[[[417,[-1]],[417,[-1]]],[],[]],[[[417,[[444,[-1]]]],[417,[-1]]],[],419],[[[417,[[444,[-1]]]],-1],[],419],[[[417,[[444,[-1]]]],[417,[-1]]],[],419],[[[417,[[444,[-1]]]],-1],[],419],[[[417,[-1]],[417,[-1]]],[],[]],[[[417,[-1]],[417,[-1]]],[],[]],[[[444,[-1]],[444,[-1]]],[[444,[-1]]],419],[[[444,[-1]],-1],[[444,[-1]]],419],[[[444,[-1]],[444,[-1]]],[[444,[-1]]],419],[[[444,[-1]],-1],[[444,[-1]]],419],[[[444,[-1]],[444,[-1]]],2,419],[[[444,[-1]],[444,[-1]]],2,419],[[-1,-2],[[460,[-3]]],[],359,[]],[[[417,[-1]]],[],461],[[[444,[-1]]],[],419],[[[444,[-1]]],[],419],[[[444,[-1]]],-1,419],[[[416,[-1]],[416,[-1]]],[[21,[155]]],448],0,[[]],[[]],[[]],[[]],[[]],[[-1,[21,[89]]],2,[]],[[-1,-2],-1,[],[[213,[[9,[18]]]]]],[[-1,-2],-1,[],[[213,[[9,[18]]]]]],[[-1,-2],2,[],359],[-1,-2,366,[]],[-1,[[457,[-1]]],[]],[-1,[[2,[458,-1]]],[]],[[-1,-1],[[2,[458,-1]]],[]],[-1,-1,[]],[[[417,[-2]]],[[417,[[444,[-1]]]]],419,[[450,[[444,[-1]]]]]],[[[444,[-1]]],[[444,[-1]]],419],[[[417,[[444,[-1]]]],-1],[],419],[[[417,[[444,[-1]]]],-1],[],419],[[[417,[-1]],[417,[-1]]],[],[]],[[[417,[-1]],[417,[-1]]],[],[]],[[[417,[-1]],[417,[-1]]],[],462],[[[417,[[444,[-1]]]],[417,[-1]]],[],419],[[[417,[-1]],[417,[-1]]],[],[]],[[[417,[[444,[-1]]]],[417,[-1]]],[],419],[[[417,[-1]],[417,[-1]]],[],[]],[[[417,[-1]],[417,[-1]]],[],[]],[[[444,[-1]],[444,[-1]]],[[444,[-1]]],419],[[[444,[-1]],[444,[-1]]],[[444,[-1]]],419],[[[444,[-1]],[444,[-1]]],[[444,[-1]]],419],[[[444,[-1]],-1],[[444,[-1]]],419],[[[444,[-1]],[444,[-1]]],[[444,[-1]]],419],[[[444,[-1]],-1],[[444,[-1]]],419],[[[444,[-1]],[444,[-1]]],2,419],[[[444,[-1]],[444,[-1]]],2,419],[[[417,[-1]]],[[417,[[444,[-2]]]]],[],419],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[417,[[67,[-1]]]]],[[67,[[417,[-1]]]]],421],[[[417,[-1]],14],[[10,[[417,[-2]]]]],454,[]],[-1,[[16,[-2]]],[],[]],[463,[[16,[[417,[121]]]]]],[463,[[16,[[417,[239]]]]]],[463,[[16,[[417,[[67,[71]]]]]]]],[-1,[[16,[-2]]],[],[]],[463,[[16,[[418,[71,71]]]]]],[-1,[[16,[-2]]],[],[]],[[[416,[453]]],[[16,[[416,[415]]]]]],[-1,[[16,[-2]]],[],[]],[[[416,[453]]],[[16,[[416,[449]]]]]],[[[416,[453]]],[[16,[[416,[452]]]]]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[[],[[417,[-1]]],[]],[[[417,[[2,[-1,-2]]]]],[[2,[[417,[-1]],[417,[-2]]]]],[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[[[417,[-1]]],[[417,[-1]]],419],[[[418,[-1,-1]]],[[417,[-1]]],419],[[[418,[-1,-1]]],[[417,[-1]]],419],[[[418,[-1,-2]]],[[417,[-1]]],[],419],0,[[[418,[-1,-2]]],[[417,[[444,[-2]]]]],[],419],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[417,[-1]],[417,[-2]]],[[417,[[2,[-1,-2]]]]],[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[[[464,[-1]]],2,[419,426]],[[[464,[-1]],-2,[416,[415]],14,-3],[[16,[2,195]]],419,359,359],[[[464,[-1]],-2,[416,[452]],14,-3],[[16,[2,195]]],419,359,359],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],465],[[[464,[-1]],[416,[453]],14,[416,[453]],14],[[16,[2,195]]],419],0,0,0,[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[[[464,[-1]],-2,466,14],[[16,[2,195]]],419,359],[[[464,[-1]],-2],2,419,359],[[467,467],22],[[468,468],22],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[[464,[-1]]],2,419],[[[464,[-1]],[416,[452]],14,[417,[[444,[-1]]]]],[[16,[2,195]]],419],0,0,[[467,47],[[16,[2,337]]]],[[467,47],[[16,[2,337]]]],[[468,47],[[16,[2,337]]]],[[468,47],[[16,[2,337]]]],[[[469,[-1,-2]],47],[[16,[2,337]]],[250,470],[250,471]],[[465,47],[[16,[2,337]]]],[[465,47],[[16,[2,337]]]],[[[472,[-1]],47],[[16,[2,337]]],[250,473]],[[[464,[-1]],47],[[16,[2,337]]],[250,419]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],0,0,[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],0,[[[469,[-1,-2]]],[[474,[-1]]],470,471],0,0,0,0,[[239,-1],[[469,[-2,-1]]],471,470],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[464,[-1]],[21,[89]]],2,419],[[[469,[-1,-2]],14],[[475,[-1]]],470,471],[[[464,[-1]],-2],2,419,359],[465,89],[[[464,[-1]],[416,[449]],14],[[16,[[417,[-1]],195]]],419],0,[[239,-2,[10,[[10,[-1]]]]],[[16,[[464,[-1]],195]]],[419,426],[[471,[-1]]]],0,[[-2,-3,[10,[[416,[452]]]]],[[16,[2,195]]],419,[[476,[-1]]],[[471,[-1]]]],[-1,89,[]],[-1,89,[]],[-1,89,[]],0,0,0,[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],0,[[[464,[-1]]],[[16,[2,[10,[468]]]]],[419,426]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[14,2],0,0,0,0,[[[474,[-1]],47],[[16,[2,337]]],[250,470]],[[[475,[-1]],47],[[16,[2,337]]],[250,470]],[-1,-1,[]],[-1,-1,[]],[[-1,[477,[-2,-3]]],21,[],[],[]],[[-1,[477,[-2,-3]]],21,[],[],[]],[[-1,[477,[-2,-3]]],21,[],[],[]],[[-1,[477,[-2,-3]]],21,[],[],[]],[[-1,[477,[-2,-3]]],[],[],[],[]],[[-1,[477,[-2,-3]]],[],[],[],[]],[[-1,[477,[-2,-3]]],[],[],[],[]],[[-1,[477,[-2,-3]]],[],[],[],[]],[[-1,[477,[-2,-3]]],[],[],[],[]],[[-1,[477,[-2,-3]]],[],[],[],[]],[[-1,[477,[-2,-3]]],[],[],[],[]],[[-1,[477,[-2,-3]]],[],[],[],[]],[[],14],[[],14],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],0,[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],0,[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,[[-1,1],2,[]],[[-1,1],2,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[478,478],[479,479],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[478,478],155],[[480,480],155],0,0,[[-1,-2],155,[],[]],[[-1,-2],155,[],[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[14,2],[14,2],[14,2],[14,2],[[478,478],22],[[480,480],22],[[481,481],22],[[482,482],22],[[479,479],22],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[478,47],[[16,[2,337]]]],[[478,47],[[16,[2,337]]]],[[480,47],[[16,[2,337]]]],[[480,47],[[16,[2,337]]]],[[481,47],[[16,[2,337]]]],[[481,47],[[16,[2,337]]]],[[482,47],[[16,[2,337]]]],[[482,47],[[16,[2,337]]]],[[479,47],[[16,[2,337]]]],[[479,47],[[16,[2,337]]]],[[[416,[453]]],478],[[[2,[453,14]]],478],[-1,-1,[]],[[[2,[478,296]]],480],[[[2,[64,478,296]]],480],[483,480],[-1,-1,[]],[[[2,[14,64]]],481],[-1,-1,[]],[[[2,[481,14,64]]],482],[-1,-1,[]],[[[2,[14,89]]],479],[[[2,[14,64]]],479],[-1,-1,[]],0,0,0,0,0,[[],14],[[],14],[[],14],[[],14],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],0,0,0,0,[[478,478],[[21,[155]]]],[[480,480],[[21,[155]]]],[[]],[[]],[[]],[[]],[[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,89,[]],[-1,89,[]],[-1,89,[]],[-1,89,[]],[-1,89,[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[[434,[-1]],[434,[-1]]],[[434,[-1]]],419],[[[484,[-1]],[10,[[10,[10]]]],[10,[62]]],2,485],[[[428,[-1]]],[[416,[415]]],419],0,0,[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,159,[]],[[-1,-2,[416,[415]],14,-3],[[16,[2,195]]],[],359,359],[[-1,-2,[416,[452]],14,-3],[[16,[2,195]]],[],359,359],0,[[[428,[-1]]],14,419],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[452,452],[449,449],[453,453],[466,466],[486,486],[487,487],[488,488],[437,437],[[[434,[-1]]],[[434,[-1]]],362],[[[428,[-1]]],[[428,[-1]]],[362,419]],[[[489,[-1]]],[[489,[-1]]],[362,485]],[[[490,[-1]]],[[490,[-1]]],[362,485]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[453,453],155],[[437,437],155],0,0,0,0,[[-1,-2],155,[],[]],[[-1,-2],155,[],[]],[[[428,[-1]]],466,419],[[[428,[-1]]],[],[]],[[[428,[-1]]],[],[]],0,0,0,[[-1,[416,[453]],14,[416,[453]],14],[[16,[2,195]]],[]],[[[428,[-1]],64,-2],2,419,359],[[[491,[-1]],[490,[-1]],[9,[-2]],[9,[[9,[9]]]],-3,-5],[[16,[2,195]]],485,471,366,[[492,[-1]]],[[493,[-1,-4]]]],0,0,0,[[],[[428,[-1]]],419],[[],[[484,[-1]]],[379,485]],[[[434,[-1]]],14,419],[[[428,[-1]]],14,419],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],0,0,[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[[466,[432,[-1]],14],[[16,[2,195]]],419],[[[428,[-1]],[416,[452]]],2,419],[[437,[428,[-1]]],2,419],[[[428,[-1]],-2],2,419,[[456,[[416,[453]]]]]],[[-1,-2,466,14],[[16,[2,195]]],[],359],[[-1,-2],2,[],359],[[452,452],22],[[449,449],22],[[453,453],22],[[466,466],22],[[437,437],22],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[[434,[-1]],-2,-3,-4,-5,-6,-7,-8,-9,-10],-11,419,264,264,264,264,264,264,264,264,264,[]],[-1,2,[]],[[-1,[416,[452]],14,[417,[[444,[-2]]]]],[[16,[2,195]]],[],[]],[[[484,[-1]],[491,[-1]],[489,[-1]]],22,485],[[[428,[-1]]],[[416,[452]]],419],0,0,0,0,0,0,0,[[452,47],[[16,[2,337]]]],[[449,47],[[16,[2,337]]]],[[453,47],[[16,[2,337]]]],[[466,47],[[16,[2,337]]]],[[486,47],[[16,[2,337]]]],[[487,47],[[16,[2,337]]]],[[488,47],[[16,[2,337]]]],[[437,47],[[16,[2,337]]]],[[[434,[-1]],47],[[16,[2,337]]],250],[[[494,[-1]],47],[[16,[2,337]]],[250,419]],[[[495,[-1,-2,-3]],47],[[16,[2,337]]],[250,419],[250,[456,[[494,[-1]]]]],[250,454]],[[[428,[-1]],47],[[16,[2,337]]],[250,419]],[[[496,[-1]],47],[[16,[2,337]]],[250,419]],[[[497,[-1]],47],[[16,[2,337]]],[250,419]],[[195,47],[[16,[2,337]]]],[[195,47],[[16,[2,337]]]],[[498,47],[[16,[2,337]]]],[[498,47],[[16,[2,337]]]],[[[484,[-1]],47],[[16,[2,337]]],[250,485]],[[[499,[-1]],47],[[16,[2,337]]],[250,485]],[[[489,[-1]],47],[[16,[2,337]]],[250,485]],[[[500,[-1]],47],[[16,[2,337]]],[250,485]],[[[490,[-1]],47],[[16,[2,337]]],[250,485]],[-1,-1,[]],[-1,-1,[]],[415,453],[449,453],[452,453],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[434,[-1]]],[[494,[-1]]],419],[-1,-1,[]],[[[2,[64,[434,[-1]]]]],[[494,[-1]]],419],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[35,195],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[9,[62]],501],[[16,[[489,[-1]],35]]],502],[[[9,[62]],501],[[16,[[490,[-1]],35]]],502],0,0,[[[489,[-1]]],503,485],[[-1,-2],18,[287,248],288],[[-1,-2],18,[287,248],288],[[-1,-2],18,[287,248],288],[[-1,-2],18,[287,248],288],[[-1,-2],18,[287,248],288],[[[490,[-1]]],[[489,[-1]]],485],[[452,-1],2,289],[[449,-1],2,289],[[453,-1],2,289],[[466,-1],2,289],[[437,-1],2,289],[[[489,[-1]],-3],[[16,[2,35]]],485,[[492,[-1]]],[[504,[-1,-2]]]],0,0,0,0,[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],0,[[[428,[-1]]],[[416,[449]]],419],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[495,[-1,-2,-3]]],[],419,[[456,[[494,[-1]]]]],454],[466,22],0,[[[491,[-1]],[489,[-1]],-2],[[16,[[490,[-1]],195]]],485,471],[[[491,[-1]],-2],[[16,[[489,[-1]],195]]],485,471],0,0,0,[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[[428,[-1]],-2],14,419,359],[[[428,[-1]]],437,419],0,0,0,0,0,[[[428,[-1]]],14,419],0,[[[434,[-1]],-1],[[434,[-1]]],419],[[[434,[-1]],[434,[-1]]],[[434,[-1]]],419],0,[[[434,[-1]]],[],419],[[],[[484,[-1]]],485],[[[491,[-1]]],[[499,[-1]]],485],0,0,0,0,0,0,0,0,0,[-1,[],[]],[[453,453],[[21,[155]]]],[[437,437],[[21,[155]]]],0,0,0,0,0,[[[428,[-1]]],[[496,[-1]]],419],[[[489,[-1]]],[[500,[-1]]],485],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[-1,[21,[89]]],2,[]],[[-1,-2],[[16,[195]]],[],359],[[[499,[-1]],-2],[[16,[195]]],485,359],[[-1,-2],2,[],359],0,0,[[[497,[-1]],[416,[415]],505],[[434,[-1]]],419],[[[497,[-1]],-2,505],[[434,[-1]]],419,[[456,[[416,[453]]]]]],[[[497,[-1]],[416,[452]]],[[434,[-1]]],419],[[-1,[416,[449]],14],[[16,[[417,[-2]],195]]],[],[]],[[[497,[-1]],[416,[449]],505],[[434,[-1]]],419],[[[497,[-1]],466],[[434,[-1]]],419],[[-1,501],[[16,[[489,[-2]],35]]],36,502],[[-1,501],[[16,[[490,[-2]],35]]],36,502],0,0,0,0,[[[428,[-1]]],466,419],0,0,0,[[[428,[-1]],14],2,419],[195,[[21,[159]]]],[[[434,[-1]]],[[434,[-1]]],419],[[[434,[-1]],[434,[-1]]],[[434,[-1]]],419],[[-2,-3,[10,[[416,[452]]]]],[[16,[2,195]]],419,[[476,[-1]]],[[471,[-1]]]],[[-1,-3],[[16,[2,195]]],[],[],[[420,[-2]]]],[[[489,[-1]],501],[[10,[62]]],502],[[[490,[-1]],501],[[10,[62]]],502],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,89,[]],[-1,89,[]],0,[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[[[491,[-1]],[489,[-1]],-2,[9,[[9,[9]]]],-4],[[16,[195]]],485,[[506,[-1]]],[[492,[-1]]],[[507,[-1,-3]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[434,[-1]],-2],[[495,[-1,-3,-2]]],419,454,[[456,[[494,[-1]]]]]],[-1,-1,[]],[[[489,[-1]],-2,501],[[16,[2,35]]],502,45],[[[490,[-1]],-2,501],[[16,[2,35]]],502,45],0,0,0,0,[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,[[508,[-2,-3]]],[],[],509],[124,[[9,[62]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[239,-1],66,[[471,[71]]]],[[239,-1],123,[[471,[71]]]],[66,66],[123,123],[124,124],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[123,[9,[-1]],[9,[71]],-2],[[16,[124,195]]],[[471,[71]]],366],[-1,[[16,[124,35]]],36],[-1,[[41,[[23,[40]]]]],[42,43,44]],[[],124],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[14,2],[14,2],[[124,-1],[[16,[14,35]]],45],[[124,-1],[[41,[[23,[40]]]]],[46,43,44]],[-1,-2,[],[[455,[510]]]],[-1,-2,[],[[455,[510]]]],[[124,124],22],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[66,47],48],[[123,47],48],[[124,47],48],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],14],[[],14],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[[10,[62]]],124],0,0,0,[[]],[[]],[[]],[[-1,-2],[[39,[66]]],36,[[471,[71]]]],[[-1,-2],[[39,[123]]],36,[[471,[71]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[16,[[508,[-2,-3]],[511,[-2]]]]],[],[],509],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[[124,66,[9,[71]]],[[16,[2,195]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[66,-1],[[39,[2]]],45],[[123,-1],[[39,[2]]],45],0,0,0,0,0,[[-1,1],2,[]],[[-1,1],2,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[[512,14],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[512,2],[513,513],[512,512],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[14,2],[[513,47],48],[-1,-1,[]],[-1,-1,[]],[[],14],[512,2],[[],14],0,[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],0,[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[22,512],0,[[]],[[]],[[512,513],2],[[512,[418,[71,71]]],2],[[512,[517,[514,[516,[515]]]]],2],[512,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[518,[[21,[[424,[71]]]]]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[518,[[21,[[441,[71]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[519,519],[518,518],[423,423],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[518,[[21,[[430,[71]]]]]],[[[428,[71]]]],[[[428,[71]]]],0,[[],520],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[14,2],[14,2],[14,2],[518,[[21,[[516,[515]]]]]],[423,2],[[519,47],48],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],14],[[],14],[[],14],[[],14],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[518,[[21,[436]]]],0,[518,[[21,[[523,[521,522,515]]]]]],[518,[[21,[[523,[521,522,515]]]]]],[[[10,[422]],65],423],0,[423],[[]],[[]],[[]],[[]],[518,[[21,[[524,[71]]]]]],0,[518,[[21,[439]]]],[518,[[21,[439]]]],[[423,-1],[[16,[2,195]]],[[420,[71]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[423,423],0,0,[518,[[21,[[442,[71]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,1],2,[]],[[-1,1],2,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[422,422],[463,463],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[14,2],[14,2],[65,[[6,[[10,[422]]]]]],[[463,47],48],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[[],14],[[],14],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[422,64],[[]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[525,[[39,[2]]]],[525,[[39,[2]]]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],0,[-1,-1,[]],0,[[],14],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[],[[16,[26,27]]]],0,[[525,64],[[21,[526]]]],[[525,64],[[21,[527]]]],[[525,64],[[21,[528]]]],[[525,64],[[21,[529]]]],[[64,530,[10,[526]],[10,[529]],[10,[531]]],525],[[],2],[[]],0,[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[526,526],[529,529],[527,527],[532,532],[533,533],[534,534],[531,531],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,0,0,0,[[],531],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[[534,534],22],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[526,47],48],[[529,47],48],[[527,47],48],[[532,47],48],[[528,47],48],[[533,47],48],[[534,47],48],[[531,47],48],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],0,0,0,0,0,[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[535,[[39,[[10,[62]]]]]],0,0,[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],0,[-1,-1,[]],[[],14],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],0,[[],[[16,[26,27]]]],0,[[[9,[64]],64],[[21,[14]]]],[[[9,[532]],64],[[21,[14]]]],0,[[64,530,89,239,[10,[526]],[10,[529]],[10,[531]],[10,[532]],22],535],[[]],0,[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],0,0,0,0,0,0,[[-1,1],2,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[65,65],[[-1,-2],2,[],[]],0,[[[9,[62]]],[[6,[65]]]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[[[9,[62]],[9,[62]]],[[21,[14]]]],[[65,47],48],[-1,-1,[]],[[],14],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],0,[[],[[16,[26,27]]]],0,0,0,[[[9,[62]]],[[6,[[10,[[2,[536,[10,[[2,[537,14]]]]]]]]]]]],[[[9,[62]]],[[6,[[10,[[2,[538,89]]]]]]]],[[[9,[62]]],[[6,[[10,[[2,[539,89]]]]]]]],[[[9,[62]]],[[6,[[10,[538]]]]]],[[]],[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],0,0,[[540,64,14,14],35],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[[540,64,64],2],0,[[540,89,14,14],89],[-1,-1,[]],[[],14],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[],[[16,[26,27]]]],0,0,[[64,64,[10,[89]]],540],[[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[[540,64,14,14],2],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,1],2,[]],[[-1,1],2,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[541,541],[542,542],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[14,2],[14,2],[[541,541],22],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],0,[[541,47],48],[[542,47],48],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],14],[[],14],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[510,22],[510,22],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[543,[[39,[[10,[542]]]]]],0,[[64,530],543],[[64,541,14,14],542],[[]],[[]],[[]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,1],2,[]],[536,[[2,[[10,[538]],[10,[538]]]]]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[536,536],[[-1,-2],2,[],[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[[536,536],22],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[536,47],48],[-1,-1,[]],[64,[[21,[536]]]],[62,[[21,[536]]]],[[-1,-2],18,[287,248],288],[[536,-1],2,289],[[],14],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[],[[16,[26,27]]]],[536,64],[[]],[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[[-1,1],2,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[544,64,[10,[542]]],[[39,[2]]]],[[[545,[-1,-2]]],[[545,[-1,-2]]],362,362],[[-1,-2],2,[],[]],[[[545,[-2,-3]],-1],22,[287,377,248],[[450,[-1]],377,287,44,265,362],[44,265,362]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[14,2],0,[-1,-1,[]],[-1,-1,[]],[[[545,[-2,-3]],-1],[[21,[-3]]],[287,377,248],[[450,[-1]],377,287,44,265,362],[44,265,362]],[[],14],[[],14],[[[545,[-1,-2]],-1,-2],[[21,[-2]]],[377,287,44,265,362],[44,265,362]],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],0,[[64,530,[10,[542]]],544],[[],[[545,[-1,-2]]],[],[]],[-1,[[21,[[2,[-2,-2,-2]]]]],[],[]],[-1,[[21,[[2,[-2,-2,-2,-2]]]]],[],[]],0,[544,[[39,[[2,[89,239,[10,[526]],[10,[529]],[10,[531]]]]]]]],[[544,[10,[[10,[542]]]]],[[39,[[10,[531]]]]]],[[544,[545,[89,[2,[542,542]]]]],[[39,[[10,[526]]]]]],[[544,[545,[89,[2,[542,542]]]]],[[39,[[10,[529]]]]]],[[544,542,[546,[[214,[542]]]]],[[39,[[10,[533]]]]]],[[]],[[]],[[[545,[-1,-2]]],[[10,[[2,[-1,-2]]]]],[377,287,44,265,362],[44,265,362]],[-1,-2,[],[]],0,[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[537,537],[538,538],[539,539],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[14,2],[14,2],[[538,538],22],[[539,539],22],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[537,47],48],[[538,47],48],[[539,47],48],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[62,[[21,[537]]]],[62,[[21,[538]]]],[62,[[21,[539]]]],[[],14],[[],14],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[24,[-1]]],[[24,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[[25,[-1]]],[[25,[11]]],[]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[[],[[16,[26,27]]]],[538,64],[[]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[539,538],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[[[23,[-1]]],[[23,[11]]],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[],"p":[[3,"Private",11582],[15,"tuple"],[3,"BlockchainOverlay",23],[3,"BlockInfo",169],[3,"Hash",11583],[6,"Result",3129],[3,"Blockchain",23],[3,"Transaction",6737],[15,"slice"],[3,"Vec",11584],[8,"Any",11585],[3,"Tree",11586],[3,"Batch",11587],[15,"usize"],[3,"With",11588],[4,"Result",11589],[6,"BlockchainOverlayPtr",23],[15,"u64"],[3,"Block",169],[3,"Slot",11590],[4,"Option",11591],[15,"bool"],[3,"Box",11592],[3,"Arc",11593],[3,"Rc",11594],[3,"Layout",11595],[3,"LayoutError",11595],[3,"Db",11596],[3,"IVec",11597],[8,"Decodable",11598],[3,"TypeId",11585],[3,"BlockStore",169],[3,"BlockOrderStore",169],[3,"BlockDifficultyStore",169],[3,"Error",11599],[8,"Read",11600],[3,"BlockOrder",169],[3,"BlockDifficulty",169],[6,"Result",11599],[8,"Future",11601],[3,"Pin",11602],[8,"AsyncRead",11603],[8,"Unpin",11604],[8,"Send",11604],[8,"Write",11600],[8,"AsyncWrite",11603],[3,"Formatter",11605],[6,"Result",11605],[3,"Proposal",7317],[3,"BlockStoreOverlay",169],[3,"BlockOrderStoreOverlay",169],[3,"BlockDifficultyStoreOverlay",169],[6,"SledDbOverlayPtr",23],[3,"Signature",11606],[3,"Header",629],[3,"BigUint",11607],[3,"SecretKey",11608],[3,"WasmStore",509],[3,"ContractStateStore",509],[3,"WasmStoreOverlay",509],[3,"ContractId",11609],[15,"u8"],[3,"ContractStateStoreOverlay",509],[15,"str"],[3,"ZkBinary",11136],[3,"VerifyingKey",10335],[15,"array"],[3,"HeaderStore",629],[3,"HeaderStoreOverlay",629],[3,"Timestamp",6949],[6,"Base",11610],[3,"SlotStore",739],[3,"BlocksSlotsStore",739],[3,"SlotStoreOverlay",739],[3,"BlocksSlotsStoreOverlay",739],[3,"TxStore",869],[3,"PendingTxStore",869],[3,"PendingTxOrderStore",869],[3,"TxStoreOverlay",869],[3,"HashMap",11611],[3,"Block",1045],[3,"BlockInfo",1045],[3,"Header",1045],[3,"BlockResponse",1045],[3,"BlockProposal",1045],[3,"BlockOrder",1045],[3,"MerkleNode",11612],[3,"LeadInfo",2166],[3,"String",11613],[3,"Clock",1280],[3,"Url",11614],[4,"Ticks",1280],[3,"MAINNET_GENESIS_HASH_BYTES",1362],[3,"MAINNET_GENESIS_TIMESTAMP",1362],[3,"MAINNET_BOOTSTRAP_TIMESTAMP",1362],[3,"MAINNET_INITIAL_DISTRIBUTION",1362],[3,"TESTNET_GENESIS_HASH_BYTES",1362],[3,"TESTNET_GENESIS_TIMESTAMP",1362],[3,"TESTNET_BOOTSTRAP_TIMESTAMP",1362],[3,"TESTNET_INITIAL_DISTRIBUTION",1362],[3,"FLOAT10_EPSILON",1362],[3,"Float10",3025],[3,"FLOAT10_NEG_TWO",1362],[3,"FLOAT10_NEG_ONE",1362],[3,"FLOAT10_ZERO",1362],[3,"FLOAT10_ONE",1362],[3,"FLOAT10_TWO",1362],[3,"FLOAT10_THREE",1362],[3,"FLOAT10_FIVE",1362],[3,"FLOAT10_NINE",1362],[3,"FLOAT10_TEN",1362],[3,"KP",1362],[3,"KI",1362],[3,"KD",1362],[3,"PID_OUT_STEP",1362],[3,"MAX_DER",1362],[3,"MIN_DER",1362],[3,"MAX_F",1362],[3,"MIN_F",1362],[3,"LeadCoin",2068],[6,"Scalar",11610],[6,"Point",11610],[3,"ProvingKey",10335],[3,"Proof",10335],[3,"TxRcpt",2428],[3,"TransferStx",2934],[6,"MerkleTree",11612],[3,"LeadCoinSecrets",2068],[3,"LeadProof",2166],[3,"PublicKey",11608],[3,"ProtocolProposal",2287],[6,"ChannelPtr",3913],[6,"ValidatorStatePtr",3074],[6,"P2pPtr",4698],[6,"ProtocolBasePtr",4822],[3,"Executor",11615],[3,"ProtocolSync",2320],[3,"ProtocolSyncConsensus",2361],[3,"ProtocolTx",2395],[3,"EncryptedTxRcpt",2428],[3,"Fork",2514],[3,"StateCheckpoint",2514],[3,"ConsensusState",2514],[3,"ConsensusRequest",2514],[3,"ConsensusResponse",2514],[3,"ConsensusSyncResponse",2514],[3,"SlotRequest",2514],[3,"SlotResponse",2514],[3,"StateCheckpointInfo",2514],[3,"ForkInfo",2514],[3,"ConsensusSyncRequest",2514],[15,"i64"],[6,"WalletPtr",8069],[3,"Tx",2990],[4,"Ordering",11616],[3,"Repr",11617],[3,"IBig",11618],[3,"ValidatorState",3074],[8,"Error",11619],[4,"Error",3129],[4,"TxVerifyFailed",3129],[4,"ClientFailed",3129],[4,"RpcError",3129],[4,"Error",11620],[3,"SystemTimeError",11621],[3,"TimeoutError",6635],[3,"RuntimeError",11622],[3,"InvalidDnsNameError",11623],[4,"ExportError",11624],[4,"ParseError",11625],[4,"Error",11626],[3,"Error",11627],[3,"JsonParseError",11628],[3,"JsonGenerateError",11629],[3,"HexError",11583],[4,"Error",11630],[4,"ConversionError",11625],[3,"RecvError",11631],[3,"FromUtf8Error",11613],[3,"Error",11632],[4,"MemoryAccessError",11633],[3,"Utf8Error",11634],[3,"SetLoggerError",11635],[3,"TryFromSliceError",11636],[4,"CompileError",11637],[4,"TransactionError",11638],[4,"Error",11639],[4,"MemoryError",11637],[3,"SendError",11631],[4,"Infallible",11640],[3,"ParseFloatError",11641],[3,"AddrParseError",11642],[4,"InstantiationError",11622],[4,"ParseError",11643],[4,"Error",9525],[4,"ContractError",11644],[3,"Error",11645],[3,"ParseIntError",11646],[3,"EventGraph",3479],[3,"Event",3538],[3,"HashSet",11647],[3,"VecDeque",11648],[6,"EventGraphPtr",3479],[3,"EventPut",3578],[3,"EventReq",3578],[3,"EventRep",3578],[3,"TipReq",3578],[3,"TipRep",3578],[3,"ProtocolEventGraph",3578],[3,"ChunkedFile",3783],[3,"Geode",3783],[3,"PathBuf",11649],[8,"AsRef",11640],[3,"Iter",11650],[3,"Acceptor",3874],[8,"PtListener",5353],[6,"SessionWeakPtr",4998],[6,"AcceptorPtr",3874],[3,"Subscription",6567],[3,"Channel",3913],[3,"ChannelInfo",3913],[3,"MessageSubsystem",4595],[8,"PtStream",5353],[8,"Message",4354],[8,"Session",4998],[6,"SessionBitFlag",4998],[3,"MessageSubscription",4595],[3,"Connector",4003],[6,"SettingsPtr",5249],[3,"MessageInfo",4031],[3,"InboundInfo",4031],[3,"OutboundSlotSleeping",4031],[3,"OutboundSlotConnecting",4031],[3,"OutboundSlotConnected",4031],[3,"OutboundSlotDisconnected",4031],[3,"OutboundPeerDiscovery",4031],[4,"DnetEvent",4031],[3,"Hosts",4302],[15,"u32"],[6,"HostsPtr",4302],[3,"PingMessage",4354],[3,"PongMessage",4354],[3,"GetAddrsMessage",4354],[3,"AddrsMessage",4354],[3,"VersionMessage",4354],[3,"VerackMessage",4354],[3,"Packet",4354],[8,"Sized",11604],[3,"MessageDispatcher",4595],[8,"Debug",11605],[6,"MessageSubscriptionId",4595],[3,"P2p",4698],[6,"ExecutorPtr",6394],[3,"Settings",5249],[3,"ProtocolRegistry",4901],[6,"InboundSessionPtr",5025],[6,"ManualSessionPtr",5064],[6,"OutboundSessionPtr",5101],[3,"ProtocolAddress",4785],[3,"ProtocolJobsManager",4829],[6,"ProtocolJobsManagerPtr",4829],[3,"ProtocolPing",4865],[15,"u16"],[8,"Fn",11651],[8,"Sync",11604],[3,"ProtocolSeed",4931],[3,"ProtocolVersion",4964],[3,"InboundSession",5025],[3,"ManualSession",5064],[3,"Slot",5101],[3,"OutboundSession",5101],[3,"Weak",11593],[3,"PeerDiscovery",5101],[6,"SeedSyncSessionPtr",5215],[3,"SeedSyncSession",5215],[3,"App",11652],[3,"SettingsOpt",5249],[8,"Deserializer",11653],[3,"ArgMatches",11654],[4,"DialerVariant",5353],[4,"ListenerVariant",5353],[3,"Dialer",5353],[3,"Duration",11655],[3,"Listener",5353],[3,"NymDialer",5489],[3,"ConnectionId",5489],[8,"Hash",11656],[8,"BuildHasher",11656],[8,"Hasher",11656],[3,"TcpDialer",5558],[3,"TcpListener",5558],[4,"SocketAddr",11657],[3,"Socket",11658],[3,"TcpStream",11659],[3,"TcpListener",11659],[15,"i32"],[4,"SupportedCipherSuite",11660],[3,"ClientCertificateVerifier",5624],[3,"DistinguishedName",11661],[3,"TlsUpgrade",5624],[4,"TlsStream",11662],[3,"TlsAcceptor",11662],[3,"X509Certificate",11663],[3,"PublicKey",11664],[3,"Certificate",11665],[3,"SystemTime",11621],[3,"ClientCertVerified",11666],[3,"ServerCertificateVerifier",5624],[4,"ServerName",11667],[8,"Iterator",11668],[3,"ServerCertVerified",11666],[3,"TorDialer",5708],[3,"DataStream",11669],[3,"UnixDialer",5740],[3,"UnixListener",5740],[3,"UnixStream",11670],[3,"Path",11649],[3,"UnixListener",11670],[3,"RpcClient",5810],[3,"JsonRequest",5854],[4,"JsonValue",6155],[4,"JsonResult",5854],[3,"Sender",11631],[3,"Receiver",11631],[6,"SubscriberPtr",6567],[3,"ReadHalf",11671],[3,"WriteHalf",11671],[4,"ErrorCode",5854],[3,"JsonNotification",5854],[3,"JsonResponse",5854],[3,"JsonError",5854],[3,"JsonErrorVal",5854],[3,"JsonSubscriber",5854],[3,"Mutex",11672],[8,"RequestHandler",6143],[6,"StoppableTaskPtr",6526],[3,"Error",11605],[3,"UnexpectedValue",11673],[15,"f64"],[8,"InnerAsRef",11673],[8,"InnerAsRefMut",11673],[3,"Env",6288],[3,"FunctionEnvMut",11674],[3,"WasmPtr",11675],[3,"DbHandle",6240],[3,"Runtime",6288],[4,"ContractSection",6288],[3,"Memory",11676],[3,"MemoryView",11677],[8,"AsStoreRef",11678],[3,"TimeKeeper",6949],[3,"Pages",11679],[3,"CondVar",6414],[3,"CondVarWait",6414],[3,"Context",11680],[4,"Poll",11681],[3,"LazyWeak",6498],[3,"StoppableTask",6526],[8,"FnOnce",11651],[3,"Subscriber",6567],[6,"SubscriptionId",6567],[8,"Clone",11682],[3,"Timeout",6635],[3,"TimeoutFuture",6635],[8,"CryptoRng",11683],[8,"RngCore",11683],[3,"ProgressInc",6792],[3,"Config",11684],[4,"LevelFilter",11635],[3,"OsString",11685],[3,"Pcg32",6861],[3,"BigInt",11686],[3,"BigUint",11687],[3,"RngWrapper",11688],[3,"Error",11689],[3,"RingBuffer",6903],[8,"Eq",11616],[8,"PartialEq",11616],[8,"Default",11690],[3,"Iter",11691],[3,"TimeKeeperSafe",6949],[3,"NanoTimestamp",6949],[3,"DateTime",6949],[3,"Date",6949],[4,"DateFormat",6949],[3,"Validator",7231],[3,"ValidatorConfig",7231],[6,"ValidatorPtr",7231],[3,"Consensus",7317],[3,"Fork",7317],[3,"PoWModule",7990],[3,"Float10",7440],[3,"FLOAT10_NEG_TWO",7440],[3,"FLOAT10_NEG_ONE",7440],[3,"FLOAT10_ZERO",7440],[3,"FLOAT10_ONE",7440],[3,"FLOAT10_TWO",7440],[3,"FLOAT10_THREE",7440],[3,"FLOAT10_FIVE",7440],[3,"FLOAT10_NINE",7440],[3,"FLOAT10_TEN",7440],[3,"FIELD_P",7726],[3,"KP",7726],[3,"KI",7726],[3,"KD",7726],[3,"MAX_F",7726],[3,"MIN_F",7726],[3,"EPSILON",7726],[3,"K1",7726],[3,"K2",7726],[3,"K3",7726],[3,"WalletDb",8069],[4,"SqlType",8069],[4,"QueryType",8069],[3,"Advice",8671],[3,"Column",8671],[3,"Value",8671],[3,"AssignedCell",8671],[8,"Field",8671],[8,"Layouter",8671],[8,"Copy",11604],[4,"Witness",10671],[3,"ZkCircuit",10517],[3,"ArithChip",8192],[8,"WithSmallOrderMulGroup",11692],[8,"Ord",11616],[3,"ArithConfig",8192],[3,"ConstraintSystem",9525],[3,"ConditionalSelectConfig",8264],[3,"ConditionalSelectChip",8264],[3,"IsZeroChip",8328],[3,"Region",11693],[3,"IsZeroConfig",8328],[4,"Expression",9525],[3,"LessThanConfig",8388],[3,"LessThanChip",8388],[3,"TableColumn",9525],[3,"NativeRangeCheckConfig",8463],[3,"NativeRangeCheckChip",8463],[3,"SmallRangeCheckConfig",8535],[3,"SmallRangeCheckChip",8535],[3,"ZeroCondChip",8603],[3,"ZeroCondConfig",8603],[4,"Assigned",8671],[8,"Add",11694],[8,"FnMut",11651],[3,"Cell",11693],[8,"ColumnType",9525],[3,"Instance",9525],[8,"Borrow",11695],[3,"StateWord",11696],[3,"Fixed",9525],[4,"Any",9525],[8,"IntoIterator",11697],[8,"FromIterator",11697],[8,"Into",11640],[3,"CtOption",11698],[3,"Choice",11698],[8,"Mul",11694],[3,"NamespacedLayouter",11693],[8,"Neg",11694],[8,"Sub",11694],[4,"HeapVar",10671],[3,"MockProver",8987],[3,"CircuitGates",8987],[3,"Selector",9525],[4,"FailureLocation",8987],[4,"VerifyFailure",8987],[3,"CircuitCost",8987],[8,"PrimeGroup",11699],[8,"Circuit",9525],[3,"TracingFloorPlanner",8987],[8,"FloorPlanner",9525],[3,"MarginalProofSize",9236],[3,"ProofSize",9236],[8,"Assignment",9525],[3,"TiSlice",11700],[3,"Column",9330],[3,"Region",9330],[3,"VirtualCell",9330],[3,"Gate",9330],[3,"Constraint",9330],[3,"VirtualCell",11701],[3,"BatchVerifier",9525],[8,"CurveAffine",11702],[3,"FixedQuery",9525],[3,"AdviceQuery",9525],[3,"InstanceQuery",9525],[3,"VerifyingKey",9525],[3,"ProvingKey",9525],[3,"Params",11703],[8,"EncodedChallenge",11704],[8,"TranscriptWrite",11704],[3,"Constraint",9525],[3,"Constraints",9525],[3,"PinnedConstraintSystem",9525],[3,"VirtualCells",9525],[4,"TableError",9525],[3,"SingleVerifier",9525],[3,"PinnedVerificationKey",9525],[4,"SerdeFormat",11705],[8,"SerdeCurveAffine",11705],[3,"EvaluationDomain",11706],[8,"Transcript",11704],[3,"Rotation",11707],[8,"VerificationStrategy",9525],[8,"TranscriptRead",11704],[3,"BitSlice",11708],[8,"BitOrder",11709],[15,"char"],[4,"BitSpanError",11710],[3,"ZkTracer",10450],[4,"DebugOpValue",10450],[6,"Affine",11610],[4,"OrchardFixedBases",11711],[3,"EccChip",11712],[3,"Point",11713],[3,"VmConfig",10517],[4,"VmChip",10517],[3,"ZkParams",10517],[4,"OrchardHashDomains",11714],[4,"OrchardCommitDomains",11714],[3,"MerkleChip",11715],[3,"Pow5Chip",11696],[3,"Analyzer",10792],[3,"Constant",10830],[3,"Variable",10830],[4,"Var",10830],[3,"Witness",10830],[3,"Chars",11716],[3,"Statement",10830],[3,"Literal",10830],[4,"Arg",10830],[4,"StatementType",10830],[3,"Compiler",11094],[4,"Opcode",11320],[4,"HeapType",11462],[4,"VarType",11462],[4,"LitType",11462],[3,"ErrorEmitter",11177],[4,"TokenType",11209],[3,"Token",11209],[3,"Lexer",11209],[3,"Parser",11384],[3,"IndexMap",11384],[3,"Peekable",11717],[13,"GENESIS",1356],[13,"NEWSLOT",1356],[13,"NEWEPOCH",1356],[8,"ConsensusWallet",3125],[6,"ClientResult",3129],[6,"InboundConnected",4031],[6,"InboundDisconnected",4031],[6,"SendMessage",4031],[6,"RecvMessage",4031],[6,"MessageResult",4595],[8,"MessageDispatcherInterface",4595],[6,"PendingChannels",4698],[6,"ConnectedChannels",4698],[8,"ProtocolBase",4822],[8,"HandlerP2p",6140],[8,"MemoryManipulation",6286],[3,"CondVarState",6414],[8,"ArithInstruction",8192],[13,"InRegion",9215],[13,"OutsideRegion",9215],[13,"ConstraintNotSatisfied",9218],[13,"CellNotAssigned",9218],[13,"InstanceCellNotAssigned",9218],[13,"Permutation",9218],[13,"ConstraintPoisoned",9218],[13,"Lookup",9218],[13,"NotEnoughRowsAvailable",10334],[4,"Literal",10671],[8,"NextTuple3",11384],[8,"NextTuple4",11384]],"b":[[1157,"impl-Display-for-BlockProposal"],[1158,"impl-Debug-for-BlockProposal"],[3043,"impl-Debug-for-Float10"],[3044,"impl-Display-for-Float10"],[3061,"impl-TryFrom%3Ci64%3E-for-Float10"],[3063,"impl-TryFrom%3Cu64%3E-for-Float10"],[3064,"impl-TryFrom%3C%26str%3E-for-Float10"],[3358,"impl-Display-for-Error"],[3359,"impl-Debug-for-Error"],[3360,"impl-Display-for-TxVerifyFailed"],[3361,"impl-Debug-for-TxVerifyFailed"],[3362,"impl-Debug-for-ClientFailed"],[3363,"impl-Display-for-ClientFailed"],[3364,"impl-Display-for-RpcError"],[3365,"impl-Debug-for-RpcError"],[3366,"impl-From%3CError%3E-for-Error"],[3367,"impl-From%3CSystemTimeError%3E-for-Error"],[3368,"impl-From%3C()%3E-for-Error"],[3369,"impl-From%3CTimeoutError%3E-for-Error"],[3370,"impl-From%3CRuntimeError%3E-for-Error"],[3371,"impl-From%3CInvalidDnsNameError%3E-for-Error"],[3372,"impl-From%3CExportError%3E-for-Error"],[3373,"impl-From%3CParseError%3E-for-Error"],[3374,"impl-From%3CError%3E-for-Error"],[3375,"impl-From%3CError%3E-for-Error"],[3376,"impl-From%3CJsonParseError%3E-for-Error"],[3377,"impl-From%3CJsonGenerateError%3E-for-Error"],[3378,"impl-From%3CHexError%3E-for-Error"],[3379,"impl-From%3CError%3E-for-Error"],[3380,"impl-From%3CConversionError%3E-for-Error"],[3381,"impl-From%3CRecvError%3E-for-Error"],[3382,"impl-From%3CFromUtf8Error%3E-for-Error"],[3383,"impl-From%3CRpcError%3E-for-Error"],[3384,"impl-From%3CError%3E-for-Error"],[3385,"impl-From%3CMemoryAccessError%3E-for-Error"],[3386,"impl-From%3CUtf8Error%3E-for-Error"],[3388,"impl-From%3CSetLoggerError%3E-for-Error"],[3389,"impl-From%3CTryFromSliceError%3E-for-Error"],[3390,"impl-From%3CCompileError%3E-for-Error"],[3391,"impl-From%3CTransactionError%3E-for-Error"],[3392,"impl-From%3CError%3E-for-Error"],[3393,"impl-From%3CMemoryError%3E-for-Error"],[3394,"impl-From%3CSendError%3CT%3E%3E-for-Error"],[3395,"impl-From%3CInfallible%3E-for-Error"],[3396,"impl-From%3CParseFloatError%3E-for-Error"],[3397,"impl-From%3CTxVerifyFailed%3E-for-Error"],[3398,"impl-From%3CError%3E-for-Error"],[3399,"impl-From%3CAddrParseError%3E-for-Error"],[3400,"impl-From%3CInstantiationError%3E-for-Error"],[3401,"impl-From%3CParseError%3E-for-Error"],[3402,"impl-From%3CClientFailed%3E-for-Error"],[3403,"impl-From%3CError%3E-for-Error"],[3404,"impl-From%3CContractError%3E-for-Error"],[3405,"impl-From%3CError%3E-for-Error"],[3406,"impl-From%3CParseIntError%3E-for-Error"],[3409,"impl-From%3CError%3E-for-ClientFailed"],[3410,"impl-From%3CError%3E-for-ClientFailed"],[5977,"impl-From%3CJsonNotification%3E-for-JsonResult"],[5978,"impl-From%3CJsonError%3E-for-JsonResult"],[5980,"impl-From%3C(JsonSubscriber,+JsonResponse)%3E-for-JsonResult"],[5981,"impl-From%3CJsonResponse%3E-for-JsonResult"],[5982,"impl-From%3CJsonSubscriber%3E-for-JsonResult"],[6181,"impl-From%3COutboundSlotConnected%3E-for-JsonValue"],[6182,"impl-From%3COutboundSlotDisconnected%3E-for-JsonValue"],[6183,"impl-From%3CVec%3CJsonValue%3E%3E-for-JsonValue"],[6184,"impl-From%3C%26JsonError%3E-for-JsonValue"],[6185,"impl-From%3COutboundSlotConnecting%3E-for-JsonValue"],[6186,"impl-From%3CUnexpectedValue%3E-for-JsonValue"],[6187,"impl-From%3C()%3E-for-JsonValue"],[6188,"impl-From%3C%26JsonResponse%3E-for-JsonValue"],[6189,"impl-From%3CChannelInfo%3E-for-JsonValue"],[6190,"impl-From%3CDnetEvent%3E-for-JsonValue"],[6191,"impl-From%3COutboundSlotSleeping%3E-for-JsonValue"],[6192,"impl-From%3CHashMap%3CString,+JsonValue%3E%3E-for-JsonValue"],[6193,"impl-From%3COutboundPeerDiscovery%3E-for-JsonValue"],[6194,"impl-From%3C%26JsonNotification%3E-for-JsonValue"],[6195,"impl-From%3Cf64%3E-for-JsonValue"],[6196,"impl-From%3C%26JsonRequest%3E-for-JsonValue"],[6198,"impl-From%3CString%3E-for-JsonValue"],[6199,"impl-From%3CMessageInfo%3E-for-JsonValue"],[6200,"impl-From%3CInboundInfo%3E-for-JsonValue"],[6201,"impl-From%3Cbool%3E-for-JsonValue"],[6205,"impl-Index%3C%26str%3E-for-JsonValue"],[6206,"impl-Index%3Cusize%3E-for-JsonValue"],[6207,"impl-IndexMut%3Cusize%3E-for-JsonValue"],[6208,"impl-IndexMut%3C%26str%3E-for-JsonValue"],[6674,"impl-Debug-for-TimeoutError"],[6675,"impl-Display-for-TimeoutError"],[6889,"impl-RngCore-for-Pcg32"],[6890,"impl-Pcg32"],[7073,"impl-Debug-for-Timestamp"],[7074,"impl-Display-for-Timestamp"],[7075,"impl-Debug-for-NanoTimestamp"],[7076,"impl-Display-for-NanoTimestamp"],[7077,"impl-Display-for-DateTime"],[7078,"impl-Debug-for-DateTime"],[7079,"impl-Display-for-Date"],[7080,"impl-Debug-for-Date"],[7561,"impl-Debug-for-Float10"],[7562,"impl-Display-for-Float10"],[7652,"impl-TryFrom%3C%26str%3E-for-Float10"],[7653,"impl-TryFrom%3Ci64%3E-for-Float10"],[7654,"impl-TryFrom%3Cu64%3E-for-Float10"],[7655,"impl-TryFrom%3Cf64%3E-for-Float10"],[8690,"impl-Add%3CValue%3CV%3E%3E-for-Value%3C%26V%3E"],[8691,"impl-Add%3C%26Value%3CV%3E%3E-for-Value%3CV%3E"],[8692,"impl-Add%3CValue%3CF%3E%3E-for-Value%3C%26Assigned%3CF%3E%3E"],[8693,"impl-Add-for-%26Value%3CV%3E"],[8694,"impl-Add-for-Value%3CV%3E"],[8695,"impl-Add%3CValue%3CV%3E%3E-for-%26Value%3CV%3E"],[8696,"impl-Add%3CValue%3CF%3E%3E-for-Value%3CAssigned%3CF%3E%3E"],[8697,"impl-Add%3CValue%3C%26V%3E%3E-for-Value%3CV%3E"],[8698,"impl-Add%3CF%3E-for-Value%3CAssigned%3CF%3E%3E"],[8699,"impl-Add%3CF%3E-for-Value%3C%26Assigned%3CF%3E%3E"],[8700,"impl-Add%3CF%3E-for-%26Assigned%3CF%3E"],[8701,"impl-Add%3CF%3E-for-Assigned%3CF%3E"],[8702,"impl-Add%3C%26Assigned%3CF%3E%3E-for-Assigned%3CF%3E"],[8703,"impl-Add%3C%26Assigned%3CF%3E%3E-for-%26Assigned%3CF%3E"],[8704,"impl-Add-for-Assigned%3CF%3E"],[8705,"impl-Add%3CAssigned%3CF%3E%3E-for-%26Assigned%3CF%3E"],[8706,"impl-AddAssign-for-Assigned%3CF%3E"],[8707,"impl-AddAssign%3C%26Assigned%3CF%3E%3E-for-Assigned%3CF%3E"],[8734,"impl-Var%3CF%3E-for-AssignedCell%3CF,+F%3E"],[8735,"impl-AssignedCell%3CV,+F%3E"],[8747,"impl-Value%3C%26mut+V%3E"],[8748,"impl-Value%3C%26V%3E"],[8754,"impl-Value%3C%26V%3E"],[8755,"impl-Value%3C%26mut+V%3E"],[8815,"impl-From%3C(F,+F)%3E-for-Assigned%3CF%3E"],[8816,"impl-From%3C%26F%3E-for-Assigned%3CF%3E"],[8817,"impl-From%3C%26Assigned%3CF%3E%3E-for-Assigned%3CF%3E"],[8818,"impl-From%3CF%3E-for-Assigned%3CF%3E"],[8819,"impl-From%3CColumn%3CFixed%3E%3E-for-Column%3CAny%3E"],[8820,"impl-From%3CColumn%3CInstance%3E%3E-for-Column%3CAny%3E"],[8822,"impl-From%3CColumn%3CAdvice%3E%3E-for-Column%3CAny%3E"],[8871,"impl-Mul-for-%26Value%3CV%3E"],[8872,"impl-Mul%3CValue%3C%26V%3E%3E-for-Value%3CV%3E"],[8873,"impl-Mul-for-Value%3CV%3E"],[8874,"impl-Mul%3CValue%3CV%3E%3E-for-Value%3C%26V%3E"],[8875,"impl-Mul%3CValue%3CF%3E%3E-for-Value%3C%26Assigned%3CF%3E%3E"],[8876,"impl-Mul%3CF%3E-for-Value%3CAssigned%3CF%3E%3E"],[8877,"impl-Mul%3CValue%3CF%3E%3E-for-Value%3CAssigned%3CF%3E%3E"],[8878,"impl-Mul%3CF%3E-for-Value%3C%26Assigned%3CF%3E%3E"],[8879,"impl-Mul%3C%26Value%3CV%3E%3E-for-Value%3CV%3E"],[8880,"impl-Mul%3CValue%3CV%3E%3E-for-%26Value%3CV%3E"],[8881,"impl-Mul-for-Assigned%3CF%3E"],[8882,"impl-Mul%3CF%3E-for-Assigned%3CF%3E"],[8883,"impl-Mul%3C%26Assigned%3CF%3E%3E-for-Assigned%3CF%3E"],[8884,"impl-Mul%3CF%3E-for-%26Assigned%3CF%3E"],[8885,"impl-MulAssign%3C%26Assigned%3CF%3E%3E-for-Assigned%3CF%3E"],[8886,"impl-MulAssign-for-Assigned%3CF%3E"],[8889,"impl-Neg-for-%26Assigned%3CF%3E"],[8890,"impl-Neg-for-Assigned%3CF%3E"],[8910,"impl-Sub%3CF%3E-for-Value%3C%26Assigned%3CF%3E%3E"],[8911,"impl-Sub%3CF%3E-for-Value%3CAssigned%3CF%3E%3E"],[8912,"impl-Sub%3CValue%3CV%3E%3E-for-Value%3C%26V%3E"],[8913,"impl-Sub-for-%26Value%3CV%3E"],[8914,"impl-Sub-for-Value%3CV%3E"],[8915,"impl-Sub%3CValue%3CF%3E%3E-for-Value%3C%26Assigned%3CF%3E%3E"],[8916,"impl-Sub%3CValue%3C%26V%3E%3E-for-Value%3CV%3E"],[8917,"impl-Sub%3CValue%3CF%3E%3E-for-Value%3CAssigned%3CF%3E%3E"],[8918,"impl-Sub%3C%26Value%3CV%3E%3E-for-Value%3CV%3E"],[8919,"impl-Sub%3CValue%3CV%3E%3E-for-%26Value%3CV%3E"],[8920,"impl-Sub%3C%26Assigned%3CF%3E%3E-for-Assigned%3CF%3E"],[8921,"impl-Sub-for-Assigned%3CF%3E"],[8922,"impl-Sub%3CAssigned%3CF%3E%3E-for-%26Assigned%3CF%3E"],[8923,"impl-Sub%3CF%3E-for-%26Assigned%3CF%3E"],[8924,"impl-Sub%3C%26Assigned%3CF%3E%3E-for-%26Assigned%3CF%3E"],[8925,"impl-Sub%3CF%3E-for-Assigned%3CF%3E"],[8926,"impl-SubAssign%3C%26Assigned%3CF%3E%3E-for-Assigned%3CF%3E"],[8927,"impl-SubAssign-for-Assigned%3CF%3E"],[8937,"impl-TryFrom%3CHeapVar%3E-for-Value%3CFq%3E"],[8938,"impl-TryFrom%3CHeapVar%3E-for-Value%3Cu32%3E"],[8939,"impl-TryFrom%3CHeapVar%3E-for-Value%3C%5BFp;+32%5D%3E"],[8943,"impl-TryFrom%3CColumn%3CAny%3E%3E-for-Column%3CAdvice%3E"],[8945,"impl-TryFrom%3CColumn%3CAny%3E%3E-for-Column%3CInstance%3E"],[8946,"impl-TryFrom%3CColumn%3CAny%3E%3E-for-Column%3CFixed%3E"],[8976,"impl-FieldValue%3CF%3E-for-AssignedCell%3CF,+F%3E"],[8977,"impl-Var%3CF%3E-for-AssignedCell%3CF,+F%3E"],[8978,"impl-AssignedCell%3CV,+F%3E"],[9078,"impl-Display-for-FailureLocation"],[9079,"impl-Debug-for-FailureLocation"],[9080,"impl-Debug-for-VerifyFailure"],[9081,"impl-Display-for-VerifyFailure"],[9083,"impl-Display-for-CircuitGates"],[9084,"impl-Debug-for-CircuitGates"],[9412,"impl-Display-for-Column"],[9413,"impl-Debug-for-Column"],[9414,"impl-Display-for-VirtualCell"],[9415,"impl-Debug-for-VirtualCell"],[9416,"impl-Display-for-Gate"],[9417,"impl-Debug-for-Gate"],[9418,"impl-Debug-for-Constraint"],[9419,"impl-Display-for-Constraint"],[9420,"impl-Display-for-Region"],[9421,"impl-Debug-for-Region"],[9422,"impl-From%3CColumn%3CAny%3E%3E-for-Column"],[9423,"impl-From%3C(Any,+usize)%3E-for-Column"],[9425,"impl-From%3C(Column,+i32)%3E-for-VirtualCell"],[9426,"impl-From%3C(%26str,+Column,+i32)%3E-for-VirtualCell"],[9427,"impl-From%3CVirtualCell%3E-for-VirtualCell"],[9433,"impl-From%3C(usize,+String)%3E-for-Region"],[9434,"impl-From%3C(usize,+%26str)%3E-for-Region"],[9885,"impl-Display-for-Error"],[9886,"impl-Debug-for-Error"],[9887,"impl-Display-for-TableError"],[9888,"impl-Debug-for-TableError"],[9896,"impl-From%3CAdvice%3E-for-Any"],[9897,"impl-From%3CInstance%3E-for-Any"],[9898,"impl-From%3CFixed%3E-for-Any"],[9906,"impl-From%3CExpression%3CF%3E%3E-for-Constraint%3CF%3E"],[9908,"impl-From%3C(%26str,+Expression%3CF%3E)%3E-for-Constraint%3CF%3E"],[10089,"impl-Mul%3CF%3E-for-Expression%3CF%3E"],[10090,"impl-Mul-for-Expression%3CF%3E"]]},\
"darkfi_consensus_contract":{"doc":"Smart contract implementing staking, unstaking and evolving","t":"ENNNNNLLLLALLLLALLLLLLLALLLLLLLLLAAAAAADDDDLLLLLLLLLLLLLLLLMFFLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMLLLLDDMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLMMMLLMMLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLFLLLLLLLLLLLLMMMLLLMLLLMLLLLLLLLLLLLMLLLMMMMMMMMMLLLMMMMMMMMMMLLLLLLLLLLLLLLLLLLLMLLLMDDLLLLLLLLLLMLLLLLLLLMLLLLLLLLLLLLLLMMMMLLMMLLLLLLLLLLLLMLLDDLLLLLLLLLLMMLLLLLLLLMLLLLLLLLLLLLMLLMMMMLLMMMLLLLLLLLLLLLLLDDLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLMMLLMMMLLLLLLLLLLLLMLLNNENNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDRRRRRRRRRRRLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLM","n":["ConsensusFunction","GenesisStakeV1","ProposalV1","StakeV1","UnstakeRequestV1","UnstakeV1","as_any","as_any_mut","borrow","borrow_mut","client","deref","deref_mut","deserialize","drop","error","from","init","into","into_any","into_any_arc","into_any_rc","layout_raw","model","pointer_metadata","try_from","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","common","genesis_stake_v1","proposal_v1","stake_v1","unstake_request_v1","unstake_v1","ConsensusBurnInputInfo","ConsensusBurnRevealed","ConsensusMintOutputInfo","ConsensusMintRevealed","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","coin","create_consensus_burn_proof","create_consensus_mint_proof","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","epoch","epoch","epoch","from","from","from","from","init","init","init","init","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","layout_raw","layout_raw","layout_raw","layout_raw","leaf_position","merkle_path","merkle_root","note","nullifier","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","public_key","secret","serial","signature_public","to_vec","to_vec","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","value","value_blind","value_blind","value_commit","value_commit","vzip","vzip","vzip","vzip","ConsensusGenesisStakeCallBuilder","ConsensusGenesisStakeCallDebris","amount","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","build","build_with_params","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","from","from","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","keypair","layout_raw","layout_raw","mint_pk","mint_zkbin","params","pointer_metadata","pointer_metadata","proofs","recipient","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","ConsensusProposalCallBuilder","ConsensusProposalCallDebris","ConsensusProposalRevealed","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","build_with_params","create_proposal_proof","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","epoch","fork_hash","fork_previous_hash","from","from","from","headstart","init","init","init","input_value_commit","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","keypair","layout_raw","layout_raw","layout_raw","merkle_root","merkle_tree","mu_rho","mu_y","nullifier","output_coin","output_value_commit","owncoin","params","pointer_metadata","pointer_metadata","pointer_metadata","proofs","proposal_pk","proposal_zkbin","public_key","reward","rho","sigma1","sigma2","signature_secret","slot","to_vec","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","vrf_proof","vzip","vzip","vzip","y","ConsensusStakeCallBuilder","ConsensusStakeCallDebris","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","build","build_with_params","coin","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","epoch","from","from","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","layout_raw","layout_raw","mint_pk","mint_zkbin","money_input","params","pointer_metadata","pointer_metadata","proofs","signature_secret","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","value_blind","vzip","vzip","ConsensusUnstakeRequestCallBuilder","ConsensusUnstakeRequestCallDebris","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","build","build_with_params","burn_pk","burn_zkbin","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","epoch","from","from","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","keypair","layout_raw","layout_raw","mint_pk","mint_zkbin","owncoin","params","pointer_metadata","pointer_metadata","proofs","signature_secret","tree","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","ConsensusUnstakeCallBuilder","ConsensusUnstakeCallDebris","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","build","build_with_params","burn_pk","burn_zkbin","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","from","from","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","layout_raw","layout_raw","owncoin","params","pointer_metadata","pointer_metadata","proofs","signature_secret","tree","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","value_blind","vzip","vzip","CoinNotInUnstakeSet","CoinStillInGracePeriod","ConsensusError","ProposalErroneousVrfProof","ProposalExtendsUnknownFork","ProposalMissingSlot","__clone_box","as_any","as_any_mut","as_error","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","fmt","fmt","from","init","into","into_any","into_any_arc","into_any_rc","layout_raw","pointer_metadata","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","ConsensusGenesisStakeParamsV1","ConsensusGenesisStakeUpdateV1","ConsensusProposalParamsV1","ConsensusProposalUpdateV1","ConsensusUnstakeRequestParamsV1","EPOCH_LENGTH","GRACE_PERIOD","HEADSTART","MU_RHO_PREFIX","MU_Y_PREFIX","REWARD","REWARD_PALLAS","SECRET_KEY_PREFIX","SEED_PREFIX","SERIAL_PREFIX","SLOT_TIME","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","calculate_grace_period","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","coin","coin","decode","decode","decode","decode","decode","decode_async","decode_async","decode_async","decode_async","decode_async","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","encode","encode","encode","encode","encode","encode_async","encode_async","encode_async","encode_async","encode_async","fmt","fmt","fmt","fmt","fmt","fork_hash","fork_previous_hash","from","from","from","from","from","init","init","init","init","init","input","input","input","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","nullifier","output","output","output","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","reward","reward_blind","rho","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vrf_proof","vzip","vzip","vzip","vzip","vzip","y"],"q":[[0,"darkfi_consensus_contract"],[33,"darkfi_consensus_contract::client"],[39,"darkfi_consensus_contract::client::common"],[157,"darkfi_consensus_contract::client::genesis_stake_v1"],[214,"darkfi_consensus_contract::client::proposal_v1"],[317,"darkfi_consensus_contract::client::stake_v1"],[376,"darkfi_consensus_contract::client::unstake_request_v1"],[437,"darkfi_consensus_contract::client::unstake_v1"],[495,"darkfi_consensus_contract::error"],[532,"darkfi_consensus_contract::model"],[725,"core::any"],[726,"rkyv::with"],[727,"core::result"],[728,"alloc::boxed"],[729,"alloc::sync"],[730,"alloc::rc"],[731,"core::alloc::layout"],[732,"core::alloc::layout"],[733,"darkfi::zk::proof"],[734,"darkfi::zk::proof"],[735,"darkfi::error"],[736,"pasta_curves::pallas"],[737,"alloc::vec"],[738,"pasta_curves::pallas"],[739,"darkfi_sdk::crypto::ecvrf"],[740,"dyn_clone::sealed"],[741,"core::error"],[742,"core::fmt"],[743,"core::fmt"],[744,"std::io::error"],[745,"std::io"],[746,"core::future::future"],[747,"core::pin"],[748,"futures_io::if_std"],[749,"core::marker"],[750,"core::marker"]],"d":["Functions available in the contract","","","","","","","","","","Client API for interaction with this smart contract This …","","","","","Internal contract errors","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","Call parameters definitions","","","","","","","","","","Common functions This API is crufty. Please rework it into …","<code>Consensus::GenesisStakeV1</code> API This API is crufty. Please …","Proposal transaction building API. This API is crufty. …","<code>Consensus::StakeV1</code> API This API is crufty. Please rework …","<code>Consensus::UnstakeRequestV1</code> API This API is crufty. Please …","<code>Consensus::UnstakeV1</code> API This API is crufty. Please rework …","","","","","","","","","","","","","","","","","","","","","","","Create a ZK proof for minting a coin in the Consensus coin …","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Struct holding necessary information to build a …","","Amount of tokens we want to mint and stake","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Signer keypair, this pubkey is in the clear input, and …","","","Proving key for the <code>ConsensusMint_V1</code> zk circuit","<code>ConsensusMint_V1</code> zkas circuit ZkBinary","","","","","Output pubkey, to whom the minted coin goes. The secret …","","","","","","","","","","","","","","","Struct holding necessary information to build a proposal …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extending fork last proposal/block hash","Extending fork second to last proposal/block hash","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","The new output keypair (used in the minted coin)","","","","","Merkle tree of coins used to create inclusion proofs","","","","","","<code>ConsensusOwnCoin</code> we’re given to use in this builder","Payload params","","","","ZK proofs","Proving key for the <code>Proposal_V1</code> zk circuit","<code>Proposal_V1</code> zkas circuit ZkBinary","","","","","","Secret key used to sign the transaction","Rewarded slot","","","","","","","","","","","","","","","","","","","","","","","","","Struct holding necessary information to build a …","","","","","","","","","","","","<code>OwnCoin</code> we’re given to use in this builder","","","","","","","","","Epoch staked coin is minted","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Proving key for the <code>ConsensusMint_V1</code> zk circuit","<code>ConsensusMint_V1</code> zkas circuit ZkBinary","The money <code>Input</code> (comes from the previous <code>Money::Stake</code> …","","","","","","","","","","","","","","","","","","Blinding factor for value commitment","","","Struct holding necessary information to build a …","","","","","","","","","","","","Proving key for the <code>ConsensusBurn_V1</code> zk circuit","<code>ConsensusBurn_V1</code> zkas circuit ZkBinary","","","","","","","","","Epoch unstaked coin is minted","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","The new output keypair (used in the minted coin)","","","Proving key for the <code>ConsensusMint_V1</code> zk circuit","<code>ConsensusMint_V1</code> zkas circuit ZkBinary","<code>ConsensusOwnCoin</code> we’re given to use in this builder","Payload params","","","ZK proofs","Secret key used to sign the transaction","Merkle tree of coins used to create inclusion proofs","","","","","","","","","","","","","","","Struct holding necessary information to build a …","","","","","","","","","","","","Proving key for the <code>ConsensusBurn_V1</code> zk circuit","<code>ConsensusBurn_V1</code> zkas circuit ZkBinary","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","<code>ConsensusOwnCoin</code> we’re given to use in this builder","Payload params","","","ZK proofs","Secret key used to sign the transaction","Merkle tree of coins used to create inclusion proofs","","","","","","","","","","","","","Value blind to be used in the <code>Money::UnstakeV1</code> call","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Parameters for <code>Consensus::GenesisStake</code>","State update for <code>Consensus::GenesisStake</code>","Parameters for <code>Consensus::Proposal</code>","State update for <code>Consensus::Proposal</code>","Parameters for <code>Consensus::UnstakeRequest</code>","Number of slots in one epoch","","Lottery headstart, calculated by: …","Election seed rho prefix, calculated by: …","Election seed y prefix, calculated by: …","Configured block reward (1 DRK == 1 * 10^8)","Reward <code>pallas::Base</code>, calculated by: …","Secret key prefix, calculated by: pallas::Base::from(4)","Seed prefix, calculated by: pallas::Base::from(3)","Serial prefix, calculated by: pallas::Base::from(2)","Slot time in seconds","","","","","","","","","","","","","","","","","","","","","","","","","","Auxiliary function to calculate the grace (locked) period, …","","","","","","","","","","","The newly minted coin","The newly minted coin","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extending fork last proposal/block hash","Extending fork second to last proposal/block hash","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Clear input","Anonymous input","Burnt token revealed info","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Revealed nullifier","Anonymous output","Anonymous output","Anonymous output","","","","","","Reward value","Revealed blinding factor for reward value","Lottery rho used","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","VRF proof for eta calculation","","","","","","Coin y"],"i":[0,12,12,12,12,12,12,12,12,12,0,12,12,12,12,0,12,12,12,12,12,12,12,0,12,12,12,12,12,12,12,12,12,0,0,0,0,0,0,0,0,0,0,21,16,22,18,21,16,22,18,21,16,22,18,21,16,22,18,22,0,0,21,16,22,18,21,16,22,18,21,16,22,18,21,16,22,18,21,22,18,21,16,22,18,21,16,22,18,21,16,22,18,21,16,22,18,21,16,22,18,21,16,22,18,21,16,22,18,16,16,18,16,18,21,16,22,18,21,16,21,18,22,18,21,16,22,18,21,16,22,18,21,16,22,18,21,16,22,18,21,16,22,18,21,16,22,18,21,21,16,22,18,21,16,22,18,0,0,25,26,25,26,25,26,25,26,25,25,25,26,25,26,25,26,25,26,25,26,25,26,25,26,25,26,25,26,25,26,25,25,26,25,25,25,26,26,25,26,25,26,25,26,25,26,25,26,25,26,25,26,25,26,25,0,0,0,29,32,28,29,32,28,29,32,28,29,32,28,28,28,0,29,32,28,29,32,28,29,32,28,29,32,28,32,28,28,29,32,28,32,29,32,28,32,29,32,28,29,32,28,29,32,28,29,32,28,29,29,32,28,32,28,32,32,32,32,32,28,29,29,32,28,29,28,28,32,32,32,32,32,29,28,32,29,32,28,29,32,28,29,32,28,29,32,28,29,32,28,29,32,28,32,29,32,28,32,0,0,34,33,34,33,34,33,34,33,33,33,33,34,33,34,33,34,33,34,33,33,34,33,34,33,34,33,34,33,34,33,34,33,34,33,33,33,33,34,34,33,34,34,34,33,34,33,34,33,34,33,34,33,34,33,33,34,33,0,0,36,35,36,35,36,35,36,35,35,35,35,35,36,35,36,35,36,35,36,35,35,36,35,36,35,36,35,36,35,36,35,36,35,36,36,35,35,35,35,36,36,35,36,36,35,36,35,36,35,36,35,36,35,36,35,36,35,36,35,0,0,38,37,38,37,38,37,38,37,37,37,37,37,38,37,38,37,38,37,38,37,38,37,38,37,38,37,38,37,38,37,38,37,38,37,37,38,38,37,38,38,37,38,37,38,37,38,37,38,37,38,37,38,37,38,38,37,41,41,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,47,48,49,50,46,47,48,49,50,46,47,48,49,50,46,47,48,49,50,46,47,48,49,50,0,46,47,48,49,50,46,47,48,49,50,47,49,46,47,48,49,50,46,47,48,49,50,46,47,48,49,50,46,47,48,49,50,46,47,48,49,50,46,47,48,49,50,46,47,48,49,50,46,47,48,49,50,46,47,48,49,50,48,48,46,47,48,49,50,46,47,48,49,50,46,48,50,46,47,48,49,50,46,47,48,49,50,46,47,48,49,50,46,47,48,49,50,46,47,48,49,50,49,46,48,50,46,47,48,49,50,48,48,48,46,47,48,49,50,46,47,48,49,50,46,47,48,49,50,46,47,48,49,50,46,47,48,49,50,46,47,48,49,50,46,47,48,49,50,48,46,47,48,49,50,48],"f":[0,0,0,0,0,0,[-1,1,[]],[-1,1,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[2,-1,[]],[2,-1,[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[2,5],0,[-1,-1,[]],[[],2],[-1,-2,[],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[],[[4,[9,10]]]],0,[[]],[-1,[[4,[-2]]],[],[]],[11,[[4,[12]]]],[-1,[[4,[-2]]],[],[]],[-1,13,[]],[[[6,[-1]]],[[6,[1]]],[]],[-1,1,[]],[-1,1,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[14,15,16],[[20,[[5,[17,18,19]]]]]],[[14,15,21],[[20,[[5,[17,22]]]]]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[2,5],[2,5],[2,5],[2,5],0,0,0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],2],[[],2],[[],2],[[],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],0,0,0,0,0,[[]],[[]],[[]],[[]],0,0,0,0,[22,[[24,[23]]]],[18,[[24,[23]]]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[25,[[20,[26]]]],[[25,27,23,27,23],[[20,[26]]]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[2,5],[2,5],[-1,-1,[]],[-1,-1,[]],[[],2],[[],2],[-1,-2,[],[]],[-1,-2,[],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],0,[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],0,0,0,[[]],[[]],0,0,[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[28,[[20,[29]]]],[[28,27,27],[[20,[29]]]],[[14,15,16,21,30,31],[[20,[[5,[17,32]]]]]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[2,5],[2,5],[2,5],0,0,0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[[],2],[[],2],[[],2],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],0,[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,[32,[[24,[23]]]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[33,[[20,[34]]]],[[33,23],[[20,[34]]]],0,[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[2,5],[2,5],0,[-1,-1,[]],[-1,-1,[]],[[],2],[[],2],[-1,-2,[],[]],[-1,-2,[],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],0,0,0,0,[[]],[[]],0,0,[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[35,[[20,[36]]]],[[35,27],[[20,[36]]]],0,0,[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[2,5],[2,5],0,[-1,-1,[]],[-1,-1,[]],[[],2],[[],2],[-1,-2,[],[]],[-1,-2,[],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],0,[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],0,0,0,0,[[]],[[]],0,0,0,[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[37,[[20,[38]]]],[[37,27],[[20,[38]]]],0,0,[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[2,5],[2,5],[-1,-1,[]],[-1,-1,[]],[[],2],[[],2],[-1,-2,[],[]],[-1,-2,[],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],0,0,[[]],[[]],0,0,0,[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,[[-1,39],5,[]],[-1,1,[]],[-1,1,[]],[-1,40,[]],[-1,-2,[],[]],[-1,-2,[],[]],[41,41],[[-1,-2],5,[],[]],[2,-1,[]],[2,-1,[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[2,5],[[41,42],43],[[41,42],43],[-1,-1,[]],[[],2],[-1,-2,[],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[],[[4,[9,10]]]],[[]],[-1,-2,[],[]],[-1,44,[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,13,[]],[[[6,[-1]]],[[6,[1]]],[]],[-1,1,[]],[-1,1,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,39],5,[]],[[-1,39],5,[]],[[-1,39],5,[]],[[-1,39],5,[]],[[-1,39],5,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],45],[46,46],[47,47],[48,48],[49,49],[50,50],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],0,0,[-1,[[4,[46,51]]],52],[-1,[[4,[47,51]]],52],[-1,[[4,[48,51]]],52],[-1,[[4,[49,51]]],52],[-1,[[4,[50,51]]],52],[-1,[[54,[[6,[53]]]]],[55,56,57]],[-1,[[54,[[6,[53]]]]],[55,56,57]],[-1,[[54,[[6,[53]]]]],[55,56,57]],[-1,[[54,[[6,[53]]]]],[55,56,57]],[-1,[[54,[[6,[53]]]]],[55,56,57]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[2,5],[2,5],[2,5],[2,5],[2,5],[[46,-1],[[4,[2,51]]],58],[[47,-1],[[4,[2,51]]],58],[[48,-1],[[4,[2,51]]],58],[[49,-1],[[4,[2,51]]],58],[[50,-1],[[4,[2,51]]],58],[[46,-1],[[54,[[6,[53]]]]],[59,56,57]],[[47,-1],[[54,[[6,[53]]]]],[59,56,57]],[[48,-1],[[54,[[6,[53]]]]],[59,56,57]],[[49,-1],[[54,[[6,[53]]]]],[59,56,57]],[[50,-1],[[54,[[6,[53]]]]],[59,56,57]],[[46,42],43],[[47,42],43],[[48,42],43],[[49,42],43],[[50,42],43],0,0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],2],[[],2],[[],2],[[],2],[[],2],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0],"c":[],"p":[[8,"Any",725],[15,"usize"],[3,"With",726],[4,"Result",727],[15,"tuple"],[3,"Box",728],[3,"Arc",729],[3,"Rc",730],[3,"Layout",731],[3,"LayoutError",731],[15,"u8"],[4,"ConsensusFunction",0],[3,"TypeId",725],[3,"ZkBinary",732],[3,"ProvingKey",733],[3,"ConsensusBurnInputInfo",39],[3,"Proof",733],[3,"ConsensusBurnRevealed",39],[3,"SecretKey",734],[6,"Result",735],[3,"ConsensusMintOutputInfo",39],[3,"ConsensusMintRevealed",39],[6,"Base",736],[3,"Vec",737],[3,"ConsensusGenesisStakeCallBuilder",157],[3,"ConsensusGenesisStakeCallDebris",157],[6,"Scalar",736],[3,"ConsensusProposalCallBuilder",214],[3,"ConsensusProposalCallDebris",214],[3,"Slot",738],[3,"VrfProof",739],[3,"ConsensusProposalRevealed",214],[3,"ConsensusStakeCallBuilder",317],[3,"ConsensusStakeCallDebris",317],[3,"ConsensusUnstakeRequestCallBuilder",376],[3,"ConsensusUnstakeRequestCallDebris",376],[3,"ConsensusUnstakeCallBuilder",437],[3,"ConsensusUnstakeCallDebris",437],[3,"Private",740],[8,"Error",741],[4,"ConsensusError",495],[3,"Formatter",742],[6,"Result",742],[3,"String",743],[15,"u64"],[3,"ConsensusGenesisStakeParamsV1",532],[3,"ConsensusGenesisStakeUpdateV1",532],[3,"ConsensusProposalParamsV1",532],[3,"ConsensusProposalUpdateV1",532],[3,"ConsensusUnstakeRequestParamsV1",532],[3,"Error",744],[8,"Read",745],[8,"Future",746],[3,"Pin",747],[8,"AsyncRead",748],[8,"Unpin",749],[8,"Send",749],[8,"Write",745],[8,"AsyncWrite",748]],"b":[[513,"impl-Display-for-ConsensusError"],[514,"impl-Debug-for-ConsensusError"]]},\
"darkfi_contract_test_harness":{"doc":"","t":"NNNNNNNNNNNNNNENNNNNNNNDEDLLLLLLLLLLALLLLLLLLAAAMAAMALMMALMMALALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLMLLLLFLLLLLLLLLLLLLLLLMLLLLAAMAAAALLLLLLLLLMMLLLLLMLLLLLLLLLMLLLLMLLLLLLLLLLLLLLMLALLLLMDLLLLMMLLLLLLLLLLLLLLMLLLLLLLMLRGRGMMFMMFF","n":["Alice","Bob","Charlie","ConsensusGenesisStake","ConsensusProposal","ConsensusStake","ConsensusUnstake","ConsensusUnstakeRequest","Dao","DaoExec","DaoMint","DaoPropose","DaoVote","Faucet","Holder","MoneyAirdrop","MoneyGenesisMint","MoneyOtcSwap","MoneyPoWReward","MoneyTokenFreeze","MoneyTokenMint","MoneyTransfer","Rachel","TestHarness","TxAction","Wallet","airdrop_native","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","assert_trees","benchmarks","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","consensus_genesis_stake","consensus_proposal","consensus_stake","consensus_staked_merkle_tree","consensus_unstake","consensus_unstake_request","consensus_unstaked_merkle_tree","dao_exec","dao_exec","dao_leafs","dao_merkle_tree","dao_mint","dao_mint","dao_prop_leafs","dao_proposals_tree","dao_propose","dao_propose","dao_vote","dao_vote","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","execute_airdrop","execute_airdrop_native_tx","execute_dao_exec_tx","execute_dao_mint_tx","execute_dao_propose_tx","execute_dao_vote_tx","execute_erroneous_pow_reward_tx","execute_erroneous_proposal_tx","execute_erroneous_txs","execute_genesis_mint_tx","execute_genesis_stake_tx","execute_multiple_transfer_txs","execute_otc_swap_tx","execute_pow_reward_tx","execute_proposal","execute_proposal_tx","execute_stake","execute_stake_tx","execute_token_freeze_tx","execute_token_mint_tx","execute_transfer_tx","execute_unstake","execute_unstake_request","execute_unstake_request_tx","execute_unstake_tx","fmt","fmt","from","from","from","from","gather_consensus_staked_owncoin","gather_consensus_unstaked_owncoin","gather_multiple_owncoins","gather_owncoin","gather_owncoin_at_index","generate_slot","genesis_block","genesis_mint","genesis_stake","get_hash","get_hash","get_slot_by_slot","hash","hash","holders","init","init","init","init","init_logger","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","keypair","layout_raw","layout_raw","layout_raw","layout_raw","money_airdrop","money_genesis_mint","money_merkle_tree","money_otc_swap","money_pow_reward","money_token","money_transfer","new","new","otc_swap","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pow_reward","proposal","proving_keys","spent_money_coins","stake","statistics","token_freeze","token_id","token_mint","token_mint_authority","transfer","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","tx_action_benchmarks","type_id","type_id","type_id","type_id","unspent_money_coins","unstake","unstake_request","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","validator","verify_transfer_tx","vks","vzip","vzip","vzip","vzip","wallet","TxActionBenchmarks","as_any","as_any_mut","borrow","borrow_mut","broadcasted_sizes","creation_times","default","deref","deref_mut","deserialize","drop","from","init","into","into_any","into_any_arc","into_any_rc","layout_raw","new","pointer_metadata","sizes","statistics","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","verify_times","vzip","PKS_HASH","Pks","VKS_HASH","Vks","buf","buf","inject","len","len","pks_path","read_or_gen_vks_and_pks"],"q":[[0,"darkfi_contract_test_harness"],[223,"darkfi_contract_test_harness::benchmarks"],[254,"darkfi_contract_test_harness::vks"],[265,"pasta_curves::pallas"],[266,"core::option"],[267,"darkfi::tx"],[268,"darkfi_money_contract::model"],[269,"darkfi::error"],[270,"core::any"],[271,"darkfi_dao_contract::client::mint"],[272,"darkfi_dao_contract::model"],[273,"darkfi_dao_contract::client::propose"],[274,"pasta_curves::pallas"],[275,"darkfi_dao_contract::model"],[276,"darkfi_dao_contract::model"],[277,"core::result"],[278,"darkfi_money_contract::client"],[279,"darkfi_money_contract::model"],[280,"alloc::vec"],[281,"darkfi_money_contract::model"],[282,"darkfi_money_contract::client"],[283,"core::fmt"],[284,"core::marker"],[285,"core::hash"],[286,"alloc::sync"],[287,"alloc::rc"],[288,"core::alloc::layout"],[289,"core::alloc::layout"],[290,"darkfi_sdk::crypto::keypair"],[291,"core::any"],[292,"std::path"]],"d":["","","","","","","","","","","","","","","Enum representing configured wallet holders","","","","","","","","","","Enum representing transaction actions","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","This should be used after transfer call, so we can mark …","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Auxiliary struct to calculate transaction actions …","","","","","Vector holding each transaction broadcasted size in Bytes","Vector holding each transaction creation time","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","Vector holding each transaction size in Bytes","","","","","","","","Vector holding each transaction verify time","","","","Update this if any circuits are changed","(Bincode, Namespace, VK)","","","","","","",""],"i":[3,3,3,27,27,27,27,27,3,27,27,27,27,3,0,27,27,27,27,27,27,27,3,0,0,0,1,57,1,3,27,57,1,3,27,1,0,57,1,3,27,57,1,3,27,0,0,0,57,0,0,57,0,1,57,57,0,1,57,57,0,1,0,1,57,1,3,27,57,1,3,27,57,1,3,27,57,1,3,27,3,27,3,3,3,3,27,27,27,27,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,27,57,1,3,27,1,1,1,1,1,1,1,1,1,3,27,1,3,27,1,57,1,3,27,0,57,1,3,27,57,1,3,27,57,1,3,27,57,1,3,27,57,57,1,3,27,0,0,57,0,0,0,0,57,1,1,57,1,3,27,1,1,1,57,1,1,1,1,1,57,1,57,1,3,27,57,1,3,27,1,57,1,3,27,57,1,1,57,1,3,27,57,1,3,27,57,1,3,27,57,1,0,57,1,3,27,57,0,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,0,0,0,0,56,64,0,56,64,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2,3,[5,[4]],[5,[4]],[5,[4]],[5,[4]]],[[9,[[8,[6,7]]]]]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[[1,[11,[3]]],8],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,[[1,12,13,14,2,2,15,15],[[9,[[8,[6,7,16]]]]]],0,0,0,[[1,12,17],[[9,[[8,[6,18]]]]]],0,0,0,[[1,3,3,2,19,12,13],[[9,[[8,[6,20,14]]]]]],0,[[1,3,17,21,12,14,22],[[9,[[8,[6,23]]]]]],[24,-1,[]],[24,-1,[]],[24,-1,[]],[24,-1,[]],[24,-1,[]],[24,-1,[]],[24,-1,[]],[24,-1,[]],[[-1,-2],[[26,[[25,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[26,[[25,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[26,[[25,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[26,[[25,[-3,-4]]]]],[],[],[],[]],[24,8],[24,8],[24,8],[24,8],[[3,3],21],[[27,27],21],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[1,[11,[3]],3,2,2],[[9,[28]]]],[[1,3,6,7,2],[[9,[8]]]],[[1,3,6,7,16,2],[[9,[8]]]],[[1,3,6,18,2],[[9,[8]]]],[[1,3,6,20,2],[[9,[8]]]],[[1,3,6,23,2],[[9,[8]]]],[[1,3,6,2],[[9,[8]]]],[[1,3,6,2],[[9,[8]]]],[[1,27,3,[11,[6]],2,24],[[9,[8]]]],[[1,3,6,29,2],[[9,[8]]]],[[1,3,6,30,2],[[9,[8]]]],[[1,3,[11,[6]],[31,[7]],2,21],[[9,[8]]]],[[1,3,6,7,2,21],[[9,[8]]]],[[1,3,6,32,2],[[9,[8]]]],[[1,[11,[3]],3,2,33,34],[[9,[34]]]],[[1,3,6,35,2],[[9,[8]]]],[[1,[11,[3]],3,2,28,2],[[9,[34]]]],[[1,3,6,36,2],[[9,[8]]]],[[1,3,6,37,2],[[9,[8]]]],[[1,3,6,29,2],[[9,[8]]]],[[1,3,6,7,2,21],[[9,[8]]]],[[1,[11,[3]],3,2,34],[[9,[28]]]],[[1,[11,[3]],3,2,34],[[9,[34]]]],[[1,3,6,38,2],[[9,[8]]]],[[1,3,6,39,2],[[9,[8]]]],[[3,40],41],[[27,40],41],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[1,3,42,[5,[43]]],[[9,[34]]]],[[1,3,42,[5,[43]]],[[9,[34]]]],[[1,3,[11,[44]]],[[9,[[31,[28]]]]]],[[1,3,44,[5,[43]]],[[9,[28]]]],[[1,3,[11,[44]],24],[[9,[28]]]],[[1,2],[[9,[33]]]],0,[[1,3,2],[[9,[[8,[6,29]]]]]],[[1,3,2],[[9,[[8,[6,30]]]]]],[[-1,-2],2,[45,46],47],[[-1,-2],2,[45,46],47],[[1,2],[[9,[33]]]],[[3,-1],8,48],[[27,-1],8,48],0,[[],24],[[],24],[[],24],[[],24],[[],8],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[49,[-1]]],[[49,[10]]],[]],[[[49,[-1]]],[[49,[10]]],[]],[[[49,[-1]]],[[49,[10]]],[]],[[[49,[-1]]],[[49,[10]]],[]],[[[50,[-1]]],[[50,[10]]],[]],[[[50,[-1]]],[[50,[10]]],[]],[[[50,[-1]]],[[50,[10]]],[]],[[[50,[-1]]],[[50,[10]]],[]],[[[51,[-1]]],[[51,[10]]],[]],[[[51,[-1]]],[[51,[10]]],[]],[[[51,[-1]]],[[51,[10]]],[]],[[[51,[-1]]],[[51,[10]]],[]],0,[[],[[26,[52,53]]]],[[],[[26,[52,53]]]],[[],[[26,[52,53]]]],[[],[[26,[52,53]]]],0,0,0,0,0,0,0,[[17,54,[11,[55]],56],[[9,[57]]]],[[[11,[58]]],[[9,[1]]]],[[1,3,28,3,28],[[9,[[8,[6,7]]]]]],[[]],[[]],[[]],[[]],[[1,3,[5,[3]],2,[5,[2]]],[[9,[[8,[6,32]]]]]],[[1,3,33,34],[[9,[[8,[6,35,43,43]]]]]],0,0,[[1,3,2,28,4],[[9,[[8,[6,36,43]]]]]],[1,8],[[1,3],[[9,[[8,[6,37]]]]]],[[1,3],19],[[1,2,3,3,[5,[4]],[5,[4]]],[[9,[[8,[6,29]]]]]],0,[[1,2,3,3,[11,[28]],19],[[9,[[8,[6,7,[31,[28]]]]]]]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],0,[-1,59,[]],[-1,59,[]],[-1,59,[]],[-1,59,[]],0,[[1,3,34],[[9,[[8,[6,39,43]]]]]],[[1,3,2,34],[[9,[[8,[6,38,43,43]]]]]],[[[49,[-1]]],[[49,[10]]],[]],[[[49,[-1]]],[[49,[10]]],[]],[[[49,[-1]]],[[49,[10]]],[]],[[[49,[-1]]],[[49,[10]]],[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],0,[[1,3,6,2],[[9,[8]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,10,[]],[-1,10,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[],60],[24,-1,[]],[24,-1,[]],[[-1,-2],[[26,[[25,[-3,-4]]]]],[],[],[],[]],[24,8],[-1,-1,[]],[[],24],[-1,-2,[],[]],[[[49,[-1]]],[[49,[10]]],[]],[[[50,[-1]]],[[50,[10]]],[]],[[[51,[-1]]],[[51,[10]]],[]],[[],[[26,[52,53]]]],[[],60],[[]],0,[[60,27],8],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,59,[]],[[[49,[-1]]],[[49,[10]]],[]],[-1,10,[]],[-1,10,[]],0,[-1,-2,[],[]],0,0,0,0,0,0,[[61,56],[[9,[8]]]],0,0,[62,[[9,[63]]]],[[],[[9,[[8,[64,56]]]]]]],"c":[],"p":[[3,"TestHarness",0],[15,"u64"],[4,"Holder",0],[6,"Base",265],[4,"Option",266],[3,"Transaction",267],[3,"MoneyTransferParamsV1",268],[15,"tuple"],[6,"Result",269],[8,"Any",270],[15,"slice"],[3,"DaoInfo",271],[3,"DaoBulla",272],[3,"DaoProposalInfo",273],[6,"Scalar",265],[3,"DaoExecParams",272],[3,"Keypair",274],[3,"DaoMintParams",272],[3,"TokenId",275],[3,"DaoProposeParams",272],[15,"bool"],[3,"DaoProposalBulla",272],[3,"DaoVoteParams",272],[15,"usize"],[3,"With",276],[4,"Result",277],[4,"TxAction",0],[3,"OwnCoin",278],[3,"MoneyTokenMintParamsV1",268],[3,"ConsensusGenesisStakeParamsV1",279],[3,"Vec",280],[3,"MoneyPoWRewardParamsV1",268],[3,"Slot",281],[3,"ConsensusOwnCoin",278],[3,"ConsensusProposalParamsV1",279],[3,"ConsensusStakeParamsV1",268],[3,"MoneyTokenFreezeParamsV1",268],[3,"ConsensusUnstakeReqParamsV1",268],[3,"MoneyUnstakeParamsV1",268],[3,"Formatter",282],[6,"Result",282],[3,"ConsensusOutput",268],[3,"SecretKey",274],[3,"Output",268],[8,"Hash",283],[8,"Sized",284],[8,"BuildHasher",283],[8,"Hasher",283],[3,"Box",285],[3,"Arc",286],[3,"Rc",287],[3,"Layout",288],[3,"LayoutError",288],[3,"BlockInfo",289],[3,"PublicKey",274],[6,"Vks",254],[3,"Wallet",0],[3,"String",290],[3,"TypeId",270],[3,"TxActionBenchmarks",223],[3,"Db",291],[15,"str"],[3,"PathBuf",292],[6,"Pks",254]],"b":[]},\
"darkfi_dao_contract":{"doc":"Smart contract implementing Anonymous DAOs on DarkFi","t":"RRRRRRRRRRRRRRENNNNLLLLALLLLLALLLLLLLLALLLLLLLLLRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRCCCCCCCCCACAAADMMLLLLMMLLLLLMLMMMLLLLLLLMMLLLLLLMLMMDLMMLLLLMLLLLLLLMLLLLLLFLMMMLLLLLLLLDDDDLMLLLLLLLLMLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLMLMMLLLLMMMMLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDMMLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLMLMMLLLMMMLLLLLLLLLLLLLLLLLLMMMLLLMMNNENNNNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDDDDDDDDDLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMLLLLLLLLLLLLLLMMMMMMMMMMMLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLMM","n":["DAO_CONTRACT_DB_DAO_BULLAS","DAO_CONTRACT_DB_DAO_MERKLE_ROOTS","DAO_CONTRACT_DB_INFO_TREE","DAO_CONTRACT_DB_PROPOSAL_BULLAS","DAO_CONTRACT_DB_VOTE_NULLIFIERS","DAO_CONTRACT_KEY_DAO_MERKLE_TREE","DAO_CONTRACT_KEY_DB_VERSION","DAO_CONTRACT_KEY_LATEST_DAO_ROOT","DAO_CONTRACT_ZKAS_DAO_EXEC_NS","DAO_CONTRACT_ZKAS_DAO_MINT_NS","DAO_CONTRACT_ZKAS_DAO_PROPOSE_BURN_NS","DAO_CONTRACT_ZKAS_DAO_PROPOSE_MAIN_NS","DAO_CONTRACT_ZKAS_DAO_VOTE_BURN_NS","DAO_CONTRACT_ZKAS_DAO_VOTE_MAIN_NS","DaoFunction","Exec","Mint","Propose","Vote","as_any","as_any_mut","borrow","borrow_mut","client","deref","deref_mut","deserialize","drop","eq","error","fmt","from","init","into","into_any","into_any_arc","into_any_rc","layout_raw","model","pointer_metadata","try_from","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","DAO_COINS_COL_COIN_ID","DAO_COINS_COL_DAO_ID","DAO_COINS_TABLE","DAO_DAOS_COL_APPROVAL_RATIO_BASE","DAO_DAOS_COL_APPROVAL_RATIO_QUOT","DAO_DAOS_COL_BULLA_BLIND","DAO_DAOS_COL_CALL_INDEX","DAO_DAOS_COL_DAO_ID","DAO_DAOS_COL_GOV_TOKEN_ID","DAO_DAOS_COL_LEAF_POSITION","DAO_DAOS_COL_NAME","DAO_DAOS_COL_PROPOSER_LIMIT","DAO_DAOS_COL_QUORUM","DAO_DAOS_COL_SECRET","DAO_DAOS_COL_TX_HASH","DAO_DAOS_TABLE","DAO_PROPOSALS_COL_AMOUNT","DAO_PROPOSALS_COL_BULLA_BLIND","DAO_PROPOSALS_COL_CALL_INDEX","DAO_PROPOSALS_COL_DAO_ID","DAO_PROPOSALS_COL_LEAF_POSITION","DAO_PROPOSALS_COL_MONEY_SNAPSHOT_TREE","DAO_PROPOSALS_COL_OUR_VOTE_ID","DAO_PROPOSALS_COL_PROPOSAL_ID","DAO_PROPOSALS_COL_RECV_PUBLIC","DAO_PROPOSALS_COL_SENDCOIN_TOKEN_ID","DAO_PROPOSALS_COL_TX_HASH","DAO_PROPOSALS_TABLE","DAO_TREES_COL_DAOS_TREE","DAO_TREES_COL_PROPOSALS_TREE","DAO_TREES_TABLE","DAO_VOTES_COL_ALL_VOTE_BLIND","DAO_VOTES_COL_ALL_VOTE_VALUE","DAO_VOTES_COL_CALL_INDEX","DAO_VOTES_COL_PROPOSAL_ID","DAO_VOTES_COL_TX_HASH","DAO_VOTES_COL_VOTE_ID","DAO_VOTES_COL_VOTE_OPTION","DAO_VOTES_COL_YES_VOTE_BLIND","DAO_VOTES_TABLE","DaoExecCall","DaoInfo","DaoProposalInfo","DaoProposeCall","DaoProposeNote","DaoProposeStakeInput","DaoVoteCall","DaoVoteInput","DaoVoteNote","exec","make_mint_call","mint","propose","vote","DaoExecCall","all_vote_blind","all_vote_value","as_any","as_any_mut","borrow","borrow_mut","dao","dao_serial","deref","deref_mut","deserialize","drop","from","hook_dao_exec","init","input_user_data_blind","input_value","input_value_blind","into","into_any","into_any_arc","into_any_rc","layout_raw","make","pointer_metadata","proposal","signature_secret","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","user_serial","vzip","yes_vote_blind","yes_vote_value","DaoInfo","__clone_box","approval_ratio_base","approval_ratio_quot","as_any","as_any_mut","borrow","borrow_mut","bulla_blind","clone","clone_into","deref","deref_mut","deserialize","drop","from","gov_token_id","init","into","into_any","into_any_arc","into_any_rc","layout_raw","make_mint_call","pointer_metadata","proposer_limit","public_key","quorum","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","DaoProposalInfo","DaoProposeCall","DaoProposeNote","DaoProposeStakeInput","__clone_box","amount","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","blind","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","dao","dao_leaf_position","dao_merkle_path","dao_merkle_root","decode","decode","decode_async","decode_async","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","dest","drop","drop","drop","drop","encode","encode","encode_async","encode_async","from","from","from","from","init","init","init","init","inputs","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","layout_raw","layout_raw","layout_raw","layout_raw","leaf_position","make","merkle_path","note","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","proposal","proposal","secret","signature_secret","to_owned","token_id","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","DaoVoteCall","DaoVoteInput","DaoVoteNote","all_vote_blind","all_vote_value","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","dao","decode","decode_async","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","encode","encode_async","from","from","from","init","init","init","inputs","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","layout_raw","layout_raw","layout_raw","leaf_position","make","merkle_path","note","pointer_metadata","pointer_metadata","pointer_metadata","proposal","secret","signature_secret","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","vote_keypair","vote_option","vote_option","vzip","vzip","vzip","yes_vote_blind","yes_vote_blind","CoinAlreadySpent","DaoAlreadyExists","DaoError","DoubleVote","ExecCallInvalidFormat","ExecCallOutputsLenNot2","ExecCallValueMismatch","InvalidCalls","InvalidDaoMerkleRoot","InvalidInputMerkleRoot","ProposalAlreadyExists","ProposalEnded","ProposalInputsEmpty","ProposalNonexistent","VoteCommitMismatch","VoteInputsEmpty","__clone_box","as_any","as_any_mut","as_error","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","fmt","fmt","from","init","into","into_any","into_any_arc","into_any_rc","layout_raw","pointer_metadata","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","DaoBlindAggregateVote","DaoBulla","DaoExecParams","DaoExecUpdate","DaoMintParams","DaoMintUpdate","DaoProposalBulla","DaoProposalMetadata","DaoProposeParams","DaoProposeParamsInput","DaoProposeUpdate","DaoVoteParams","DaoVoteParamsInput","DaoVoteUpdate","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","aggregate","all_vote_commit","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","blind_total_vote","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","dao_bulla","dao_bulla","dao_merkle_root","dao_pubkey","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode_async","decode_async","decode_async","decode_async","decode_async","decode_async","decode_async","decode_async","decode_async","decode_async","decode_async","decode_async","decode_async","decode_async","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode_async","encode_async","encode_async","encode_async","encode_async","encode_async","encode_async","encode_async","encode_async","encode_async","encode_async","encode_async","encode_async","encode_async","ended","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bytes","from_bytes","from_str","from_str","get_hash","get_hash","hash","hash","init","init","init","init","init","init","init","init","init","init","init","init","init","init","inner","inner","inputs","inputs","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","merkle_root","merkle_root","note","note","nullifier","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","proposal","proposal","proposal_bulla","proposal_bulla","proposal_bulla","proposal_bulla","proposal_metadata","signature_public","signature_public","snapshot_root","snapshot_root","to_bytes","to_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","token_commit","token_commit","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","value_commit","vote_aggregate","vote_commit","vote_nullifiers","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","yes_vote_commit","yes_vote_commit"],"q":[[0,"darkfi_dao_contract"],[48,"darkfi_dao_contract::client"],[102,"darkfi_dao_contract::client::exec"],[140,"darkfi_dao_contract::client::mint"],[176,"darkfi_dao_contract::client::propose"],[301,"darkfi_dao_contract::client::vote"],[393,"darkfi_dao_contract::error"],[440,"darkfi_dao_contract::model"],[965,"core::any"],[966,"rkyv::with"],[967,"core::result"],[968,"core::fmt"],[969,"core::fmt"],[970,"alloc::sync"],[971,"alloc::rc"],[972,"core::alloc::layout"],[973,"core::alloc::layout"],[974,"darkfi::zk::proof"],[975,"darkfi::zk::proof"],[976,"darkfi::error"],[977,"dyn_clone::sealed"],[978,"darkfi_sdk::crypto::keypair"],[979,"std::io::error"],[980,"std::io"],[981,"core::future::future"],[982,"core::pin"],[983,"futures_io::if_std"],[984,"core::marker"],[985,"core::marker"],[986,"alloc::string"],[987,"pasta_curves::pallas"],[988,"darkfi_sdk::error"],[989,"core::hash"],[990,"core::marker"]],"d":["","","","","","","","","zkas dao exec circuit namespace","zkas dao mint circuit namespace","zkas dao propose input circuit namespace","zkas dao propose main circuit namespace","zkas dao vote input circuit namespace","zkas dao vote main circuit namespace","Functions available in the contract","","","","","","","","","Client API for interaction with this smart contract","","","","","","Internal contract errors","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","Call parameters definitions","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Provides core structs for DAO::propose()","Provides core structs for DAO::vote()","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Represents a single or multiple blinded votes. These can …","A <code>DaoBulla</code> represented in the state","Parameters for <code>Dao::Exec</code>","State update for <code>Dao::Exec</code>","Parameters for <code>Dao::Mint</code>","State update for <code>Dao::Mint</code>","A <code>DaoProposalBulla</code> represented in the state","Metadata for a DAO proposal on the blockchain","Parameters for <code>Dao::Propose</code>","Input for a DAO proposal","State update for <code>Dao::Propose</code>","Parameters for <code>Dao::Vote</code>","Input for a DAO proposal vote","State update for <code>Dao::Vote</code>","","","","","","","","","","","","","","","Aggregate a vote with existing one","All value staked in the vote","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Aggregated blinds for the vote commitments","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The DAO bulla","Revealed DAO bulla","Merkle root of the DAO in the DAO state","The DAO public key","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Proposal closed","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create a <code>DaoBulla</code> object from given bytes, erroring if the …","Create a <code>DaoBulla</code> object from given bytes, erroring if the …","","","","","","","","","","","","","","","","","","","","","Reference the raw inner base field element","Reference the raw inner base field element","Inputs for the proposal","Inputs for the vote","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Merkle root for the input’s inclusion proof","Merkle root for the input’s inclusion proof","Encrypted note","Encrypted note","Revealed nullifier","","","","","","","","","","","","","","","The proposal bulla","The proposal bulla","Bulla of the DAO proposal","Minted proposal bulla","Proposal bulla being voted on","The proposal bulla being voted on","The updated proposal metadata","Public key used for signing","Public key used for signing","Snapshotted Merkle root in the Money state","Snapshotted Merkle root in the Money state","Convert the <code>DaoBulla</code> type into 32 raw bytes","Convert the <code>DaoBulla</code> type into 32 raw bytes","","","","","","","","","","","","","","","","","Token ID commitment for the proposal","Token commitment for the vote inputs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Value commitment for the input","Vote aggregate","Vote commitment","Vote nullifiers,","","","","","","","","","","","","","","","Commitment for yes votes","Weighted vote commit"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,0,6,6,6,6,6,0,6,6,6,6,6,6,6,6,0,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,0,25,25,25,25,25,25,25,25,25,25,25,25,0,0,0,0,28,28,66,39,28,31,66,39,28,31,28,66,39,28,31,66,39,28,31,28,28,39,39,39,39,28,31,28,31,66,39,28,31,66,39,28,31,66,39,28,31,28,66,39,28,31,28,31,28,31,66,39,28,31,66,39,28,31,39,66,39,28,31,66,39,28,31,66,39,28,31,66,39,28,31,66,39,28,31,66,39,66,66,66,39,28,31,39,31,66,66,28,28,66,39,28,31,66,39,28,31,66,39,28,31,66,39,28,31,66,39,28,31,66,39,28,31,66,39,28,31,0,0,0,41,41,67,42,41,67,42,41,67,42,41,67,42,41,42,41,41,67,42,41,67,42,41,67,42,41,67,42,41,41,41,67,42,41,67,42,41,42,67,42,41,67,42,41,67,42,41,67,42,41,67,42,41,67,42,67,67,67,42,41,42,67,67,67,42,41,67,42,41,67,42,41,67,42,41,67,42,41,67,42,41,42,42,41,67,42,41,42,41,45,45,0,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,49,27,50,40,51,52,53,43,54,55,47,20,56,47,47,48,49,27,50,40,51,52,53,43,54,55,47,20,56,48,49,27,50,40,51,52,53,43,54,55,47,20,56,20,48,49,27,50,40,51,52,53,43,54,55,47,20,56,48,49,27,50,40,51,52,53,43,54,55,47,20,56,48,49,27,50,40,51,52,53,43,54,55,47,20,56,48,49,27,50,40,51,52,53,43,54,55,47,20,56,27,50,40,27,48,49,27,50,40,51,52,53,43,54,55,47,20,56,48,49,27,50,40,51,52,53,43,54,55,47,20,56,47,48,49,27,50,40,51,52,53,43,54,55,47,20,56,48,49,27,50,40,51,52,53,43,54,55,47,20,56,48,49,27,50,40,51,52,53,43,54,55,47,20,56,48,49,27,50,40,51,52,53,43,54,55,47,20,56,48,49,27,50,40,51,52,53,43,54,55,47,20,56,48,49,27,50,40,51,52,53,43,54,55,47,20,56,53,48,49,48,48,48,48,49,49,49,49,48,48,49,49,27,50,40,51,52,53,43,54,55,47,20,56,48,48,49,49,27,50,40,51,52,53,43,54,55,47,20,56,48,49,48,49,48,49,48,49,48,49,27,50,40,51,52,53,43,54,55,47,20,56,48,49,40,43,48,49,27,50,40,51,52,53,43,54,55,47,20,56,48,49,27,50,40,51,52,53,43,54,55,47,20,56,48,49,27,50,40,51,52,53,43,54,55,47,20,56,48,49,27,50,40,51,52,53,43,54,55,47,20,56,48,49,27,50,40,51,52,53,43,54,55,47,20,56,51,54,40,43,54,48,49,27,50,40,51,52,53,43,54,55,47,20,56,20,56,40,52,43,55,55,51,54,52,53,48,49,48,49,27,50,40,51,52,53,43,54,55,47,20,56,48,49,40,43,48,49,27,50,40,51,52,53,43,54,55,47,20,56,48,49,27,50,40,51,52,53,43,54,55,47,20,56,48,49,27,50,40,51,52,53,43,54,55,47,20,56,48,49,27,50,40,51,52,53,43,54,55,47,20,56,48,49,27,50,40,51,52,53,43,54,55,47,20,56,48,49,27,50,40,51,52,53,43,54,55,47,20,56,51,53,54,55,48,49,27,50,40,51,52,53,43,54,55,47,20,56,43,47],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,1,[]],[-1,1,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[2,-1,[]],[2,-1,[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[2,5],[[6,6],7],0,[[6,8],9],[-1,-1,[]],[[],2],[-1,-2,[],[]],[[[10,[-1]]],[[10,[1]]],[]],[[[11,[-1]]],[[11,[1]]],[]],[[[12,[-1]]],[[12,[1]]],[]],[[],[[4,[13,14]]]],0,[[]],[-1,[[4,[-2]]],[],[]],[15,[[4,[6]]]],[-1,[[4,[-2]]],[],[]],[-1,16,[]],[[[10,[-1]]],[[10,[1]]],[]],[-1,1,[]],[-1,1,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,1,[]],[-1,1,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[2,-1,[]],[2,-1,[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[2,5],[-1,-1,[]],0,[[],2],0,0,0,[-1,-2,[],[]],[[[10,[-1]]],[[10,[1]]],[]],[[[11,[-1]]],[[11,[1]]],[]],[[[12,[-1]]],[[12,[1]]],[]],[[],[[4,[13,14]]]],[[17,18,19],[[23,[[5,[20,[22,[21]]]]]]]],[[]],0,0,[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,16,[]],[[[10,[-1]]],[[10,[1]]],[]],[-1,1,[]],[-1,1,[]],0,[-1,-2,[],[]],0,0,0,[[-1,24],5,[]],0,0,[-1,1,[]],[-1,1,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[25,25],[[-1,-2],5,[],[]],[2,-1,[]],[2,-1,[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[2,5],[-1,-1,[]],0,[[],2],[-1,-2,[],[]],[[[10,[-1]]],[[10,[1]]],[]],[[[11,[-1]]],[[11,[1]]],[]],[[[12,[-1]]],[[12,[1]]],[]],[[],[[4,[13,14]]]],[[25,26,18,19],[[23,[[5,[27,[22,[21]]]]]]]],[[]],0,0,0,[-1,-2,[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,16,[]],[[[10,[-1]]],[[10,[1]]],[]],[-1,1,[]],[-1,1,[]],[-1,-2,[],[]],0,0,0,0,[[-1,24],5,[]],0,[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[28,28],[[-1,-2],5,[],[]],0,0,0,0,[-1,[[4,[28,29]]],30],[-1,[[4,[31,29]]],30],[-1,[[33,[[10,[32]]]]],[34,35,36]],[-1,[[33,[[10,[32]]]]],[34,35,36]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],0,[2,5],[2,5],[2,5],[2,5],[[28,-1],[[4,[2,29]]],37],[[31,-1],[[4,[2,29]]],37],[[28,-1],[[33,[[10,[32]]]]],[38,35,36]],[[31,-1],[[33,[[10,[32]]]]],[38,35,36]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],2],[[],2],[[],2],[[],2],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[10,[-1]]],[[10,[1]]],[]],[[[10,[-1]]],[[10,[1]]],[]],[[[10,[-1]]],[[10,[1]]],[]],[[[10,[-1]]],[[10,[1]]],[]],[[[11,[-1]]],[[11,[1]]],[]],[[[11,[-1]]],[[11,[1]]],[]],[[[11,[-1]]],[[11,[1]]],[]],[[[11,[-1]]],[[11,[1]]],[]],[[[12,[-1]]],[[12,[1]]],[]],[[[12,[-1]]],[[12,[1]]],[]],[[[12,[-1]]],[[12,[1]]],[]],[[[12,[-1]]],[[12,[1]]],[]],[[],[[4,[13,14]]]],[[],[[4,[13,14]]]],[[],[[4,[13,14]]]],[[],[[4,[13,14]]]],0,[[39,18,19,18,19],[[23,[[5,[40,[22,[21]]]]]]]],0,0,[[]],[[]],[[]],[[]],0,0,0,0,[-1,-2,[],[]],0,[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[[[10,[-1]]],[[10,[1]]],[]],[[[10,[-1]]],[[10,[1]]],[]],[[[10,[-1]]],[[10,[1]]],[]],[[[10,[-1]]],[[10,[1]]],[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,[[4,[41,29]]],30],[-1,[[33,[[10,[32]]]]],[34,35,36]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[2,5],[2,5],[2,5],[[41,-1],[[4,[2,29]]],37],[[41,-1],[[33,[[10,[32]]]]],[38,35,36]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],2],[[],2],[[],2],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[10,[-1]]],[[10,[1]]],[]],[[[10,[-1]]],[[10,[1]]],[]],[[[10,[-1]]],[[10,[1]]],[]],[[[11,[-1]]],[[11,[1]]],[]],[[[11,[-1]]],[[11,[1]]],[]],[[[11,[-1]]],[[11,[1]]],[]],[[[12,[-1]]],[[12,[1]]],[]],[[[12,[-1]]],[[12,[1]]],[]],[[[12,[-1]]],[[12,[1]]],[]],[[],[[4,[13,14]]]],[[],[[4,[13,14]]]],[[],[[4,[13,14]]]],0,[[42,18,19,18,19],[[23,[[5,[43,[22,[21]]]]]]]],0,0,[[]],[[]],[[]],0,0,0,[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[[[10,[-1]]],[[10,[1]]],[]],[[[10,[-1]]],[[10,[1]]],[]],[[[10,[-1]]],[[10,[1]]],[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,24],5,[]],[-1,1,[]],[-1,1,[]],[-1,44,[]],[-1,-2,[],[]],[-1,-2,[],[]],[45,45],[[-1,-2],5,[],[]],[2,-1,[]],[2,-1,[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[2,5],[[45,8],9],[[45,8],9],[-1,-1,[]],[[],2],[-1,-2,[],[]],[[[10,[-1]]],[[10,[1]]],[]],[[[11,[-1]]],[[11,[1]]],[]],[[[12,[-1]]],[[12,[1]]],[]],[[],[[4,[13,14]]]],[[]],[-1,-2,[],[]],[-1,46,[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,16,[]],[[[10,[-1]]],[[10,[1]]],[]],[-1,1,[]],[-1,1,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,24],5,[]],[[-1,24],5,[]],[[-1,24],5,[]],[[-1,24],5,[]],[[-1,24],5,[]],[[-1,24],5,[]],[[-1,24],5,[]],[[-1,24],5,[]],[[-1,24],5,[]],[[-1,24],5,[]],[[-1,24],5,[]],[[-1,24],5,[]],[[-1,24],5,[]],[[-1,24],5,[]],[[47,47],5],0,[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[48,48],[49,49],[27,27],[50,50],[40,40],[51,51],[52,52],[53,53],[43,43],[54,54],[55,55],[47,47],[20,20],[56,56],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],0,0,0,0,[-1,[[4,[48,29]]],30],[-1,[[4,[49,29]]],30],[-1,[[4,[27,29]]],30],[-1,[[4,[50,29]]],30],[-1,[[4,[40,29]]],30],[-1,[[4,[51,29]]],30],[-1,[[4,[52,29]]],30],[-1,[[4,[53,29]]],30],[-1,[[4,[43,29]]],30],[-1,[[4,[54,29]]],30],[-1,[[4,[55,29]]],30],[-1,[[4,[47,29]]],30],[-1,[[4,[20,29]]],30],[-1,[[4,[56,29]]],30],[-1,[[33,[[10,[32]]]]],[34,35,36]],[-1,[[33,[[10,[32]]]]],[34,35,36]],[-1,[[33,[[10,[32]]]]],[34,35,36]],[-1,[[33,[[10,[32]]]]],[34,35,36]],[-1,[[33,[[10,[32]]]]],[34,35,36]],[-1,[[33,[[10,[32]]]]],[34,35,36]],[-1,[[33,[[10,[32]]]]],[34,35,36]],[-1,[[33,[[10,[32]]]]],[34,35,36]],[-1,[[33,[[10,[32]]]]],[34,35,36]],[-1,[[33,[[10,[32]]]]],[34,35,36]],[-1,[[33,[[10,[32]]]]],[34,35,36]],[-1,[[33,[[10,[32]]]]],[34,35,36]],[-1,[[33,[[10,[32]]]]],[34,35,36]],[-1,[[33,[[10,[32]]]]],[34,35,36]],[[],47],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[2,5],[2,5],[2,5],[2,5],[2,5],[2,5],[2,5],[2,5],[2,5],[2,5],[2,5],[2,5],[2,5],[2,5],[[48,-1],[[4,[2,29]]],37],[[49,-1],[[4,[2,29]]],37],[[27,-1],[[4,[2,29]]],37],[[50,-1],[[4,[2,29]]],37],[[40,-1],[[4,[2,29]]],37],[[51,-1],[[4,[2,29]]],37],[[52,-1],[[4,[2,29]]],37],[[53,-1],[[4,[2,29]]],37],[[43,-1],[[4,[2,29]]],37],[[54,-1],[[4,[2,29]]],37],[[55,-1],[[4,[2,29]]],37],[[47,-1],[[4,[2,29]]],37],[[20,-1],[[4,[2,29]]],37],[[56,-1],[[4,[2,29]]],37],[[48,-1],[[33,[[10,[32]]]]],[38,35,36]],[[49,-1],[[33,[[10,[32]]]]],[38,35,36]],[[27,-1],[[33,[[10,[32]]]]],[38,35,36]],[[50,-1],[[33,[[10,[32]]]]],[38,35,36]],[[40,-1],[[33,[[10,[32]]]]],[38,35,36]],[[51,-1],[[33,[[10,[32]]]]],[38,35,36]],[[52,-1],[[33,[[10,[32]]]]],[38,35,36]],[[53,-1],[[33,[[10,[32]]]]],[38,35,36]],[[43,-1],[[33,[[10,[32]]]]],[38,35,36]],[[54,-1],[[33,[[10,[32]]]]],[38,35,36]],[[55,-1],[[33,[[10,[32]]]]],[38,35,36]],[[47,-1],[[33,[[10,[32]]]]],[38,35,36]],[[20,-1],[[33,[[10,[32]]]]],[38,35,36]],[[56,-1],[[33,[[10,[32]]]]],[38,35,36]],0,[[48,48],7],[[49,49],7],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[48,8],9],[[48,8],9],[[49,8],9],[[49,8],9],[[27,8],9],[[50,8],9],[[40,8],9],[[51,8],9],[[52,8],9],[[53,8],9],[[43,8],9],[[54,8],9],[[55,8],9],[[47,8],9],[[20,8],9],[[56,8],9],[-1,-1,[]],[57,48],[57,49],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[58,[15]]],[[4,[48,59]]]],[[[58,[15]]],[[4,[49,59]]]],[60,[[4,[48]]]],[60,[[4,[49]]]],[[-1,-2],61,[62,63],64],[[-1,-2],61,[62,63],64],[[48,-1],5,65],[[49,-1],5,65],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[48,57],[49,57],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[10,[-1]]],[[10,[1]]],[]],[[[10,[-1]]],[[10,[1]]],[]],[[[10,[-1]]],[[10,[1]]],[]],[[[10,[-1]]],[[10,[1]]],[]],[[[10,[-1]]],[[10,[1]]],[]],[[[10,[-1]]],[[10,[1]]],[]],[[[10,[-1]]],[[10,[1]]],[]],[[[10,[-1]]],[[10,[1]]],[]],[[[10,[-1]]],[[10,[1]]],[]],[[[10,[-1]]],[[10,[1]]],[]],[[[10,[-1]]],[[10,[1]]],[]],[[[10,[-1]]],[[10,[1]]],[]],[[[10,[-1]]],[[10,[1]]],[]],[[[10,[-1]]],[[10,[1]]],[]],[[[11,[-1]]],[[11,[1]]],[]],[[[11,[-1]]],[[11,[1]]],[]],[[[11,[-1]]],[[11,[1]]],[]],[[[11,[-1]]],[[11,[1]]],[]],[[[11,[-1]]],[[11,[1]]],[]],[[[11,[-1]]],[[11,[1]]],[]],[[[11,[-1]]],[[11,[1]]],[]],[[[11,[-1]]],[[11,[1]]],[]],[[[11,[-1]]],[[11,[1]]],[]],[[[11,[-1]]],[[11,[1]]],[]],[[[11,[-1]]],[[11,[1]]],[]],[[[11,[-1]]],[[11,[1]]],[]],[[[11,[-1]]],[[11,[1]]],[]],[[[11,[-1]]],[[11,[1]]],[]],[[[12,[-1]]],[[12,[1]]],[]],[[[12,[-1]]],[[12,[1]]],[]],[[[12,[-1]]],[[12,[1]]],[]],[[[12,[-1]]],[[12,[1]]],[]],[[[12,[-1]]],[[12,[1]]],[]],[[[12,[-1]]],[[12,[1]]],[]],[[[12,[-1]]],[[12,[1]]],[]],[[[12,[-1]]],[[12,[1]]],[]],[[[12,[-1]]],[[12,[1]]],[]],[[[12,[-1]]],[[12,[1]]],[]],[[[12,[-1]]],[[12,[1]]],[]],[[[12,[-1]]],[[12,[1]]],[]],[[[12,[-1]]],[[12,[1]]],[]],[[[12,[-1]]],[[12,[1]]],[]],[[],[[4,[13,14]]]],[[],[[4,[13,14]]]],[[],[[4,[13,14]]]],[[],[[4,[13,14]]]],[[],[[4,[13,14]]]],[[],[[4,[13,14]]]],[[],[[4,[13,14]]]],[[],[[4,[13,14]]]],[[],[[4,[13,14]]]],[[],[[4,[13,14]]]],[[],[[4,[13,14]]]],[[],[[4,[13,14]]]],[[],[[4,[13,14]]]],[[],[[4,[13,14]]]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,[48,[[58,[15]]]],[49,[[58,[15]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,46,[]],[-1,46,[]],0,0,[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[[[10,[-1]]],[[10,[1]]],[]],[[[10,[-1]]],[[10,[1]]],[]],[[[10,[-1]]],[[10,[1]]],[]],[[[10,[-1]]],[[10,[1]]],[]],[[[10,[-1]]],[[10,[1]]],[]],[[[10,[-1]]],[[10,[1]]],[]],[[[10,[-1]]],[[10,[1]]],[]],[[[10,[-1]]],[[10,[1]]],[]],[[[10,[-1]]],[[10,[1]]],[]],[[[10,[-1]]],[[10,[1]]],[]],[[[10,[-1]]],[[10,[1]]],[]],[[[10,[-1]]],[[10,[1]]],[]],[[[10,[-1]]],[[10,[1]]],[]],[[[10,[-1]]],[[10,[1]]],[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0],"c":[],"p":[[8,"Any",965],[15,"usize"],[3,"With",966],[4,"Result",967],[15,"tuple"],[4,"DaoFunction",0],[15,"bool"],[3,"Formatter",968],[6,"Result",968],[3,"Box",969],[3,"Arc",970],[3,"Rc",971],[3,"Layout",972],[3,"LayoutError",972],[15,"u8"],[3,"TypeId",965],[3,"DaoExecCall",102],[3,"ZkBinary",973],[3,"ProvingKey",974],[3,"DaoExecParams",440],[3,"Proof",974],[3,"Vec",975],[6,"Result",976],[3,"Private",977],[3,"DaoInfo",140],[3,"SecretKey",978],[3,"DaoMintParams",440],[3,"DaoProposalInfo",176],[3,"Error",979],[8,"Read",980],[3,"DaoProposeNote",176],[8,"Future",981],[3,"Pin",982],[8,"AsyncRead",983],[8,"Unpin",984],[8,"Send",984],[8,"Write",980],[8,"AsyncWrite",983],[3,"DaoProposeCall",176],[3,"DaoProposeParams",440],[3,"DaoVoteNote",301],[3,"DaoVoteCall",301],[3,"DaoVoteParams",440],[8,"Error",985],[4,"DaoError",393],[3,"String",986],[3,"DaoBlindAggregateVote",440],[3,"DaoBulla",440],[3,"DaoProposalBulla",440],[3,"DaoMintUpdate",440],[3,"DaoProposeParamsInput",440],[3,"DaoProposeUpdate",440],[3,"DaoProposalMetadata",440],[3,"DaoVoteParamsInput",440],[3,"DaoVoteUpdate",440],[3,"DaoExecUpdate",440],[6,"Base",987],[15,"array"],[4,"ContractError",988],[15,"str"],[15,"u64"],[8,"Hash",989],[8,"Sized",984],[8,"BuildHasher",989],[8,"Hasher",989],[3,"DaoProposeStakeInput",176],[3,"DaoVoteInput",301]],"b":[[421,"impl-Debug-for-DaoError"],[422,"impl-Display-for-DaoError"],[683,"impl-Debug-for-DaoBulla"],[684,"impl-Display-for-DaoBulla"],[685,"impl-Debug-for-DaoProposalBulla"],[686,"impl-Display-for-DaoProposalBulla"]]},\
"darkfi_deployooor_contract":{"doc":"Smart contract implementing non-native smart contract …","t":"RRRRENNLLLLLALLLALLLLLNNELLLLLLLLLLLLLLLLLLDDDDLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLM","n":["DEPLOY_CONTRACT_DB_VERSION","DEPLOY_CONTRACT_INFO_TREE","DEPLOY_CONTRACT_LOCK_TREE","DEPLOY_CONTRACT_ZKAS_DERIVE_NS_V1","DeployFunction","DeployV1","LockV1","borrow","borrow_mut","deref","deref_mut","drop","error","from","init","into","model","try_from","try_from","try_into","type_id","vzip","ContractLocked","ContractNonExistent","DeployError","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","fmt","fmt","from","init","into","to_owned","to_string","try_from","try_into","type_id","vzip","DeployParamsV1","DeployUpdateV1","LockParamsV1","LockUpdateV1","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","contract_id","contract_id","decode","decode","decode","decode","decode_async","decode_async","decode_async","decode_async","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","encode","encode","encode","encode","encode_async","encode_async","encode_async","encode_async","fmt","fmt","fmt","fmt","from","from","from","from","init","init","init","init","into","into","into","into","public_key","public_key","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","wasm_bincode"],"q":[[0,"darkfi_deployooor_contract"],[22,"darkfi_deployooor_contract::error"],[43,"darkfi_deployooor_contract::model"],[132,"core::result"],[133,"core::any"],[134,"core::fmt"],[135,"core::fmt"],[136,"std::io::error"],[137,"std::io"],[138,"core::future::future"],[139,"alloc::boxed"],[140,"core::pin"],[141,"futures_io::if_std"],[142,"core::marker"],[143,"core::marker"]],"d":["","","","zkas derive circuit namespace","Functions available in the contract","","","","","","","","Contract errors","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Call parameters definitions","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","Parameters for <code>Deploy::Deploy</code>","State update for <code>Deploy::Deploy</code>","Parameters for <code>Deploy::Lock</code>","State update for <code>Deploy::Lock</code>","","","","","","","","","","","","","","","","","The <code>ContractId</code> to deploy","The <code>ContractId</code> to lock","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Public key used to sign the transaction and derive the …","Public key used to sign the transaction and derive the …","","","","","","","","","","","","","","","","","","","","","Webassembly bincode of the smart contract"],"i":[0,0,0,0,0,5,5,5,5,5,5,5,0,5,5,5,0,5,5,5,5,5,7,7,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,11,12,13,14,11,12,13,14,11,12,13,14,11,12,13,14,12,14,11,12,13,14,11,12,13,14,11,12,13,14,11,12,13,14,11,12,13,14,11,12,13,14,11,12,13,14,11,12,13,14,11,12,13,14,11,12,13,14,11,12,13,14,11,13,11,12,13,14,11,12,13,14,11,12,13,14,11,12,13,14,11,12,13,14,11],"f":[0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[1,-1,[]],[1,-1,[]],[1,2],0,[-1,-1,[]],[[],1],[-1,-2,[],[]],0,[-1,[[3,[-2]]],[],[]],[4,[[3,[5]]]],[-1,[[3,[-2]]],[],[]],[-1,6,[]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[7,7],[[-1,-2],2,[],[]],[1,-1,[]],[1,-1,[]],[1,2],[[7,8],9],[[7,8],9],[-1,-1,[]],[[],1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,10,[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,6,[]],[-1,-2,[],[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[11,11],[12,12],[13,13],[14,14],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,0,[-1,[[3,[11,15]]],16],[-1,[[3,[12,15]]],16],[-1,[[3,[13,15]]],16],[-1,[[3,[14,15]]],16],[-1,[[19,[[18,[17]]]]],[20,21,22]],[-1,[[19,[[18,[17]]]]],[20,21,22]],[-1,[[19,[[18,[17]]]]],[20,21,22]],[-1,[[19,[[18,[17]]]]],[20,21,22]],[1,-1,[]],[1,-1,[]],[1,-1,[]],[1,-1,[]],[1,-1,[]],[1,-1,[]],[1,-1,[]],[1,-1,[]],[1,2],[1,2],[1,2],[1,2],[[11,-1],[[3,[1,15]]],23],[[12,-1],[[3,[1,15]]],23],[[13,-1],[[3,[1,15]]],23],[[14,-1],[[3,[1,15]]],23],[[11,-1],[[19,[[18,[17]]]]],[24,21,22]],[[12,-1],[[19,[[18,[17]]]]],[24,21,22]],[[13,-1],[[19,[[18,[17]]]]],[24,21,22]],[[14,-1],[[19,[[18,[17]]]]],[24,21,22]],[[11,8],9],[[12,8],9],[[13,8],9],[[14,8],9],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],1],[[],1],[[],1],[[],1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0],"c":[],"p":[[15,"usize"],[15,"tuple"],[4,"Result",132],[15,"u8"],[4,"DeployFunction",0],[3,"TypeId",133],[4,"DeployError",22],[3,"Formatter",134],[6,"Result",134],[3,"String",135],[3,"DeployParamsV1",43],[3,"DeployUpdateV1",43],[3,"LockParamsV1",43],[3,"LockUpdateV1",43],[3,"Error",136],[8,"Read",137],[8,"Future",138],[3,"Box",139],[3,"Pin",140],[8,"AsyncRead",141],[8,"Unpin",142],[8,"Send",142],[8,"Write",137],[8,"AsyncWrite",141]],"b":[[32,"impl-Debug-for-DeployError"],[33,"impl-Display-for-DeployError"]]},\
"darkfi_derive":{"doc":"","t":"YY","n":["SerialDecodable","SerialEncodable"],"q":[[0,"darkfi_derive"]],"d":["",""],"i":[0,0],"f":[0,0],"c":[],"p":[],"b":[]},\
"darkfi_derive_internal":{"doc":"Derive (de)serialization for enums and structs, see …","t":"DAFFFFLLFFFFFLLFFALLLMMMMFFFFFFFFFFFF","n":["VariantParts","async_derive","async_enum_de","async_enum_ser","async_struct_de","async_struct_ser","borrow","borrow_mut","contains_initialize_with","contains_skip","discriminant_map","enum_de","enum_ser","from","into","struct_de","struct_ser","sync_derive","try_from","try_into","type_id","variant_body","variant_header","variant_idx_body","where_predicates","async_enum_de","async_enum_ser","async_struct_de","async_struct_ser","named_fields","unnamed_fields","enum_de","enum_ser","named_fields","struct_de","struct_ser","unnamed_fields"],"q":[[0,"darkfi_derive_internal"],[25,"darkfi_derive_internal::async_derive"],[31,"darkfi_derive_internal::sync_derive"],[37,"syn::item"],[38,"proc_macro2"],[39,"proc_macro2"],[40,"syn::item"],[41,"syn::path"],[42,"core::option"],[43,"syn::data"],[44,"syn::token"],[45,"syn::punctuated"],[46,"std::collections::hash::map"],[47,"core::result"],[48,"core::any"],[49,"syn::data"]],"d":["","Derive (de)serialization for enums and structs, see …","","","","","","","","","Calculates the discriminant that will be assigned by the …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","Derive (de)serialization for enums and structs, see …","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,18,18,0,0,0,0,0,18,18,0,0,0,18,18,18,18,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,[[1,2],[[4,[3]]]],[[1,2],[[4,[3]]]],[[5,2],[[4,[3]]]],[[5,2],[[4,[3]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[[7,[6]]],[[9,[8]]]],[[[7,[6]]],10],[[[13,[11,12]]],[[14,[2,3]]]],[[1,2],[[4,[3]]]],[[1,2],[[4,[3]]]],[-1,-1,[]],[-1,-2,[],[]],[[5,2],[[4,[3]]]],[[5,2],[[4,[3]]]],0,[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,16,[]],0,0,0,0,[[1,2],[[4,[3]]]],[[1,2],[[4,[3]]]],[[5,2],[[4,[3]]]],[[5,2],[[4,[3]]]],[[2,2,2,3,17],[[4,[18]]]],[[2,2,2,3,19],[[4,[18]]]],[[1,2],[[4,[3]]]],[[1,2],[[4,[3]]]],[[2,2,2,3,17],[[4,[18]]]],[[5,2],[[4,[3]]]],[[5,2],[[4,[3]]]],[[2,2,2,3,19],[[4,[18]]]]],"c":[],"p":[[3,"ItemEnum",37],[3,"Ident",38],[3,"TokenStream",38],[6,"Result",39],[3,"ItemStruct",37],[3,"Attribute",40],[15,"slice"],[3,"Path",41],[4,"Option",42],[15,"bool"],[3,"Variant",43],[3,"Comma",44],[3,"Punctuated",45],[3,"HashMap",46],[4,"Result",47],[3,"TypeId",48],[3,"FieldsNamed",43],[3,"VariantParts",0],[3,"FieldsUnnamed",43]],"b":[]},\
"darkfi_mmproxy":{"doc":"","t":"DRRDDDLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLAMLLLLLLLLMLFLLLLLLLLLLLLLLLLLLLLLLLLLLMFLLMMMMLLLLLLFMMMMALLLMLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLMMNENLLLLLLLLLLLLLLLLLLLLLLLDRDLMMMMLLLLMLLLLLLLLLLLLLLLLFMLLLLLLLLLLMMMLLMFLLLMMMLLLLLLLLLLLLLLL","n":["Args","CONFIG_FILE","CONFIG_FILE_CONTENTS","MiningProxy","MonerodArgs","SignalHandler","__clone_box","__clone_box","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clap","clap","clone","clone","clone_into","clone_into","config","connections_mut","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","error","executor","fmt","fmt","from","from","from","from","from_clap","from_clap","handle","handle_request","handle_signals","init","init","init","init","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","job_task","keepalive_task","layout_raw","layout_raw","layout_raw","layout_raw","log","main","merge","merge","monerod","monerod_network","monerod_rpc","network","new","new","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","realmain","rpc","rpc_connections","rpc_listen","sighup_sub","stratum","stratum_keepalived","stratum_login","stratum_submit","term_rx","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","verbose","vzip","vzip","vzip","vzip","wait_termination","workers","workers","InvalidWorkerLogin","RpcError","UnsupportedMiningAlgo","as_any","as_any_mut","borrow","borrow_mut","deref","deref_mut","deserialize","drop","from","init","into","into_any","into_any_arc","into_any_rc","layout_raw","pointer_metadata","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","MiningJob","RANDOMX_ALGO","Worker","__clone_box","_agent","_job_task","_ka_task","addr","as_any","as_any","as_any_mut","as_any_mut","block","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","from","from","getblocktemplate","height","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","job_id","job_sub","ka_send","layout_raw","layout_raw","mining_job","monerod_request","notify_job","pointer_metadata","pointer_metadata","seed_hash","submit_send","target","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip"],"q":[[0,"darkfi_mmproxy"],[149,"darkfi_mmproxy::error"],[175,"darkfi_mmproxy::stratum"],[244,"dyn_clone::sealed"],[245,"core::any"],[246,"clap::app"],[247,"core::future::future"],[248,"alloc::boxed"],[249,"core::pin"],[250,"rkyv::with"],[251,"core::result"],[252,"serde::de"],[253,"core::fmt"],[254,"core::fmt"],[255,"darkfi::rpc::jsonrpc"],[256,"signal_hook_async_std"],[257,"async_channel"],[258,"darkfi::system::subscriber"],[259,"darkfi::error"],[260,"alloc::sync"],[261,"alloc::rc"],[262,"uuid"],[263,"std::collections::hash::map"],[264,"async_lock::rwlock"],[265,"url"],[266,"async_channel"],[267,"core::alloc::layout"],[268,"async_task::task"],[269,"tinyjson::json_value"],[270,"darkfi::rpc::jsonrpc"]],"d":["","","","","","Auxiliary structure used to keep track of signals","","","","","","","","","","","","","","","","","","","","","","","","","Configuration file to use","","","","","","","","","","","","","","","","","","","","","","","Main async executor reference","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Signals handle","","Auxiliary task to handle SIGHUP, SIGTERM, SIGINT and …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Background task used to notify a worker about new mining …","Background task listening for keepalives from a worker. If …","","","","","Set log file output","","","","","monerod network type","monerod RPC address","Mining reward wallet address","","","","","","","","monerod JSON-RPC server listen URL","JSON-RPC connection tracker","mmproxy JSON-RPC server listen URL","SIGHUP subscriber to retrieve new configuration,","","Nonstandard, but widely supported protocol extension. The …","Stratum login method","Stratum submit method","Termination signal channel receiver","","","","","","","","","","","","","","","","","","","","","","","","","","","Increase verbosity (-vvv supported)","","","","","Handler waits for termination signal","Workers UUIDs","List of worker logins","","Custom RPC error implementations","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","A mining job instance","Algo string representing Monero’s RandomX","Single worker connected to the mining proxy","","Miner useragent","Background mining job task reference","Background keepalive task reference","Wallet address","","","","","Full block being mined","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Perform getblocktemplate from monerod and inject it with …","Block height","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Current job ID for the worker","JSON-RPC notification subscriber, used to send new job …","Keepalive sender channel, pinged from Stratum keepalived","","","Current mining job","Send a HTTP JSON-RPC request to the given monerod RPC …","","","","RandomX seed hash","Block submit trigger sender channel, pinged from Stratum …","Difficulty target,","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,5,6,7,5,6,34,7,5,6,34,7,5,6,34,7,5,6,34,5,6,5,6,5,6,5,7,5,6,7,5,6,34,7,5,6,34,7,5,5,6,6,34,7,5,6,34,0,7,5,6,7,5,6,34,5,6,34,7,0,7,5,6,34,7,5,6,34,7,5,6,34,7,5,6,34,7,5,6,34,7,7,7,5,6,34,5,0,5,6,5,7,7,6,7,34,7,5,6,34,0,6,7,5,34,0,7,7,7,34,5,6,7,5,6,34,7,5,6,34,7,5,6,34,7,5,6,34,7,5,6,34,7,5,6,34,5,7,5,6,34,34,7,5,42,0,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,0,0,0,40,26,26,26,26,26,40,26,40,40,26,40,26,40,40,40,26,40,26,40,26,40,26,40,26,40,0,40,26,40,26,40,26,40,26,40,26,40,40,26,26,26,40,26,0,26,26,40,40,26,40,40,26,40,26,40,26,40,26,40,26,40,26,40,26,40],"f":[0,0,0,0,0,0,[[-1,1],2,[]],[[-1,1],2,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],4],[[],4],[5,5],[6,6],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[7,[[10,[[9,[8]]]]]],[[],5],[[],6],[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[[-1,-2],[[13,[[12,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[13,[[12,[-3,-4]]]]],[],[],[],[]],[-1,[[13,[5]]],14],[[-1,-2],[[13,[[12,[-3,-4]]]]],[],[],[],[]],[-1,[[13,[6]]],14],[[-1,-2],[[13,[[12,[-3,-4]]]]],[],[],[],[]],[11,2],[11,2],[11,2],[11,2],0,0,[[5,15],16],[[6,15],16],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[17,5],[17,6],0,[[7,18],[[10,[[9,[8]]]]]],[[19,[20,[2]],[21,[5]]],[[22,[2]]]],[[],11],[[],11],[[],11],[[],11],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[9,[-1]]],[[9,[3]]],[]],[[[9,[-1]]],[[9,[3]]],[]],[[[9,[-1]]],[[9,[3]]],[]],[[[9,[-1]]],[[9,[3]]],[]],[[[23,[-1]]],[[23,[3]]],[]],[[[23,[-1]]],[[23,[3]]],[]],[[[23,[-1]]],[[23,[3]]],[]],[[[23,[-1]]],[[23,[3]]],[]],[[[24,[-1]]],[[24,[3]]],[]],[[[24,[-1]]],[[24,[3]]],[]],[[[24,[-1]]],[[24,[3]]],[]],[[[24,[-1]]],[[24,[3]]],[]],[[[23,[[28,[[27,[25,26]]]]]],25,29,[30,[2]]],[[22,[2]]]],[[[23,[[28,[[27,[25,26]]]]]],25,[30,[2]]],[[22,[2]]]],[[],[[13,[31,32]]]],[[],[[13,[31,32]]]],[[],[[13,[31,32]]]],[[],[[13,[31,32]]]],0,[[],[[22,[2]]]],[[5,5,17],5],[[6,6,17],6],0,0,0,0,[[6,[23,[33]]],[[22,[7]]]],[[[23,[33]]],[[22,[[2,[34,[35,[[22,[2]]]]]]]]]],[[]],[[]],[[]],[[]],[[5,[23,[33]]],[[22,[2]]]],0,0,0,0,0,[[7,36,37],38],[[7,36,37],38],[[7,36,37],38],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[[[9,[-1]]],[[9,[3]]],[]],[[[9,[-1]]],[[9,[3]]],[]],[[[9,[-1]]],[[9,[3]]],[]],[[[9,[-1]]],[[9,[3]]],[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[34,[35,[[22,[2]]]]],[[22,[2]]]],0,0,0,0,0,[-1,3,[]],[-1,3,[]],[-1,-2,[],[]],[-1,-2,[],[]],[11,-1,[]],[11,-1,[]],[[-1,-2],[[13,[[12,[-3,-4]]]]],[],[],[],[]],[11,2],[-1,-1,[]],[[],11],[-1,-2,[],[]],[[[9,[-1]]],[[9,[3]]],[]],[[[23,[-1]]],[[23,[3]]],[]],[[[24,[-1]]],[[24,[3]]],[]],[[],[[13,[31,32]]]],[[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,39,[]],[[[9,[-1]]],[[9,[3]]],[]],[-1,3,[]],[-1,3,[]],[-1,-2,[],[]],0,0,0,[[-1,1],2,[]],0,0,0,0,[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[40,40],[[-1,-2],2,[],[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[[-1,-2],[[13,[[12,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[13,[[12,[-3,-4]]]]],[],[],[],[]],[11,2],[11,2],[-1,-1,[]],[-1,-1,[]],[[29,41],[[22,[40]]]],0,[[],11],[[],11],[-1,-2,[],[]],[-1,-2,[],[]],[[[9,[-1]]],[[9,[3]]],[]],[[[9,[-1]]],[[9,[3]]],[]],[[[23,[-1]]],[[23,[3]]],[]],[[[23,[-1]]],[[23,[3]]],[]],[[[24,[-1]]],[[24,[3]]],[]],[[[24,[-1]]],[[24,[3]]],[]],0,0,0,[[],[[13,[31,32]]]],[[],[[13,[31,32]]]],0,[[29,18],[[22,[37]]]],[[26,40],[[22,[2]]]],[[]],[[]],0,0,0,[-1,-2,[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,39,[]],[-1,39,[]],[[[9,[-1]]],[[9,[3]]],[]],[[[9,[-1]]],[[9,[3]]],[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[],"p":[[3,"Private",244],[15,"tuple"],[8,"Any",245],[3,"App",246],[3,"Args",0],[3,"MonerodArgs",0],[3,"MiningProxy",0],[8,"Future",247],[3,"Box",248],[3,"Pin",249],[15,"usize"],[3,"With",250],[4,"Result",251],[8,"Deserializer",252],[3,"Formatter",253],[6,"Result",253],[3,"ArgMatches",254],[3,"JsonRequest",255],[6,"Signals",256],[3,"Sender",257],[6,"SubscriberPtr",258],[6,"Result",259],[3,"Arc",260],[3,"Rc",261],[3,"Uuid",262],[3,"Worker",175],[3,"HashMap",263],[3,"RwLock",264],[3,"Url",265],[3,"Receiver",257],[3,"Layout",266],[3,"LayoutError",266],[3,"Executor",267],[3,"SignalHandler",0],[3,"Task",268],[15,"u16"],[4,"JsonValue",269],[4,"JsonResult",255],[3,"TypeId",245],[3,"MiningJob",175],[3,"Address",270],[4,"RpcError",149]],"b":[]},\
"darkfi_money_contract":{"doc":"Smart contract implementing money transfers, atomic swaps, …","t":"RRRRRRRRRRRRRRNRRRRRRRRRRRRRENNNNNNNLLLLALLLLALLLLLLLALLLLLLLLLDDRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMLLLLAMMMMMMMAALLLLMAMAALLLLLLLLLLLLALLLLLLLLLLLLMMMMMLLLLDDDMLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLMMMLLLMMLMLLLLLLLLLLLLLLLLLLMMLLLDDDLLLLLLLMLLLLLLLLMLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLMLLLMMMLLLMMMMLMLLLLLLLLLLLLLLLLLLMMLLLDDDDLLLLLLLLLLLLLLLLLMMMFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMLLLLMMMMMLMMLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLDDLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLMMMLLMMMMMMMMLLLLLLLLLLLLMMMMMLLDDDLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLMMLMMMLLLLLLLLLLLLLLLLLLLLLDDDMLLLLLLLLLLLLLMFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLMMMMLMMMMLLLLLLLLLLLLLLLLLLMMLLLDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMFLFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLMMMMMMMMMMMMMMMLLLLLLLLLMMMMMMMMFMMMMMMMLLMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMLLLLLLLLLDDDDLLLLLLLLLLLLLLLLLMFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMLLLLMMMMLMMLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLNNNNNNNENNNNNNNNNNNNNNNNNNNNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDDDDDDDDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLL","n":["CONSENSUS_CONTRACT_DB_VERSION","CONSENSUS_CONTRACT_INFO_TREE","CONSENSUS_CONTRACT_NULLIFIERS_TREE","CONSENSUS_CONTRACT_STAKED_COINS_TREE","CONSENSUS_CONTRACT_STAKED_COIN_LATEST_COIN_ROOT","CONSENSUS_CONTRACT_STAKED_COIN_MERKLE_TREE","CONSENSUS_CONTRACT_STAKED_COIN_ROOTS_TREE","CONSENSUS_CONTRACT_UNSTAKED_COINS_TREE","CONSENSUS_CONTRACT_UNSTAKED_COIN_LATEST_COIN_ROOT","CONSENSUS_CONTRACT_UNSTAKED_COIN_MERKLE_TREE","CONSENSUS_CONTRACT_UNSTAKED_COIN_ROOTS_TREE","CONSENSUS_CONTRACT_ZKAS_BURN_NS_V1","CONSENSUS_CONTRACT_ZKAS_MINT_NS_V1","CONSENSUS_CONTRACT_ZKAS_PROPOSAL_NS_V1","GenesisMintV1","MONEY_CONTRACT_COINS_TREE","MONEY_CONTRACT_COIN_MERKLE_TREE","MONEY_CONTRACT_COIN_ROOTS_TREE","MONEY_CONTRACT_DB_VERSION","MONEY_CONTRACT_FAUCET_PUBKEYS","MONEY_CONTRACT_INFO_TREE","MONEY_CONTRACT_LATEST_COIN_ROOT","MONEY_CONTRACT_NULLIFIERS_TREE","MONEY_CONTRACT_TOKEN_FREEZE_TREE","MONEY_CONTRACT_ZKAS_BURN_NS_V1","MONEY_CONTRACT_ZKAS_MINT_NS_V1","MONEY_CONTRACT_ZKAS_TOKEN_FRZ_NS_V1","MONEY_CONTRACT_ZKAS_TOKEN_MINT_NS_V1","MoneyFunction","OtcSwapV1","PoWRewardV1","StakeV1","TokenFreezeV1","TokenMintV1","TransferV1","UnstakeV1","as_any","as_any_mut","borrow","borrow_mut","client","deref","deref_mut","deserialize","drop","error","from","init","into","into_any","into_any_arc","into_any_rc","layout_raw","model","pointer_metadata","try_from","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","ConsensusNote","ConsensusOwnCoin","MONEY_ALIASES_COL_ALIAS","MONEY_ALIASES_COL_TOKEN_ID","MONEY_ALIASES_TABLE","MONEY_COINS_COL_COIN","MONEY_COINS_COL_IS_SPENT","MONEY_COINS_COL_LEAF_POSITION","MONEY_COINS_COL_MEMO","MONEY_COINS_COL_NULLIFIER","MONEY_COINS_COL_SECRET","MONEY_COINS_COL_SERIAL","MONEY_COINS_COL_SPEND_HOOK","MONEY_COINS_COL_TOKEN_BLIND","MONEY_COINS_COL_TOKEN_ID","MONEY_COINS_COL_USER_DATA","MONEY_COINS_COL_VALUE","MONEY_COINS_COL_VALUE_BLIND","MONEY_COINS_TABLE","MONEY_INFO_COL_LAST_SCANNED_SLOT","MONEY_INFO_TABLE","MONEY_KEYS_COL_IS_DEFAULT","MONEY_KEYS_COL_KEY_ID","MONEY_KEYS_COL_PUBLIC","MONEY_KEYS_COL_SECRET","MONEY_KEYS_TABLE","MONEY_TOKENS_COL_IS_FROZEN","MONEY_TOKENS_COL_MINT_AUTHORITY","MONEY_TOKENS_COL_TOKEN_ID","MONEY_TOKENS_TABLE","MONEY_TREE_COL_TREE","MONEY_TREE_TABLE","MoneyNote","OwnCoin","__clone_box","__clone_box","__clone_box","__clone_box","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","coin","coin","decode","decode","decode","decode","decode_async","decode_async","decode_async","decode_async","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","encode","encode","encode","encode","encode_async","encode_async","encode_async","encode_async","epoch","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","from","from","genesis_mint_v1","init","init","init","init","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","layout_raw","layout_raw","layout_raw","layout_raw","leaf_position","leaf_position","memo","note","note","nullifier","nullifier","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pow_reward_v1","reward","reward_blind","secret","secret","serial","serial","spend_hook","stake_v1","swap_v1","to_owned","to_owned","to_owned","to_owned","token_blind","token_freeze_v1","token_id","token_mint_v1","transfer_v1","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unstake_v1","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","user_data","value","value","value_blind","value_blind","vzip","vzip","vzip","vzip","GenesisMintCallBuilder","GenesisMintCallDebris","GenesisMintRevealed","amount","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","coin","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","from","from","from","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","keypair","layout_raw","layout_raw","layout_raw","mint_pk","mint_zkbin","params","pointer_metadata","pointer_metadata","pointer_metadata","proofs","spend_hook","to_vec","token_commit","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","user_data","value_commit","vzip","vzip","vzip","PoWRewardCallBuilder","PoWRewardCallDebris","PoWRewardRevealed","_build","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","block_height","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","build_with_custom_reward","coin","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","fork_hash","fork_previous_hash","from","from","from","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","last_nonce","layout_raw","layout_raw","layout_raw","mint_pk","mint_zkbin","params","pointer_metadata","pointer_metadata","pointer_metadata","proofs","recipient","secret","spend_hook","to_vec","token_commit","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","user_data","value_commit","vzip","vzip","vzip","MoneyStakeBurnRevealed","MoneyStakeCallBuilder","MoneyStakeCallDebris","TransactionBuilderInputInfo","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","burn_pk","burn_zkbin","coin","create_stake_burn_proof","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","from","from","from","from","init","init","init","init","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","layout_raw","layout_raw","layout_raw","layout_raw","leaf_position","merkle_path","merkle_root","note","nullifier","params","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","proofs","secret","signature_public","signature_secret","spend_hook","to_vec","token_commit","tree","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","user_data_enc","value_blind","value_commit","vzip","vzip","vzip","vzip","SwapCallBuilder","SwapCallDebris","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","build","burn_pk","burn_zkbin","coin","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","from","from","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","layout_raw","layout_raw","mint_pk","mint_zkbin","params","pointer_metadata","pointer_metadata","proofs","pubkey","signature_secret","spend_hook_recv","token_blinds","token_id_recv","token_id_send","tree","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","user_data_blind_send","user_data_recv","value_blinds","value_recv","value_send","vzip","vzip","TokenFreezeCallBuilder","TokenFreezeCallDebris","TokenFreezeRevealed","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","create_token_freeze_proof","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","from","from","from","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","layout_raw","layout_raw","layout_raw","mint_authority","params","pointer_metadata","pointer_metadata","pointer_metadata","proofs","signature_public","to_vec","token_freeze_pk","token_freeze_zkbin","token_id","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","TokenMintCallBuilder","TokenMintCallDebris","TokenMintRevealed","amount","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","coin","create_token_mint_proof","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","from","from","from","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","layout_raw","layout_raw","layout_raw","mint_authority","params","pointer_metadata","pointer_metadata","pointer_metadata","proofs","recipient","signature_public","spend_hook","to_vec","token_commit","token_id","token_mint_pk","token_mint_zkbin","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","user_data","value_commit","vzip","vzip","vzip","TransferBurnRevealed","TransferCallBuilder","TransferCallBuilder2","TransferCallClearInput","TransferCallDebris","TransferCallInput","TransferCallOutput","TransferCallSecrets","TransferMintRevealed","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","burn_pk","burn_pk","burn_zkbin","burn_zkbin","change_spend_hook","change_user_data","clear_input","clear_inputs","coin","coins","compute_remainder_blind","compute_remainder_blind","create_transfer_burn_proof","create_transfer_mint_proof","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","from","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","init","input_user_data_blind","input_value_blinds","input_value_blinds","inputs","into","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","keypair","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","leaf_position","merkle_path","merkle_root","mint_pk","mint_pk","mint_zkbin","mint_zkbin","minted_coins","note","nullifier","output_notes","output_value_blinds","output_value_blinds","outputs","params","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","proofs","proofs","public_key","rcpt_spend_hook","rcpt_user_data","rcpt_user_data_blind","recipient","secret","select_coins","signature_public","signature_secret","signature_secrets","signature_secrets","spend_hook","spend_hook","spent_coins","to_vec","to_vec","token_commit","token_commit","token_id","token_id","token_id","tree","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","user_data","user_data_blind","user_data_enc","value","value","value","value_commit","value_commit","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","MoneyMintRevealed","MoneyUnstakeCallBuilder","MoneyUnstakeCallDebris","TransactionBuilderOutputInfo","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","coin","create_unstake_mint_proof","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","from","from","from","from","init","init","init","init","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","layout_raw","layout_raw","layout_raw","layout_raw","merkle_root","mint_pk","mint_zkbin","nullifier","owncoin","params","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","proofs","public_key","recipient","signature_public","to_vec","token_commit","token_id","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","value","value_blind","value_commit","vzip","vzip","vzip","vzip","CallIdxOutOfBounds","DuplicateCoin","DuplicateNullifier","GenesisCallNonGenesisSlot","InvalidNumberOfInputs","InvalidNumberOfOutputs","MissingNullifier","MoneyError","NextCallFunctionMismatch","NextCallInputMismatch","PoWRewardCallAfterCutoffSlot","PoWRewardErroneousVrfProof","PoWRewardExtendsUnknownFork","PoWRewardMissingSlot","PreviousCallFunctionMismatch","PreviousCallInputMismatch","SpendHookMismatch","SpendHookNonZero","StakeInputNonNativeToken","StakeMissingNullifier","StakeMissingSpendHook","StakeNextCallNotConsensusContract","StakePreviousCallNotMoneyContract","SwapMerkleRootNotFound","TokenIdDoesNotDeriveFromMint","TokenMintFrozen","TokenMismatch","TransferClearInputNonNativeToken","TransferClearInputUnauthorised","TransferMerkleRootNotFound","TransferMissingFaucetKeys","TransferMissingInputs","TransferMissingOutputs","UnstakeNextCallNotMoneyContract","UnstakePreviousCallNotConsensusContract","UnstakeSpendHookNotConsensusContract","ValueMismatch","__clone_box","as_any","as_any_mut","as_error","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","fmt","fmt","from","init","into","into_any","into_any_arc","into_any_rc","layout_raw","pointer_metadata","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","ClearInput","Coin","ConsensusInput","ConsensusOutput","ConsensusStakeParamsV1","ConsensusStakeUpdateV1","ConsensusUnstakeParamsV1","ConsensusUnstakeReqParamsV1","ConsensusUnstakeUpdateV1","Input","MoneyGenesisMintParamsV1","MoneyGenesisMintUpdateV1","MoneyPoWRewardParamsV1","MoneyPoWRewardUpdateV1","MoneyStakeParamsV1","MoneyStakeUpdateV1","MoneyTokenFreezeParamsV1","MoneyTokenFreezeUpdateV1","MoneyTokenMintParamsV1","MoneyTokenMintUpdateV1","MoneyTransferParamsV1","MoneyTransferUpdateV1","MoneyUnstakeParamsV1","MoneyUnstakeUpdateV1","Output","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear_inputs","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","coin","coin","coin","coin","coin","coin","coin","coins","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode_async","decode_async","decode_async","decode_async","decode_async","decode_async","decode_async","decode_async","decode_async","decode_async","decode_async","decode_async","decode_async","decode_async","decode_async","decode_async","decode_async","decode_async","decode_async","decode_async","decode_async","decode_async","decode_async","decode_async","decode_async","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode_async","encode_async","encode_async","encode_async","encode_async","encode_async","encode_async","encode_async","encode_async","encode_async","encode_async","encode_async","encode_async","encode_async","encode_async","encode_async","encode_async","encode_async","encode_async","encode_async","encode_async","encode_async","encode_async","encode_async","encode_async","epoch","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fork_hash","fork_previous_hash","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bytes","from_str","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","inner","input","input","input","input","input","input","input","input","inputs","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","merkle_root","merkle_root","note","note","nullifier","nullifier","nullifier","nullifier","nullifiers","output","output","output","output","output","output","outputs","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","signature_public","signature_public","signature_public","signature_public","signature_public","spend_hook","to_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","token_blind","token_blind","token_commit","token_commit","token_id","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","user_data_enc","value","value_blind","value_commit","value_commit","value_commit","value_commit","vrf_proof","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip"],"q":[[0,"darkfi_money_contract"],[63,"darkfi_money_contract::client"],[279,"darkfi_money_contract::client::genesis_mint_v1"],[364,"darkfi_money_contract::client::pow_reward_v1"],[455,"darkfi_money_contract::client::stake_v1"],[573,"darkfi_money_contract::client::swap_v1"],[641,"darkfi_money_contract::client::token_freeze_v1"],[723,"darkfi_money_contract::client::token_mint_v1"],[812,"darkfi_money_contract::client::transfer_v1"],[1096,"darkfi_money_contract::client::unstake_v1"],[1211,"darkfi_money_contract::error"],[1279,"darkfi_money_contract::model"],[2176,"core::any"],[2177,"rkyv::with"],[2178,"core::result"],[2179,"alloc::boxed"],[2180,"alloc::sync"],[2181,"alloc::rc"],[2182,"core::alloc::layout"],[2183,"core::alloc::layout"],[2184,"std::io::error"],[2185,"std::io"],[2186,"core::future::future"],[2187,"core::pin"],[2188,"futures_io::if_std"],[2189,"core::marker"],[2190,"core::marker"],[2191,"core::fmt"],[2192,"pasta_curves::pallas"],[2193,"alloc::vec"],[2194,"darkfi::zkas::decoder"],[2195,"darkfi::zk::proof"],[2196,"pasta_curves::pallas"],[2197,"darkfi::zk::proof"],[2198,"alloc::string"],[2199,"darkfi_sdk::error"]],"d":["","","","","","","","","","","","zkas consensus burn circuit namespace","zkas consensus mint circuit namespace","zkas proposal circuit namespace","","","","","","","","","","","zkas burn circuit namespace","zkas mint circuit namespace","zkas token freeze circuit namespace","zkas token mint circuit namespace","Functions available in the contract","","","","","","","","","","","","Client API for interaction with this smart contract This …","","","","","Internal contract errors","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","Call parameters definitions","","","","","","","","","","<code>ConsensusNote</code> holds the inner attributes of a <code>Coin</code>.","<code>ConsensusOwnCoin</code> is a representation of <code>Coin</code> with its …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>MoneyNote</code> holds the inner attributes of a <code>Coin</code>.","<code>OwnCoin</code> is a representation of <code>Coin</code> with its respective …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The coin hash","The coin hash","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Epoch the coin was minted","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","<code>Money::GenesisMintV1</code> API","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Coin’s leaf position in the Merkle tree of coins","Coin’s leaf position in the Merkle tree of coins","Attached memo (arbitrary data)","The attached <code>MoneyNote</code>","The attached <code>ConsensusNote</code>","Coin’s nullifier","Coin’s nullifier","","","","","<code>Money::PoWRewardV1</code> API","Value of the reward","Blinding factor for the reward value pedersen commitment","Coin’s secret key","Coin’s secret key","Serial number of the coin, used for the nullifier","Serial number of the coin, used for the nullifier","Spend hook used for protocol-owned liquidity. Specifies …","<code>Money::StakeV1</code> API This API is crufty. Please rework it …","<code>Money::OtcSwapV1</code> API This API is crufty. Please rework it …","","","","","Blinding factor for the token ID pedersen commitment","<code>Money::TokenFreezeV1</code> API","Token ID of the coin","<code>Money::TokenMintV1</code> API","<code>Money::TransferV1</code> API This API is crufty. Please rework it …","","","","","","","","","","","","","<code>Money::UnstakeV1</code> API This API is crufty. Please rework it …","","","","","","","","","","","","","User data used by protocol when spend hook is enabled","Value of the coin","Value of the coin","Blinding factor for the value pedersen commitment","Blinding factor for the value pedersen commitment","","","","","Struct holding necessary information to build a …","","","Amount of tokens we want to mint","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Caller’s keypair","","","","Proving key for the <code>Mint_V1</code> zk circuit","<code>Mint_V1</code> zkas circuit ZkBinary","","","","","","Spend hook for the output","","","","","","","","","","","","","","","","","","","","","User data for the output","","","","","Struct holding necessary information to build a …","","","","","","","","","","Rewarded block height(slot)","","","","","","","","This function should only be used for testing, as PoW …","","","","","","","","","","","","","","Extending fork last proposal/block hash","Extending fork second to last proposal/block hash","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Extending fork last proposal/block nonce","","","","Proving key for the <code>Mint_V1</code> zk circuit","<code>Mint_V1</code> zkas circuit ZkBinary","","","","","","Reward recipient’s public key","Caller’s secret key, used for signing and VRF proof …","Merkle tree of coins used to create inclusion proofs Spend …","","","","","","","","","","","","","","","","","","","","","User data for the output","","","","","","Struct holding necessary information to build a …","","","","","","","","","","","","","","","","","","","","Proving key for the <code>Burn_V1</code> zk circuit","<code>Burn_V1</code> zkas circuit ZkBinary","<code>OwnCoin</code> we’re given to use in this builder","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Merkle tree of coins used to create inclusion proofs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Struct holding necessary information to build a …","","","","","","","","","","","Proving key for the <code>Burn_V1</code> zk circuit","<code>Burn_V1</code> zkas circuit ZkBinary","The coin to be used as the input to the swap","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Proving key for the <code>Mint_V1</code> zk circuit","<code>Mint_V1</code> zkas circuit ZkBinary","","","","","Party’s public key for receiving the output","","Spend hook for the party’s output","The blinds to be used for token ID pedersen commitments","The token ID of the party’s output to receive","The token ID of the party’s input to swap (send)","Merkle tree of coins used to create inclusion proofs","","","","","","","","","","","","","User data blind for the party’s input","User data for the party’s output","The blinds to be used for value pedersen commitments <code>[0]</code> …","The value of the party’s output to receive","The value of the party’s input to swap (send)","","","Struct holding necessary information to build a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Mint authority keypair","","","","","","","","Proving key for the <code>TokenFreeze_V1</code> zk circuit,","<code>TokenFreeze_V1</code> zkas circuit ZkBinary","","","","","","","","","","","","","","","","","","","","","","","Struct holding necessary information to build a …","","","Amount of tokens we want to mint","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Mint authority keypair","","","","","","Recipient of the minted tokens","","Spend hook for the output","","","","Proving key for the <code>TokenMint_V1</code> zk circuit,","<code>TokenMint_V1</code> zkas circuit ZkBinary","","","","","","","","","","","","","","","","","","","User data for the output","","","","","","Struct holding necessary information to build a …","Struct holding necessary information to build a …","","Output metadata claimed from building a <code>Money::Transfer</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Proving key for the <code>Burn_V1</code> zk circuit","Proving key for the <code>Burn_V1</code> zk circuit","<code>Burn_V1</code> zkas circuit ZkBinary","<code>Burn_V1</code> zkas circuit ZkBinary","Spend hook for the change output","User data for the change output","Marks if we want to build clear inputs instead of …","Clear inputs","","Set of <code>OwnCoin</code> we’re given to use in this builder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","User data blind for inputs","The value blinds created for the inputs","The value blinds created for the inputs","Anonymous inputs","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Caller’s keypair","","","","","","","","","","","","","Proving key for the <code>Mint_V1</code> zk circuit","Proving key for the <code>Mint_V1</code> zk circuit","<code>Mint_V1</code> zkas circuit ZkBinary","<code>Mint_V1</code> zkas circuit ZkBinary","The coins that have been minted in this builder","","","","The value blinds created for the outputs","The value blinds created for the outputs","Anonymous outputs","The parameters for <code>Money::Transfer</code> respective to this call","","","","","","","","","","The ZK proofs created in this builder","The ZK proofs created in this builder","","Spend hook for the recipient’s output","User data for the recipient’s output","User data blind for the recipient’s output","Recipient’s public key","","Select coins from <code>coins</code> of at least <code>min_value</code> in total. …","","","The ephemeral secret keys created for signing","The ephemeral secret keys created for signing","","","The coins that have been spent in this builder","","","","","","","Token ID that we want to send to the recipient","Merkle tree of coins used to create inclusion proofs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Amount that we want to send to the recipient","","","","","","","","","","","","","Struct holding necessary information to build a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Revealed Merkle root","Proving key for the <code>Mint_V1</code> zk circuit","<code>Mint_V1</code> zkas circuit ZkBinary","Revealed nullifier","<code>ConsensusOwnCoin</code> we’re given to use in this builder","","","","","","","","Recipient pubkey of the minted output","Signature public key used in the input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Blinding factor for value commitment","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","A contract call’s clear input","A <code>Coin</code> represented in the Money state","Anonymous input for consensus contract calls","A consensus contract call’s anonymous output","Parameters for <code>Consensus::Stake</code>","State update for <code>Consensus::Stake</code>","Parameters for <code>Consensus::Unstake</code>","Parameters for <code>Consensus::UnstakeRequest</code>","State update for <code>Consensus::Unstake</code>","A contract call’s anonymous input","Parameters for <code>Money::GenesisMint</code>","State update for <code>Money::GenesisMint</code>","Parameters for <code>Money::PoWReward</code>","State update for <code>Money::PoWReward</code>","Parameters for <code>Money::Stake</code>","State update for <code>Money::Stake</code>","Parameters for <code>Money::TokenFreeze</code>","State update for <code>Money::TokenFreeze</code>","Parameters for <code>Money::TokenMint</code>","State update for <code>Money::TokenMint</code>","Parameters for <code>Money::Transfer</code> and <code>Money::OtcSwap</code>","State update for <code>Money::Transfer</code> and <code>Money::OtcSwap</code>","Parameters for <code>Money::Unstake</code>","State update for <code>Money::Unstake</code>","A contract call’s anonymous output","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Clear inputs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Minted coin","Minted coin","The newly minted coin","The newly minted coin","The newly minted coin","The newly minted coin","The newly minted coin","Minted coinspoch the coin was minted","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extending fork last proposal/block hash","Extending fork second to last proposal/block hash","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create a <code>Coin</code> object from given bytes, erroring if the …","","","","","","","","","","","","","","","","","","","","","","","","","","","Reference the raw inner base field element","Clear input","Clear input","Clear input","Anonymous input","Burnt token revealed info","Burnt token revealed info","","Anonymous input","Anonymous inputs","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Revealed Merkle root","Revealed Merkle root","AEAD encrypted note","AEAD encrypted note","Revealed nullifier","Revealed nullifier","Revealed nullifier","Revealed nullifier","Revealed nullifiers","Anonymous output","Anonymous output","Anonymous output","Anonymous output","Anonymous output","","Anonymous outputs","","","","","","","","","","","","","","","","","","","","","","","","","","Public key for the signature","Public key for the signature","Public key for the signature","Mint authority public key","Mint authority public key","Spend hook used to invoke other contracts. If this value …","Convert the <code>Coin</code> type into 32 raw bytes","","","","","","","","","","","","","","","","","","","","","","","","","","","Blinding factor for <code>token_id</code>","Blinding factor for <code>token_id</code>","Commitment for the input’s token ID","Commitment for the output’s token ID","Input’s token ID","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Encrypted user data field. An encrypted commitment to …","Input’s value (amount)","Blinding factor for <code>value</code>","Pedersen commitment for the input’s value","Pedersen commitment for the staked coin’s value","Pedersen commitment for the output’s value","Pedersen commitment for the output’s value","VRF proof for block rank calculation","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,12,12,12,12,12,12,12,12,12,12,0,12,12,12,12,0,12,12,12,12,12,12,12,0,12,12,12,12,12,12,12,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,16,17,18,15,16,17,18,15,16,17,18,15,16,17,18,15,16,17,18,15,16,17,18,15,16,17,18,16,18,15,16,17,18,15,16,17,18,15,16,17,18,15,16,17,18,15,16,17,18,15,16,17,18,15,16,17,18,15,16,17,18,17,15,16,17,18,15,15,15,15,16,16,16,16,17,17,17,17,18,18,18,18,15,16,17,18,15,15,16,16,17,18,0,15,16,17,18,15,16,17,18,15,16,17,18,15,16,17,18,15,16,17,18,15,16,17,18,16,18,15,16,18,16,18,15,16,17,18,0,17,17,16,18,15,17,15,0,0,15,16,17,18,15,0,15,0,0,15,16,17,18,15,16,17,18,15,16,17,18,0,15,16,17,18,15,16,17,18,15,16,17,18,15,15,17,15,17,15,16,17,18,0,0,0,31,32,34,31,32,34,31,32,34,31,32,34,31,31,34,32,34,31,32,34,31,32,34,31,32,34,31,32,34,31,32,34,31,32,34,31,32,34,31,32,34,31,32,34,31,31,32,34,31,31,31,32,32,34,31,32,31,34,34,32,34,31,32,34,31,32,34,31,32,34,31,32,34,31,32,34,31,31,34,32,34,31,0,0,0,37,39,40,37,39,40,37,37,39,40,37,39,40,37,37,37,40,39,40,37,39,40,37,39,40,37,39,40,37,37,37,39,40,37,39,40,37,39,40,37,39,40,37,39,40,37,39,40,37,37,39,40,37,37,37,39,39,40,37,39,37,37,37,40,40,39,40,37,39,40,37,39,40,37,39,40,37,39,40,37,39,40,37,37,40,39,40,37,0,0,0,0,42,49,45,41,42,49,45,41,42,49,45,41,42,49,45,41,41,41,41,41,0,42,49,45,41,42,49,45,41,42,49,45,41,42,49,45,41,42,49,45,41,42,49,45,41,42,49,45,41,42,49,45,41,42,49,45,41,42,49,45,41,42,49,45,41,45,45,49,45,49,42,42,49,45,41,42,45,49,42,49,49,49,41,42,49,45,41,42,49,45,41,42,49,45,41,42,49,45,41,42,49,45,41,42,49,45,41,49,42,49,42,49,45,41,0,0,51,50,51,50,51,50,51,50,50,50,50,50,51,50,51,50,51,50,51,50,51,50,51,50,51,50,51,50,51,50,51,50,51,50,50,50,51,51,50,51,50,51,50,50,50,50,50,51,50,51,50,51,50,51,50,51,50,51,50,50,50,50,50,50,51,50,0,0,0,53,55,52,53,55,52,53,55,52,53,55,52,52,0,53,55,52,53,55,52,53,55,52,53,55,52,53,55,52,53,55,52,53,55,52,53,55,52,53,55,52,53,55,52,53,55,52,52,53,53,55,52,53,55,55,52,52,55,53,55,52,53,55,52,53,55,52,53,55,52,53,55,52,53,55,52,53,55,52,0,0,0,56,57,59,56,57,59,56,57,59,56,57,59,56,56,59,0,57,59,56,57,59,56,57,59,56,57,59,56,57,59,56,57,59,56,57,59,56,57,59,56,57,59,56,57,59,56,57,59,56,56,57,57,59,56,57,56,59,56,59,59,59,56,56,57,59,56,57,59,56,57,59,56,57,59,56,57,59,56,57,59,56,56,59,57,59,56,0,0,0,0,0,0,0,0,0,64,62,69,68,103,67,58,60,63,64,62,69,68,103,67,58,60,63,64,62,69,68,103,67,58,60,63,64,62,69,68,103,67,58,60,63,60,63,60,63,60,63,63,63,63,60,69,63,0,60,0,0,64,62,69,68,103,67,58,60,63,64,62,69,68,103,67,58,60,63,64,62,69,68,103,67,58,60,63,64,62,69,68,103,67,58,60,63,64,62,69,68,103,67,58,60,63,64,62,69,68,103,67,58,60,63,63,64,62,60,64,62,69,68,103,67,58,60,63,64,62,69,68,103,67,58,60,63,64,62,69,68,103,67,58,60,63,64,62,69,68,103,67,58,60,63,63,64,62,69,68,103,67,58,60,63,67,67,68,60,63,60,63,64,67,68,62,64,62,60,64,64,62,69,68,103,67,58,60,63,64,62,58,63,63,63,63,67,0,68,103,64,62,68,58,64,69,68,69,68,103,58,63,63,64,62,69,68,103,67,58,60,63,64,62,69,68,103,67,58,60,63,64,62,69,68,103,67,58,60,63,64,62,69,68,103,67,58,60,63,64,62,69,68,103,67,58,60,63,64,62,69,68,103,67,58,60,63,58,67,68,103,58,63,69,68,64,62,69,68,103,67,58,60,63,0,0,0,0,71,73,72,70,71,73,72,70,71,73,72,70,71,73,72,70,70,73,0,71,73,72,70,71,73,72,70,71,73,72,70,71,73,72,70,71,73,72,70,71,73,72,70,71,73,72,70,71,73,72,70,71,73,72,70,71,73,72,70,71,73,72,70,70,70,70,70,70,71,71,73,72,70,71,72,70,70,73,73,72,71,73,72,70,71,73,72,70,71,73,72,70,71,73,72,70,71,73,72,70,71,73,72,70,72,70,73,71,73,72,70,75,75,75,75,75,75,75,0,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,77,65,78,79,80,81,61,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,77,65,78,79,80,81,61,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,77,65,78,79,80,81,61,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,77,65,78,79,80,81,61,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,77,65,78,79,80,81,61,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,61,77,65,78,79,80,81,61,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,77,65,78,79,80,81,61,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,80,81,84,86,90,94,96,82,77,65,78,79,80,81,61,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,77,65,78,79,80,81,61,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,77,65,78,79,80,81,61,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,77,65,78,79,80,81,61,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,77,65,78,79,80,81,61,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,77,65,78,79,80,81,61,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,77,65,78,79,80,81,61,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,77,65,78,79,80,81,61,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,79,77,78,79,80,81,77,77,77,77,77,77,65,78,79,80,81,61,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,89,89,77,77,65,78,79,80,81,61,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,77,77,77,65,78,79,80,81,61,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,77,83,85,89,91,93,95,97,98,61,77,65,78,79,80,81,61,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,77,65,78,79,80,81,61,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,77,65,78,79,80,81,61,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,77,65,78,79,80,81,61,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,77,65,78,79,80,81,61,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,78,79,80,81,78,79,92,99,82,83,85,89,93,95,97,61,77,65,78,79,80,81,61,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,65,78,79,87,88,78,77,77,65,78,79,80,81,61,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,77,65,91,78,80,65,77,65,78,79,80,81,61,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,77,65,78,79,80,81,61,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,77,65,78,79,80,81,61,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,77,65,78,79,80,81,61,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,77,65,78,79,80,81,61,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,77,65,78,79,80,81,61,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,78,65,65,78,79,80,81,89,77,65,78,79,80,81,61,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,1,[]],[-1,1,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[2,-1,[]],[2,-1,[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[2,5],0,[-1,-1,[]],[[],2],[-1,-2,[],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[],[[4,[9,10]]]],0,[[]],[11,[[4,[12]]]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,13,[]],[[[6,[-1]]],[[6,[1]]],[]],[-1,1,[]],[-1,1,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,14],5,[]],[[-1,14],5,[]],[[-1,14],5,[]],[[-1,14],5,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[15,15],[16,16],[17,17],[18,18],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],0,0,[-1,[[4,[15,19]]],20],[-1,[[4,[16,19]]],20],[-1,[[4,[17,19]]],20],[-1,[[4,[18,19]]],20],[-1,[[22,[[6,[21]]]]],[23,24,25]],[-1,[[22,[[6,[21]]]]],[23,24,25]],[-1,[[22,[[6,[21]]]]],[23,24,25]],[-1,[[22,[[6,[21]]]]],[23,24,25]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[2,5],[2,5],[2,5],[2,5],[[15,-1],[[4,[2,19]]],26],[[16,-1],[[4,[2,19]]],26],[[17,-1],[[4,[2,19]]],26],[[18,-1],[[4,[2,19]]],26],[[15,-1],[[22,[[6,[21]]]]],[27,24,25]],[[16,-1],[[22,[[6,[21]]]]],[27,24,25]],[[17,-1],[[22,[[6,[21]]]]],[27,24,25]],[[18,-1],[[22,[[6,[21]]]]],[27,24,25]],0,[[15,15],28],[[16,16],28],[[17,17],28],[[18,18],28],[[-1,-2],28,[],[]],[[-1,-2],28,[],[]],[[-1,-2],28,[],[]],[[-1,-2],28,[],[]],[[-1,-2],28,[],[]],[[-1,-2],28,[],[]],[[-1,-2],28,[],[]],[[-1,-2],28,[],[]],[[-1,-2],28,[],[]],[[-1,-2],28,[],[]],[[-1,-2],28,[],[]],[[-1,-2],28,[],[]],[[-1,-2],28,[],[]],[[-1,-2],28,[],[]],[[-1,-2],28,[],[]],[[-1,-2],28,[],[]],[[15,29],30],[[16,29],30],[[17,29],30],[[18,29],30],[17,15],[-1,-1,[]],[-1,-1,[]],[18,16],[-1,-1,[]],[-1,-1,[]],0,[[],2],[[],2],[[],2],[[],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],0,[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[31,[[33,[32]]]],0,[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[2,5],[2,5],[2,5],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],2],[[],2],[[],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],0,[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],0,0,0,[[]],[[]],[[]],0,0,[34,[[36,[35]]]],0,[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[37,38],[[33,[39]]]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[37,[[33,[39]]]],[[37,38],[[33,[39]]]],0,[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[2,5],[2,5],[2,5],0,0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],2],[[],2],[[],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],0,[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],0,0,0,[[]],[[]],[[]],0,0,0,0,[40,[[36,[35]]]],0,[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[41,[[33,[42]]]],0,0,0,[[43,44,45,46,35,35,47],[[33,[[5,[48,49]]]]]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[2,5],[2,5],[2,5],[2,5],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],2],[[],2],[[],2],[[],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,0,0,0,0,[49,[[36,[35]]]],0,0,[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[50,[[33,[51]]]],0,0,0,[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[2,5],[2,5],[-1,-1,[]],[-1,-1,[]],[[],2],[[],2],[-1,-2,[],[]],[-1,-2,[],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],0,0,0,[[]],[[]],0,0,0,0,0,0,0,0,[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[52,[[33,[53]]]],[[43,44,54],[[33,[[5,[48,55]]]]]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[2,5],[2,5],[2,5],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],2],[[],2],[[],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],0,0,[[]],[[]],[[]],0,0,[55,[[36,[35]]]],0,0,0,[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[56,[[33,[57]]]],0,[[43,44,58,54,46,35,35,35,35],[[33,[[5,[48,59]]]]]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[2,5],[2,5],[2,5],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],2],[[],2],[[],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],0,0,[[]],[[]],[[]],0,0,0,0,[59,[[36,[35]]]],0,0,0,0,[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[60,[[33,[[5,[61,62]]]]]],[63,[[33,[64]]]],0,0,0,0,0,0,0,0,0,0,[[[66,[65]],[66,[46]],[66,[46]]],46],[[[66,[65]],[66,[46]],[66,[46]]],46],[[43,44,67,46,35,47],[[33,[[5,[48,68]]]]]],[[43,44,58,46,35,35,35,35],[[33,[[5,[48,69]]]]]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[2,5],[2,5],[2,5],[2,5],[2,5],[2,5],[2,5],[2,5],[2,5],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],0,[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,[[[36,[16]],38],[[33,[[36,[16]]]]]],0,0,0,0,0,0,0,[69,[[36,[35]]]],[68,[[36,[35]]]],0,0,0,0,0,0,[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[70,[[33,[71]]]],0,[[43,44,72,46,35,35,35,35],[[33,[[5,[48,73]]]]]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[2,5],[2,5],[2,5],[2,5],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],2],[[],2],[[],2],[[],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,0,0,0,[73,[[36,[35]]]],0,0,[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,14],5,[]],[-1,1,[]],[-1,1,[]],[-1,74,[]],[-1,-2,[],[]],[-1,-2,[],[]],[75,75],[[-1,-2],5,[],[]],[2,-1,[]],[2,-1,[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[2,5],[[75,29],30],[[75,29],30],[-1,-1,[]],[[],2],[-1,-2,[],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[],[[4,[9,10]]]],[[]],[-1,-2,[],[]],[-1,76,[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,13,[]],[[[6,[-1]]],[[6,[1]]],[]],[-1,1,[]],[-1,1,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,14],5,[]],[[-1,14],5,[]],[[-1,14],5,[]],[[-1,14],5,[]],[[-1,14],5,[]],[[-1,14],5,[]],[[-1,14],5,[]],[[-1,14],5,[]],[[-1,14],5,[]],[[-1,14],5,[]],[[-1,14],5,[]],[[-1,14],5,[]],[[-1,14],5,[]],[[-1,14],5,[]],[[-1,14],5,[]],[[-1,14],5,[]],[[-1,14],5,[]],[[-1,14],5,[]],[[-1,14],5,[]],[[-1,14],5,[]],[[-1,14],5,[]],[[-1,14],5,[]],[[-1,14],5,[]],[[-1,14],5,[]],[[-1,14],5,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[77,77],[65,65],[78,78],[79,79],[80,80],[81,81],[61,61],[82,82],[83,83],[84,84],[85,85],[86,86],[87,87],[88,88],[89,89],[90,90],[91,91],[92,92],[93,93],[94,94],[95,95],[96,96],[97,97],[98,98],[99,99],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],0,0,0,0,0,0,0,0,[-1,[[4,[77,19]]],20],[-1,[[4,[65,19]]],20],[-1,[[4,[78,19]]],20],[-1,[[4,[79,19]]],20],[-1,[[4,[80,19]]],20],[-1,[[4,[81,19]]],20],[-1,[[4,[61,19]]],20],[-1,[[4,[82,19]]],20],[-1,[[4,[83,19]]],20],[-1,[[4,[84,19]]],20],[-1,[[4,[85,19]]],20],[-1,[[4,[86,19]]],20],[-1,[[4,[87,19]]],20],[-1,[[4,[88,19]]],20],[-1,[[4,[89,19]]],20],[-1,[[4,[90,19]]],20],[-1,[[4,[91,19]]],20],[-1,[[4,[92,19]]],20],[-1,[[4,[93,19]]],20],[-1,[[4,[94,19]]],20],[-1,[[4,[95,19]]],20],[-1,[[4,[96,19]]],20],[-1,[[4,[97,19]]],20],[-1,[[4,[98,19]]],20],[-1,[[4,[99,19]]],20],[-1,[[22,[[6,[21]]]]],[23,24,25]],[-1,[[22,[[6,[21]]]]],[23,24,25]],[-1,[[22,[[6,[21]]]]],[23,24,25]],[-1,[[22,[[6,[21]]]]],[23,24,25]],[-1,[[22,[[6,[21]]]]],[23,24,25]],[-1,[[22,[[6,[21]]]]],[23,24,25]],[-1,[[22,[[6,[21]]]]],[23,24,25]],[-1,[[22,[[6,[21]]]]],[23,24,25]],[-1,[[22,[[6,[21]]]]],[23,24,25]],[-1,[[22,[[6,[21]]]]],[23,24,25]],[-1,[[22,[[6,[21]]]]],[23,24,25]],[-1,[[22,[[6,[21]]]]],[23,24,25]],[-1,[[22,[[6,[21]]]]],[23,24,25]],[-1,[[22,[[6,[21]]]]],[23,24,25]],[-1,[[22,[[6,[21]]]]],[23,24,25]],[-1,[[22,[[6,[21]]]]],[23,24,25]],[-1,[[22,[[6,[21]]]]],[23,24,25]],[-1,[[22,[[6,[21]]]]],[23,24,25]],[-1,[[22,[[6,[21]]]]],[23,24,25]],[-1,[[22,[[6,[21]]]]],[23,24,25]],[-1,[[22,[[6,[21]]]]],[23,24,25]],[-1,[[22,[[6,[21]]]]],[23,24,25]],[-1,[[22,[[6,[21]]]]],[23,24,25]],[-1,[[22,[[6,[21]]]]],[23,24,25]],[-1,[[22,[[6,[21]]]]],[23,24,25]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[2,5],[2,5],[2,5],[2,5],[2,5],[2,5],[2,5],[2,5],[2,5],[2,5],[2,5],[2,5],[2,5],[2,5],[2,5],[2,5],[2,5],[2,5],[2,5],[2,5],[2,5],[2,5],[2,5],[2,5],[2,5],[[77,-1],[[4,[2,19]]],26],[[65,-1],[[4,[2,19]]],26],[[78,-1],[[4,[2,19]]],26],[[79,-1],[[4,[2,19]]],26],[[80,-1],[[4,[2,19]]],26],[[81,-1],[[4,[2,19]]],26],[[61,-1],[[4,[2,19]]],26],[[82,-1],[[4,[2,19]]],26],[[83,-1],[[4,[2,19]]],26],[[84,-1],[[4,[2,19]]],26],[[85,-1],[[4,[2,19]]],26],[[86,-1],[[4,[2,19]]],26],[[87,-1],[[4,[2,19]]],26],[[88,-1],[[4,[2,19]]],26],[[89,-1],[[4,[2,19]]],26],[[90,-1],[[4,[2,19]]],26],[[91,-1],[[4,[2,19]]],26],[[92,-1],[[4,[2,19]]],26],[[93,-1],[[4,[2,19]]],26],[[94,-1],[[4,[2,19]]],26],[[95,-1],[[4,[2,19]]],26],[[96,-1],[[4,[2,19]]],26],[[97,-1],[[4,[2,19]]],26],[[98,-1],[[4,[2,19]]],26],[[99,-1],[[4,[2,19]]],26],[[77,-1],[[22,[[6,[21]]]]],[27,24,25]],[[65,-1],[[22,[[6,[21]]]]],[27,24,25]],[[78,-1],[[22,[[6,[21]]]]],[27,24,25]],[[79,-1],[[22,[[6,[21]]]]],[27,24,25]],[[80,-1],[[22,[[6,[21]]]]],[27,24,25]],[[81,-1],[[22,[[6,[21]]]]],[27,24,25]],[[61,-1],[[22,[[6,[21]]]]],[27,24,25]],[[82,-1],[[22,[[6,[21]]]]],[27,24,25]],[[83,-1],[[22,[[6,[21]]]]],[27,24,25]],[[84,-1],[[22,[[6,[21]]]]],[27,24,25]],[[85,-1],[[22,[[6,[21]]]]],[27,24,25]],[[86,-1],[[22,[[6,[21]]]]],[27,24,25]],[[87,-1],[[22,[[6,[21]]]]],[27,24,25]],[[88,-1],[[22,[[6,[21]]]]],[27,24,25]],[[89,-1],[[22,[[6,[21]]]]],[27,24,25]],[[90,-1],[[22,[[6,[21]]]]],[27,24,25]],[[91,-1],[[22,[[6,[21]]]]],[27,24,25]],[[92,-1],[[22,[[6,[21]]]]],[27,24,25]],[[93,-1],[[22,[[6,[21]]]]],[27,24,25]],[[94,-1],[[22,[[6,[21]]]]],[27,24,25]],[[95,-1],[[22,[[6,[21]]]]],[27,24,25]],[[96,-1],[[22,[[6,[21]]]]],[27,24,25]],[[97,-1],[[22,[[6,[21]]]]],[27,24,25]],[[98,-1],[[22,[[6,[21]]]]],[27,24,25]],[[99,-1],[[22,[[6,[21]]]]],[27,24,25]],0,[[77,77],28],[[78,78],28],[[79,79],28],[[80,80],28],[[81,81],28],[[-1,-2],28,[],[]],[[-1,-2],28,[],[]],[[-1,-2],28,[],[]],[[-1,-2],28,[],[]],[[77,29],30],[[77,29],30],[[65,29],30],[[78,29],30],[[79,29],30],[[80,29],30],[[81,29],30],[[61,29],30],[[82,29],30],[[83,29],30],[[84,29],30],[[85,29],30],[[86,29],30],[[87,29],30],[[88,29],30],[[89,29],30],[[90,29],30],[[91,29],30],[[92,29],30],[[93,29],30],[[94,29],30],[[95,29],30],[[96,29],30],[[97,29],30],[[98,29],30],[[99,29],30],0,0,[35,77],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[100,[11]]],[[4,[77,101]]]],[102,[[4,[77]]]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[77,35],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[7,[-1]]],[[7,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[[8,[-1]]],[[8,[1]]],[]],[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],[[],[[4,[9,10]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[77,[[100,[11]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,76,[]],0,0,0,0,0,[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[[[6,[-1]]],[[6,[1]]],[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[],"p":[[8,"Any",2176],[15,"usize"],[3,"With",2177],[4,"Result",2178],[15,"tuple"],[3,"Box",2179],[3,"Arc",2180],[3,"Rc",2181],[3,"Layout",2182],[3,"LayoutError",2182],[15,"u8"],[4,"MoneyFunction",0],[3,"TypeId",2176],[3,"Private",2183],[3,"MoneyNote",63],[3,"OwnCoin",63],[3,"ConsensusNote",63],[3,"ConsensusOwnCoin",63],[3,"Error",2184],[8,"Read",2185],[8,"Future",2186],[3,"Pin",2187],[8,"AsyncRead",2188],[8,"Unpin",2189],[8,"Send",2189],[8,"Write",2185],[8,"AsyncWrite",2188],[15,"bool"],[3,"Formatter",2190],[6,"Result",2190],[3,"GenesisMintCallBuilder",279],[3,"GenesisMintCallDebris",279],[6,"Result",2191],[3,"GenesisMintRevealed",279],[6,"Base",2192],[3,"Vec",2193],[3,"PoWRewardCallBuilder",364],[15,"u64"],[3,"PoWRewardCallDebris",364],[3,"PoWRewardRevealed",364],[3,"MoneyStakeCallBuilder",455],[3,"MoneyStakeCallDebris",455],[3,"ZkBinary",2194],[3,"ProvingKey",2195],[3,"TransactionBuilderInputInfo",455],[6,"Scalar",2192],[3,"SecretKey",2196],[3,"Proof",2195],[3,"MoneyStakeBurnRevealed",455],[3,"SwapCallBuilder",573],[3,"SwapCallDebris",573],[3,"TokenFreezeCallBuilder",641],[3,"TokenFreezeCallDebris",641],[3,"Keypair",2196],[3,"TokenFreezeRevealed",641],[3,"TokenMintCallBuilder",723],[3,"TokenMintCallDebris",723],[3,"TransferCallOutput",812],[3,"TokenMintRevealed",723],[3,"TransferCallBuilder2",812],[3,"MoneyTransferParamsV1",1279],[3,"TransferCallSecrets",812],[3,"TransferCallBuilder",812],[3,"TransferCallDebris",812],[3,"ClearInput",1279],[15,"slice"],[3,"TransferCallInput",812],[3,"TransferBurnRevealed",812],[3,"TransferMintRevealed",812],[3,"MoneyUnstakeCallBuilder",1096],[3,"MoneyUnstakeCallDebris",1096],[3,"TransactionBuilderOutputInfo",1096],[3,"MoneyMintRevealed",1096],[8,"Error",2197],[4,"MoneyError",1211],[3,"String",2198],[3,"Coin",1279],[3,"Input",1279],[3,"ConsensusInput",1279],[3,"Output",1279],[3,"ConsensusOutput",1279],[3,"MoneyTransferUpdateV1",1279],[3,"MoneyGenesisMintParamsV1",1279],[3,"MoneyGenesisMintUpdateV1",1279],[3,"MoneyTokenMintParamsV1",1279],[3,"MoneyTokenMintUpdateV1",1279],[3,"MoneyTokenFreezeParamsV1",1279],[3,"MoneyTokenFreezeUpdateV1",1279],[3,"MoneyPoWRewardParamsV1",1279],[3,"MoneyPoWRewardUpdateV1",1279],[3,"MoneyStakeParamsV1",1279],[3,"MoneyStakeUpdateV1",1279],[3,"MoneyUnstakeParamsV1",1279],[3,"MoneyUnstakeUpdateV1",1279],[3,"ConsensusStakeParamsV1",1279],[3,"ConsensusStakeUpdateV1",1279],[3,"ConsensusUnstakeReqParamsV1",1279],[3,"ConsensusUnstakeParamsV1",1279],[3,"ConsensusUnstakeUpdateV1",1279],[15,"array"],[4,"ContractError",2199],[15,"str"],[3,"TransferCallClearInput",812]],"b":[[1260,"impl-Display-for-MoneyError"],[1261,"impl-Debug-for-MoneyError"],[1698,"impl-Display-for-Coin"],[1699,"impl-Debug-for-Coin"]]},\
"darkfi_sdk":{"doc":"","t":"CACAAOAAOOAACOCCCAOARRDDDFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMFMLLLLLLMLLLLLLMMLLLMMMMMMMLLLMLLLLLLLLLLLLCCCCCCCCCCCCCCCCAAAAAAAAAAACCCAAAARRCRRRRRCCCCAAARNRNRRRRNDNREENRRRNDNLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAAALLLLLLLLLLLLLLLLLLLAALLLLLLLRRRFRRRFRRRFRRRFRRRFRRRFRNNRRRRNNNEELRRRLLLLLLLLLLLLLLLLLLLLLFLLLLFLLLLLLLLLLLFFFDDDDDDMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLRFFRDLLMLLLLLLLLLLLMLLLLMLLLLLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLMLLLLLLLLLLLLLLLLLLLLLLLDDGDMMLLLLLLMLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLMMLLLLLLLLLLLLLLLRRFFFFFRDDLLLLMLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLQQQQSSIIIQSIISSSSISSQSQQQSSKKKKLKLKKKKLLLKKKKKLKKKKLLKKLLKKLLKKKKFFIIDLLLLMLLLLLLLLLLLLLMKLLLLKLIDDDLLLLLLLLLLLLFLLLLLLLLLLMLLLLLFLLKLKLLLLLLLLFFFFMMLLLFMFLFLLMFLLLLLLLLLLLLDDDMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFRRRRRRRRGFFFFFFFFFFFFFFRFRRNEGNRRRRRRRNNNNNNNNNRGNRRRNNNRNNNRRRNNNRNRNLLLLLLLLLLLLLLLOLLLLLLFFFDLLLLMMLLLLLLLLLLLLLLLLLFFFFFFFFFFFFFFFFFFFFF","n":["ContractCall","blockchain","bridgetree","crypto","db","define_contract","entrypoint","error","fp_from_bs58","fp_to_bs58","log","merkle","merkle_add","msg","num_bigint","num_traits","pasta","tx","ty_from_fp","util","POS_START","POW_CUTOFF","PidOutput","PreviousSlot","Slot","block_version","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","decode","decode","decode","decode_async","decode_async","decode_async","default","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","encode","encode","encode","encode_async","encode_async","encode_async","eq","eq","eq","error","error","expected_reward","f","fmt","fmt","fmt","from","from","from","id","init","init","init","into","into","into","last_hashes","last_nonce","new","new","new","pid","previous","producers","reward","second_to_last_hashes","sigma1","sigma2","to_owned","to_owned","to_owned","total_tokens","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","CONSENSUS_CONTRACT_ID","CONSENSUS_CONTRACT_ID","ContractId","DAO_CONTRACT_ID","DAO_CONTRACT_ID","DARK_TOKEN_ID","DARK_TOKEN_ID","Keypair","MONEY_CONTRACT_ID","MONEY_CONTRACT_ID","MerkleNode","MerkleTree","Nullifier","PublicKey","SecretKey","TokenId","constants","contract_id","diffie_hellman","ecvrf","keypair","merkle_node","mimc_vdf","note","nullifier","pasta_prelude","pedersen","pedersen_commitment_base","pedersen_commitment_u64","poseidon_hash","schnorr","smt","token_id","util","BLOCK_HASH_DOMAIN","DRK_SCHNORR_DOMAIN","H","L_ORCHARD_BASE","L_ORCHARD_SCALAR","L_VALUE","MERKLE_DEPTH","MERKLE_DEPTH_ORCHARD","NullifierK","OrchardFixedBases","OrchardFixedBasesFull","ValueCommitV","fixed_bases","sinsemilla","util","COMMIT_IVK_PERSONALIZATION","CommitIvkR","FIXED_BASE_WINDOW_SIZE","Full","H","NOTE_COMMITMENT_PERSONALIZATION","NUM_WINDOWS","NUM_WINDOWS_SHORT","NoteCommitR","NullifierK","NullifierK","ORCHARD_PERSONALIZATION","OrchardFixedBases","OrchardFixedBasesFull","SpendAuthG","VALUE_COMMITMENT_PERSONALIZATION","VALUE_COMMITMENT_R_BYTES","VALUE_COMMITMENT_V_BYTES","ValueCommitR","ValueCommitV","ValueCommitV","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","commit_ivk_r","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","generator","generator","generator","init","init","init","init","into","into","into","into","note_commit_r","nullifier_k","spend_auth_g","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","u","u","u","value_commit_r","value_commit_v","vzip","vzip","vzip","vzip","z","z","z","GENERATOR","U","Z","generator","GENERATOR","U","Z","generator","GENERATOR","U","Z","generator","GENERATOR","U","Z","generator","GENERATOR","U","Z","generator","GENERATOR","U_SHORT","Z_SHORT","generator","C","CommitIvk","CommitIvk","INV_TWO_POW_K","K","L_ORCHARD_MERKLE","MERKLE_CRH_PERSONALIZATION","MerkleCrh","NoteCommit","NoteCommit","OrchardCommitDomains","OrchardHashDomains","Q","Q_COMMIT_IVK_M_GENERATOR","Q_MERKLE_CRH","Q_NOTE_COMMITMENT_M_GENERATOR","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","eq","eq","fmt","fmt","from","from","hash_domain","i2lebsp_k","init","init","into","into","lebs2ip_k","r","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","gen_const_array","gen_const_array_with_default","i2lebsp","CONSENSUS_CONTRACT_ID","CONTRACT_ID_PREFIX","ContractId","DAO_CONTRACT_ID","DEPLOYOOOR_CONTRACT_ID","MONEY_CONTRACT_ID","__private_field","__private_field","__private_field","__private_field","__private_field","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","decode","decode_async","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","derive","derive_public","drop","drop","drop","drop","drop","drop","encode","encode_async","eq","fmt","fmt","from","from","from","from","from","from","from","from_bytes","from_str","hash_state_id","init","init","init","init","init","init","inner","into","into","into","into","into","into","to_bytes","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","KDF_SAPLING_PERSONALIZATION","kdf_sapling","sapling_ka_agree","VRF_DOMAIN","VrfProof","borrow","borrow_mut","c","clone","clone_into","decode","decode_async","deref","deref_mut","drop","encode","encode_async","fmt","from","gamma","hash_output","init","into","prove","s","to_owned","try_from","try_into","type_id","verify","vzip","Keypair","PublicKey","SecretKey","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","decode","decode","decode","decode_async","decode_async","decode_async","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","encode","encode","encode","encode_async","encode_async","encode_async","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_bytes","from_bytes","from_secret","from_str","from_str","init","init","init","inner","inner","into","into","into","new","public","random","random","secret","sign","to_bytes","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify","vzip","vzip","vzip","x","xy","y","EMPTY_ROOTS","MerkleNode","MerkleTree","UNCOMMITTED_ORCHARD","__private_field","__private_field","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","checkpoints","clone","clone_into","cmp","combine","conditional_select","current_bridge","decode","decode_async","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","empty_leaf","empty_root","encode","encode_async","eq","fmt","fmt","from","from","from","from","from_bytes","from_str","init","init","init","inner","into","into","into","max_checkpoints","new","partial_cmp","prior_bridges","saved","to_bytes","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","L_FERMAT_EXPONENT","MODULUS","backward_mimc","calculate_round_constants","eval","forward_mimc","verify","AEAD_TAG_SIZE","AeadEncryptedNote","ElGamalEncryptedNote","borrow","borrow","borrow_mut","borrow_mut","ciphertext","clone","clone","clone_into","clone_into","decode","decode","decode_async","decode_async","decrypt","decrypt","deref","deref","deref_mut","deref_mut","drop","drop","encode","encode","encode_async","encode_async","encrypt","encrypt","encrypted_values","ephem_public","ephem_public","eq","eq","fmt","fmt","from","from","init","init","into","into","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Nullifier","borrow","borrow_mut","clone","clone_into","decode","decode_async","deref","deref_mut","drop","encode","encode_async","eq","fmt","fmt","from","from","from_bytes","from_str","init","inner","into","to_bytes","to_owned","to_string","try_from","try_into","type_id","vzip","AffineExt","AffineRepr","Base","Base","CAPACITY","CURVE_ID","Curve","CurveAffine","CurveExt","CurveExt","DELTA","Field","Group","MODULUS","MULTIPLICATIVE_GENERATOR","NUM_BITS","ONE","PrimeField","ROOT_OF_UNITY","ROOT_OF_UNITY_INV","Repr","S","Scalar","ScalarExt","ScalarExt","TWO_INV","ZERO","a","a","b","b","batch_normalize","coordinates","cube","double","double","endo","from_repr","from_repr_vartime","from_str_vartime","from_u128","from_xy","generator","hash_to_curve","identity","invert","is_even","is_identity","is_odd","is_on_curve","is_on_curve","is_zero","is_zero_vartime","jacobian_coordinates","new_jacobian","pow","pow_vartime","random","random","sqrt","sqrt_alt","sqrt_ratio","square","to_affine","to_repr","pedersen_commitment_base","pedersen_commitment_u64","SchnorrPublic","SchnorrSecret","Signature","borrow","borrow_mut","clone","clone_into","commit","decode","decode_async","deref","deref_mut","drop","dummy","encode","encode_async","eq","fmt","from","init","into","response","sign","to_owned","try_from","try_into","type_id","verify","vzip","FieldHasher","Path","Poseidon","SparseMerkleTree","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","calculate_root","check_membership","clone","clone","clone_into","clone_into","convert_index_to_last_level","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","empty_hashes","fmt","fmt","from","from","from","gen_empty_hashes","generate_membership_proof","get_index","hash","hash","hasher","hasher","init","init","init","insert_batch","into","into","into","is_left_child","is_root","left_child","log2","marker","marker","new","new","new_sequential","parent","path","right_child","root","sibling","to_owned","to_owned","tree","tree_height","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","DARK_TOKEN_ID","TOKEN_ID_PREFIX","TokenId","__private_field","__private_field","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","decode","decode_async","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","derive","derive_public","drop","drop","drop","encode","encode_async","eq","fmt","fmt","from","from","from","from","from_bytes","from_str","init","init","init","inner","into","into","into","to_bytes","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","hash_to_scalar","mod_r_p","poseidon_hash","CALLER_ACCESS_DENIED","DB_CONTAINS_KEY_FAILED","DB_DEL_FAILED","DB_GET_FAILED","DB_INIT_FAILED","DB_LOOKUP_FAILED","DB_SET_FAILED","DB_SUCCESS","DbHandle","db_contains_key","db_contains_key_","db_del","db_del_","db_get","db_get_","db_init","db_init_","db_lookup","db_lookup_","db_set","db_set_","zkas_db_set","zkas_db_set_","SUCCESS","deserialize","CALLER_ACCESS_DENIED","CUSTOM_ZERO","CallerAccessDenied","ContractError","ContractResult","Custom","DB_CONTAINS_KEY_FAILED","DB_DEL_FAILED","DB_GET_FAILED","DB_INIT_FAILED","DB_LOOKUP_FAILED","DB_NOT_FOUND","DB_SET_FAILED","DbContainsKeyFailed","DbDelFailed","DbGetFailed","DbInitFailed","DbLookupFailed","DbNotFound","DbSetFailed","Err","Err","GET_SYSTEM_TIME_FAILED","GenericResult","GetSystemTimeFailed","INTERNAL_ERROR","INVALID_FUNCTION","IO_ERROR","Internal","InvalidFunction","IoError","NULLIFIER_EXIST_CHECK","NullifierExistCheck","Ok","Ok","SET_RETVAL_ERROR","SMT_INVALID_LEAF","SMT_INVALID_PATH_NODES","SetRetvalError","SmtInvalidLeaf","SmtInvalidPathNodes","UPDATE_ALREADY_SET","UpdateAlreadySet","VALID_MERKLE_CHECK","ValidMerkleCheck","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","fmt","fmt","from","from","from","from","init","into","to_builtin","to_owned","to_string","try_from","try_into","type_id","vzip","drk_log","merkle_add","merkle_add_","ContractCall","borrow","borrow_mut","clone","clone_into","contract_id","data","decode","decode_async","deref","deref_mut","drop","encode","encode_async","eq","fmt","from","init","into","to_owned","try_from","try_into","type_id","vzip","get_blockchain_time","get_blockchain_time_","get_current_epoch","get_current_epoch_","get_current_slot","get_current_slot_","get_object_bytes","get_object_bytes_","get_object_size","get_object_size_","get_slot","get_slot_","get_verifying_slot","get_verifying_slot_","get_verifying_slot_epoch","get_verifying_slot_epoch_","parse_ret","put_object_bytes","put_object_bytes_","set_return_data","set_return_data_"],"q":[[0,"darkfi_sdk"],[20,"darkfi_sdk::blockchain"],[110,"darkfi_sdk::crypto"],[144,"darkfi_sdk::crypto::constants"],[159,"darkfi_sdk::crypto::constants::fixed_bases"],[266,"darkfi_sdk::crypto::constants::fixed_bases::commit_ivk_r"],[270,"darkfi_sdk::crypto::constants::fixed_bases::note_commit_r"],[274,"darkfi_sdk::crypto::constants::fixed_bases::nullifier_k"],[278,"darkfi_sdk::crypto::constants::fixed_bases::spend_auth_g"],[282,"darkfi_sdk::crypto::constants::fixed_bases::value_commit_r"],[286,"darkfi_sdk::crypto::constants::fixed_bases::value_commit_v"],[290,"darkfi_sdk::crypto::constants::sinsemilla"],[344,"darkfi_sdk::crypto::constants::util"],[347,"darkfi_sdk::crypto::contract_id"],[454,"darkfi_sdk::crypto::diffie_hellman"],[457,"darkfi_sdk::crypto::ecvrf"],[485,"darkfi_sdk::crypto::keypair"],[576,"darkfi_sdk::crypto::merkle_node"],[648,"darkfi_sdk::crypto::mimc_vdf"],[655,"darkfi_sdk::crypto::note"],[708,"darkfi_sdk::crypto::nullifier"],[737,"darkfi_sdk::crypto::pasta_prelude"],[802,"darkfi_sdk::crypto::pedersen"],[804,"darkfi_sdk::crypto::schnorr"],[833,"darkfi_sdk::crypto::smt"],[910,"darkfi_sdk::crypto::token_id"],[971,"darkfi_sdk::crypto::util"],[974,"darkfi_sdk::db"],[997,"darkfi_sdk::entrypoint"],[999,"darkfi_sdk::error"],[1066,"darkfi_sdk::log"],[1067,"darkfi_sdk::merkle"],[1069,"darkfi_sdk::tx"],[1093,"darkfi_sdk::util"],[1114,"std::io::error"],[1115,"core::result"],[1116,"std::io"],[1117,"core::future::future"],[1118,"alloc::boxed"],[1119,"core::pin"],[1120,"futures_io::if_std"],[1121,"core::marker"],[1122,"core::marker"],[1123,"core::fmt"],[1124,"alloc::vec"],[1125,"pasta_curves::pallas"],[1126,"core::any"],[1127,"pasta_curves::pallas"],[1128,"core::marker"],[1129,"alloc::string"],[1130,"blake2b_simd"],[1131,"rand_core"],[1132,"rand_core"],[1133,"incrementalmerkletree"],[1134,"subtle"],[1135,"core::option"],[1136,"num_bigint::biguint"],[1137,"darkfi_serial"],[1138,"darkfi_serial"],[1139,"subtle"],[1140,"pasta_curves::pallas"],[1141,"core::cmp"],[1142,"core::fmt"],[1143,"bs58::decode"]],"d":["","Blockchain structures","","Crypto-related definitions","Database functions","","Entrypoint used for the wasm binaries","Error handling","","","Logging infrastructure","Merkle","","Print a message to the log","","","","Transaction structure","","Utility functions","","","Auxiliary structure used to keep track of slot PID output.","Auxiliary structure used to keep track of slots’ …","Auxiliary structure used to keep track of slot validation …","Auxiliary function to calculate provided block …","","","","","","","","","","","","","","","","","","","Represents the genesis slot previous slot on current …","Represents the genesis slot PID output on current timestamp","Represents the genesis slot on current timestamp","","","","","","","","","","","","","","","","","","","Feedback error","Feedback error","Auxiliary function to calculate provided block …","Inverse probability <code>f</code> of becoming a block producer","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Slot UID","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Existing forks last proposal/block hashes, as observed by …","Last block/proposal nonce(eta)","","","","Slot PID output","Previous slot information","Block producers count","Slot reward","Existing forks second to last proposal/block hashes, as …","Slot sigma1","Slot sigma2","","","","Total tokens up until this slot","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Cryptographic constants","Contract ID definitions and methods","Diffie-Hellman techniques","Elliptic curve VRF (Verifiable Random Function) …","Keypairs, secret keys, and public keys","Merkle node definitions","MiMC VDF …","Note encryption","Nullifier definitions","Convenience module to import all the pasta traits. You …","Pedersen commitment utilities","","","","Schnorr signature traits","Sparse Merkle Tree implementation This file provides a …","Token ID definitions and methods","Miscellaneous utilities","Domain prefix used for block hashes, with <code>hash_to_curve</code>.","Domain prefix used for Schnorr signatures, with …","","$\\\\ell^\\\\mathsf{Orchard}_\\\\mathsf{base}$","$\\\\ell^\\\\mathsf{Orchard}_\\\\mathsf{scalar}$","$\\\\ell_\\\\mathsf{value}$","","","","","","","Orchard fixed bases.","Sinsemilla generators","","SWU hash-to-curve personalization for the IVK commitment …","","Window size for fixed-base scalar multiplication","","$2^{<code>FIXED_BASE_WINDOW_SIZE</code>}$","SWU hash-to-curve personalization for the note commitment …","Number of windows for a full-width scalar","Number of windows for a short signed scalar","","NullifierK is used in scalar mul with a base field element.","","SWU hash-to-curve personalization for the spending key …","","The Orchard fixed bases used in scalar mul with full-width …","","SWU hash-to-curve personalization for the value commitment …","SWU hash-to-curve value for the value commitment generator","SWU hash-to-curve value for the value commitment generator","","ValueCommitV is used in scalar mul with a short signed …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Generator used in SinsemillaCommit randomness for IVK …","Full-width u-values for GENERATOR","Full-width z-values for GENERATOR","","Generator used in SinsemillaCommit randomness for note …","Full-width u-values for GENERATOR","Full-width z-values for GENERATOR","","","Full-width u-values for GENERATOR","Full-width z-values for GENERATOR","","The value commitment is used to check balance between …","Full-width u-values for GENERATOR","Full-width z-values for GENERATOR","","The value commitment is used to check balance between …","Full-width u-values for GENERATOR","Full-width z-values for GENERATOR","","The value commitment is used to check balance between …","Short signed u-values for GENERATOR","Short signed z-values for GENERATOR","","The largest integer such that $2^c \\\\leq (r_P - 1) / 2$, …","","","$\\\\frac{1}{2^K}$","Number of bits of each message piece in …","$\\\\ell^\\\\mathsf{Orchard}_\\\\mathsf{Merkle}$","SWU hash-to-curve personalization for the Merkle CRH …","","","","","","","Generator used in SinsemillaHashToPoint for IVK commitment","Generator used in SinsemillaHashToPoint for Merkle …","Generator used in SinsemillaHashToPoint for note commitment","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","The sequence of K bits in little-endian order representing …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Takes in an FnMut closure and returns a constant-length …","","The sequence of bits representing a u64 in little-endian …","Contract ID for the native Consensus contract","Derivation prefix for <code>ContractId</code>","ContractId represents an on-chain identifier for a certain …","Contract ID for the native DAO contract","Contract ID for the native Deployooor contract","Contract ID for the native money contract","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Derives a <code>ContractId</code> from a <code>SecretKey</code> (deploy key)","Derive a contract ID from a <code>PublicKey</code>","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Create a <code>ContractId</code> object from given bytes.","","<code>blake3(self || tree_name)</code> is used in datbases to have a …","","","","","","","Get the inner <code>pallas::Base</code> element.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert a <code>ContractId</code> object to its byte representation","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sapling KDF for note encryption.","Sapling key agreement for note encryption. Implements …","Prefix domain used for <code>hash_to_curve</code> calls","VRF Proof","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the VRF output. <strong>It is necessary</strong> to do …","","Calls <code>U::from(self)</code>.","Execute the VRF function and create a proof given a …","","","","","","Verify a <code>VrfProof</code> given a <code>Publickey</code> and a seed input …","","Keypair structure holding a <code>SecretKey</code> and its respective …","Structure holding a public key, wrapping a <code>pallas::Point</code> …","Structure holding a secret key, wrapping a <code>pallas::Base</code> …","","","","","","","","","","","","","","","","","","","Default Keypair used in genesis block generation","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Instantiate a <code>SecretKey</code> given 32 bytes. Returns an error …","Instantiate a <code>PublicKey</code> given 32 bytes. Returns an error …","Derive a new <code>PublicKey</code> object given a <code>SecretKey</code>","Tries to create a <code>SecretKey</code> object from a base58 encoded …","Tries to create a <code>PublicKey</code> object from a base58 encoded …","","","","Get the inner object wrapped by <code>SecretKey</code>","Get the inner object wrapped by <code>PublicKey</code>","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Instantiate a new <code>Keypair</code> given a <code>SecretKey</code>","","Generate a new <code>Keypair</code> object given a source of randomness","Generate a new <code>SecretKey</code> given a source of randomness","","","Downcast the <code>PublicKey</code> to 32 bytes of <code>pallas::Point</code>","","","","","","","","","","","","","","","","","","","Fetch the <code>x</code> coordinate of this <code>PublicKey</code>","Fetch the <code>x</code> and <code>y</code> coordinates of this <code>PublicKey</code> as a tuple","Fetch the <code>y</code> coordinate of this <code>PublicKey</code>","","The <code>MerkleNode</code> is represented as a base field element.","","","","","","","","","","","","","","","Implements <code>MerkleCRH^Orchard</code> as defined in …","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Try to create a <code>MerkleNode</code> type from the given 32 bytes. …","Tries to decode a base58 string into a <code>MerkleNode</code> type. …","","","","Reference the raw inner base field element","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Convert the <code>MerkleNode</code> type into 32 raw bytes","","","","","","","","","","","","","","","An exponent to perform inverse of x^3 on prime field based …","Modulus of prime field 2^256 - 2^32 * 351 + 1","Executes <code>num_steps</code> of MiMC-calculation in backward …","Calculates set of round constants to perform …","Performs an Eval() step of the MiMC-based VDF","Executes <code>num_steps</code> of MiMC-calculation in forward …","Performs a Verify() step for the MiMC-based VDF result","AEAD tag length in bytes","An encrypted note using Diffie-Hellman and ChaCha20Poly1305","An encrypted note using an ElGamal scheme verifiable in ZK","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","The <code>Nullifier</code> is represented as a base field element.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Create a <code>Nullifier</code> object from given bytes","","","Reference the raw inner base field element","Calls <code>U::from(self)</code>.","Convert the <code>Nullifier</code> type into 32 raw bytes","","","","","","","The affine version of the curve","The affine representation for this elliptic curve.","The base field over which this elliptic curve is …","The base field over which this elliptic curve is …","How many bits of information can be reliably stored in the …","CURVE_ID used for hash-to-curve.","Efficient representation of an elliptic curve point …","This trait is the affine counterpart to <code>Curve</code> and is used …","This trait is a common interface for dealing with elements …","The projective form of the curve","Generator of the <code>t-order</code> multiplicative subgroup.","This trait represents an element of a field.","This trait represents an element of a cryptographic group.","Modulus of the field written as a string for debugging …","A fixed multiplicative generator of <code>modulus - 1</code> order. …","How many bits are needed to represent an element of this …","The one element of the field, the multiplicative identity.","This represents an element of a non-binary prime field.","The <code>2^s</code> root of unity.","Inverse of <code>Self::ROOT_OF_UNITY</code>.","The prime field can be converted back and forth into this …","An integer <code>s</code> satisfying the equation <code>2^s * t = modulus - 1</code> …","Scalars modulo the order of this group’s scalar field.","The scalar field of this elliptic curve.","The scalar field of this elliptic curve.","Inverse of $2$ in the field.","The zero element of the field, the additive identity.","Returns the curve constant a.","Returns the curve constant $a$.","Returns the curve constant b.","Returns the curve constant $b$.","Converts a batch of projective elements into affine …","Gets the coordinates of this point.","Cubes this element.","Doubles this element.","Doubles this element.","Apply the curve endomorphism by multiplying the …","Attempts to convert a byte representation of a field …","Attempts to convert a byte representation of a field …","Interpret a string of numbers as a (congruent) prime field …","Obtains a field element congruent to the integer <code>v</code>.","Obtains a point given $(x, y)$, failing if it is not on the","Returns a fixed generator of the prime-order subgroup.","Requests a hasher that accepts messages and returns …","Returns the additive identity, also known as the “…","Computes the multiplicative inverse of this element, …","Returns true iff this element is even.","Determines if this point is the identity.","Returns true iff this element is odd.","Returns whether or not this element is on the curve; should","Returns whether or not this element is on the curve; should","Returns true iff this element is zero.","Returns true iff this element is zero.","Return the Jacobian coordinates of this point.","Obtains a point given Jacobian coordinates $X : Y : Z$, …","Exponentiates <code>self</code> by <code>exp</code>, where <code>exp</code> is a little-endian …","Exponentiates <code>self</code> by <code>exp</code>, where <code>exp</code> is a little-endian …","Returns an element chosen uniformly at random using a …","Returns an element chosen uniformly at random from the …","Returns the square root of the field element, if it is …","Equivalent to <code>Self::sqrt_ratio(self, one())</code>.","Computes:","Squares this element.","Converts this element into its affine representation.","Converts an element of the prime field into the standard …","Pedersen commitment for a full-width base field element.","Pedersen commitment for a 64-bit value, in the base field.","Trait for public keys that implements a signature …","Trait for secret keys that implements a signature creation","Schnorr signature with a commit and response","","","","","","","","","","","Return a dummy identity <code>Signature</code>","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Sign a given message, using <code>rng</code> as source of randomness.","","","","","Verify a given message is valid given a signature.","","","The Path struct.","","The Sparse Merkle Tree struct.","","","","","","","Assumes leaf contains leaf-level data, i.e. hashes of …","Takes in an expected <code>root_hash</code> and leaf-level data (i.e. …","","","","","","","","","","","","","","","","An array of default hashes hashed with themselves <code>N</code> times.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","A function to generate empty hashes with a given …","Give the path leading from the leaf at <code>index</code> up to the …","Given leaf data, determine what the index of this leaf …","","","","","","","","Takes a batch of field elements, inserts these hashes into …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true iff the given index represents a left child.","Returns true iff the index represents the Merkle root.","Returns the index of the left child, given an index.","Returns the log2 value of the given number.","The phantom hasher type used to build the Merkle tree.","The phantom hasher type used to reconstruct the Merkle …","Creates a new SMT from a map of indices to field elements.","","Creates a new SMT from an array of field elements.","Returns the index of the parent, given an index.","The path represented as a sequence of sibling pairs.","Returns the index of the right child, given an index.","Returns the Merkle tree root.","Returns the index of the sibling, given an index.","","","A map from leaf indices to leaf data stored as field …","Returns the height of the tree, given the size of the tree.","","","","","","","","","","","","","Native DARK token ID","Derivation prefix for <code>TokenId</code>","TokenId represents an on-chain identifier for a certain …","","","","","","","","","","","","","","","","","","","","","Derives a <code>TokenId</code> from a <code>SecretKey</code> (mint authority)","Derives a <code>TokenId</code> from a <code>PublicKey</code>","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Create a <code>TokenId</code> object from given bytes, erroring if the …","","","","","Get the inner <code>pallas::Base</code> element.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert the <code>TokenId</code> type into 32 raw bytes","","","","","","","","","","","","","","","Hash <code>a</code> and <code>b</code> together with a prefix <code>persona</code> and return a …","Converts from pallas::Base to pallas::Scalar (aka $x …","Wrapper around poseidon in <code>halo2_gadgets</code>","","","","","","","","","","Everyone can call this. Checks if a key is contained in …","","Only update() can call this. Removes a key from the db.","","Everyone can call this. Will read a key from the key-value …","","Only deploy() can call this. Creates a new database …","","Everyone can call this. Assumes that the database already …","","Only update() can call this. Set a value within the …","","Only deploy() can call this.","","Success exit code for a contract","Deserialize a given payload in <code>entrypoint</code> The return …","","","","Error codes available in the contract.","","Allows on-chain programs to implement contract-specific …","","","","","","","","","","","","","","","Contains the error value","Contains the error value","","","","","","","","","","","","Contains the success value","Contains the success value","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Builtin return values occupy the upper 32 bits","","","","","","","","Add given elements into a Merkle tree.","","A ContractCall is the part of a transaction that executes …","","","","","ID of the contract invoked","Call data passed to the contract","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","Everyone can call this. Will return current blockchain …","","Everyone can call this. Will return current epoch.","","Everyone can call this. Will return current slot.","","","","","","Everyone can call this. Will return requested slot from …","","Everyone can call this. Will return runtime configured …","","Everyone can call this. Will return runtime configured …","","Auxiliary function to parse db_get and get_slot return …","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,3,4,0,4,3,4,5,3,4,5,5,3,4,5,3,4,5,3,5,3,4,5,5,5,3,5,3,4,4,3,4,5,5,3,4,5,3,4,5,3,4,5,3,4,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,27,0,0,0,0,28,0,27,0,0,0,28,0,0,0,28,0,27,27,28,29,30,27,28,29,30,27,28,29,30,27,28,29,30,0,27,28,29,30,27,28,29,30,27,28,29,30,27,28,29,30,27,28,29,30,27,27,27,27,28,29,30,28,29,30,27,28,29,30,27,28,29,30,0,0,0,27,28,29,30,27,28,29,30,27,28,29,30,27,28,29,30,28,29,30,0,0,27,28,29,30,28,29,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,34,0,0,0,0,33,33,34,0,0,33,0,0,0,33,34,33,34,33,34,33,34,33,34,33,34,33,34,33,34,33,34,33,34,34,0,33,34,33,34,0,34,33,34,33,34,33,34,33,34,33,34,0,0,0,0,0,0,0,0,0,41,42,43,44,45,41,42,43,44,45,40,41,42,43,44,45,40,40,40,40,40,41,41,42,42,43,43,44,44,45,45,40,41,42,43,44,45,40,40,40,41,42,43,44,45,40,40,40,40,40,40,41,42,43,44,45,40,40,40,40,40,41,42,43,44,45,40,40,41,42,43,44,45,40,40,40,40,41,42,43,44,45,40,41,42,43,44,45,40,41,42,43,44,45,40,41,42,43,44,45,40,0,0,0,0,0,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,0,0,0,55,46,47,55,46,47,55,46,47,55,46,47,55,46,47,55,46,47,55,55,46,47,55,46,47,55,46,47,55,46,47,55,46,47,55,46,47,55,46,46,47,47,55,46,46,47,47,46,47,47,46,47,55,46,47,46,47,55,46,47,55,55,55,46,55,46,47,55,46,47,46,47,55,46,47,55,46,47,55,46,47,47,55,46,47,47,47,47,0,0,0,0,62,63,62,63,58,62,63,58,95,58,58,58,58,58,95,58,58,62,62,63,63,58,62,63,58,62,63,58,58,58,58,58,58,58,58,62,63,58,58,58,58,62,63,58,58,62,63,58,95,58,58,95,95,58,58,58,62,63,58,62,63,58,62,63,58,62,63,58,0,0,0,0,0,0,0,0,0,0,66,67,66,67,66,66,67,66,67,66,67,66,67,66,67,66,67,66,67,66,67,66,67,66,67,66,67,67,66,67,66,67,66,67,66,67,66,67,66,67,66,67,66,67,66,67,66,67,66,67,0,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,96,97,96,98,99,96,0,0,0,98,99,0,0,99,99,99,100,0,99,99,99,99,101,96,98,99,100,96,98,96,98,97,98,100,100,101,96,99,99,99,99,98,101,96,101,100,99,101,99,96,98,100,100,96,96,100,100,100,101,100,100,100,100,97,99,0,0,0,0,0,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,102,57,57,57,57,103,57,0,0,0,0,86,82,77,86,82,77,77,77,82,77,82,77,0,82,86,82,77,86,82,77,86,82,77,86,82,77,86,82,77,0,86,77,81,82,81,82,86,82,77,86,86,82,77,0,0,0,0,86,77,86,82,86,0,77,0,86,0,82,77,86,0,86,82,77,86,82,77,86,82,77,86,82,77,0,0,0,89,90,89,90,88,89,90,88,88,88,88,88,89,89,90,90,88,89,90,88,88,88,89,90,88,88,88,88,88,88,89,90,88,88,88,88,89,90,88,88,89,90,88,88,88,88,89,90,88,89,90,88,89,90,88,89,90,88,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,48,0,0,0,0,0,0,0,48,48,48,48,48,48,48,78,104,0,0,48,0,0,0,48,48,48,0,48,78,104,0,0,0,48,48,48,0,48,0,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,0,48,48,48,48,48,48,0,0,0,0,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[3,3],[4,4],[5,5],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[-1,[[8,[3,7]]],9],[-1,[[8,[4,7]]],9],[-1,[[8,[5,7]]],9],[-1,[[12,[[11,[10]]]]],[13,14,15]],[-1,[[12,[[11,[10]]]]],[13,14,15]],[-1,[[12,[[11,[10]]]]],[13,14,15]],[[],3],[[],4],[[],5],[16,-1,[]],[16,-1,[]],[16,-1,[]],[16,-1,[]],[16,-1,[]],[16,-1,[]],[16,6],[16,6],[16,6],[[3,-1],[[8,[16,7]]],17],[[4,-1],[[8,[16,7]]],17],[[5,-1],[[8,[16,7]]],17],[[3,-1],[[12,[[11,[10]]]]],[18,14,15]],[[4,-1],[[12,[[11,[10]]]]],[18,14,15]],[[5,-1],[[12,[[11,[10]]]]],[18,14,15]],[[3,3],19],[[4,4],19],[[5,5],19],0,0,[1,1],0,[[3,20],21],[[4,20],21],[[5,20],21],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[[],16],[[],16],[[],16],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[1,[23,[22]],[23,[22]],24],3],[[24,24,25,25],4],[[1,3,4,25,1,1],5],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[27,27],[28,28],[29,29],[30,30],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],0,[16,-1,[]],[16,-1,[]],[16,-1,[]],[16,-1,[]],[16,-1,[]],[16,-1,[]],[16,-1,[]],[16,-1,[]],[16,6],[16,6],[16,6],[16,6],[[27,27],19],[[28,28],19],[[29,29],19],[[30,30],19],[[27,20],21],[[28,20],21],[[29,20],21],[[30,20],21],[-1,-1,[]],[30,27],[28,27],[29,27],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[28,31],[29,31],[30,31],[[],16],[[],16],[[],16],[[],16],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[28,[[23,[[32,[[32,[2]]]]]]]],[29,[[23,[[32,[[32,[2]]]]]]]],[30,[[23,[[32,[[32,[2]]]]]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[28,[[23,[1]]]],[29,[[23,[1]]]],[30,[[23,[1]]]],0,0,0,[[],31],0,0,0,[[],31],0,0,0,[[],31],0,0,0,[[],31],0,0,0,[[],31],0,0,0,[[],31],0,0,0,0,0,0,0,0,0,0,0,0,[33,31],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[33,33],[34,34],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[16,-1,[]],[16,-1,[]],[16,-1,[]],[16,-1,[]],[16,6],[16,6],[[33,33],19],[[34,34],19],[[33,20],21],[[34,20],21],[-1,-1,[]],[-1,-1,[]],[34,33],[16,[[32,[19]]]],[[],16],[[],16],[-1,-2,[],[]],[-1,-2,[],[]],[[[35,[19]]],36],[34,28],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,26,[]],[-1,26,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[32,[-2]]],37,[38,39]],[[-1,-2],[[32,[-1]]],38,37],[1,[[32,[19]]]],0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[40,40],[[-1,-2],6,[],[]],[-1,[[8,[40,7]]],9],[-1,[[12,[[11,[10]]]]],[13,14,15]],[16,-1,[]],[41,25],[42,40],[16,-1,[]],[16,-1,[]],[43,40],[44,40],[16,-1,[]],[45,40],[16,-1,[]],[16,-1,[]],[16,-1,[]],[16,-1,[]],[16,-1,[]],[16,-1,[]],[16,-1,[]],[16,-1,[]],[46,40],[47,40],[16,6],[16,6],[16,6],[16,6],[16,6],[16,6],[[40,-1],[[8,[16,7]]],17],[[40,-1],[[12,[[11,[10]]]]],[18,14,15]],[[40,40],19],[[40,20],21],[[40,20],21],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[25,40],[-1,-1,[]],[[[32,[2]]],[[8,[40,48]]]],[49,[[8,[40]]]],[[40,49],[[32,[2]]]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[40,25],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[40,[[32,[2]]]],[-1,-2,[],[]],[-1,50,[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[47,47],51],[[46,47],47],0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,[52,52],[[-1,-2],6,[],[]],[-1,[[8,[52,7]]],9],[-1,[[12,[[11,[10]]]]],[13,14,15]],[16,-1,[]],[16,-1,[]],[16,6],[[52,-1],[[8,[16,7]]],17],[[52,-1],[[12,[[11,[10]]]]],[18,14,15]],[[52,20],21],[-1,-1,[]],0,[52,22],[[],16],[-1,-2,[],[]],[[46,[35,[2]],-1],52,[53,54]],0,[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,26,[]],[[52,47,[35,[2]]],19],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[55,55],[46,46],[47,47],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[-1,[[8,[55,7]]],9],[-1,[[8,[46,7]]],9],[-1,[[8,[47,7]]],9],[-1,[[12,[[11,[10]]]]],[13,14,15]],[-1,[[12,[[11,[10]]]]],[13,14,15]],[-1,[[12,[[11,[10]]]]],[13,14,15]],[[],55],[16,-1,[]],[16,-1,[]],[16,-1,[]],[16,-1,[]],[16,-1,[]],[16,-1,[]],[16,6],[16,6],[16,6],[[55,-1],[[8,[16,7]]],17],[[46,-1],[[8,[16,7]]],17],[[47,-1],[[8,[16,7]]],17],[[55,-1],[[12,[[11,[10]]]]],[18,14,15]],[[46,-1],[[12,[[11,[10]]]]],[18,14,15]],[[47,-1],[[12,[[11,[10]]]]],[18,14,15]],[[55,55],19],[[46,46],19],[[47,47],19],[[55,20],21],[[46,20],21],[[46,20],21],[[47,20],21],[[47,20],21],[-1,-1,[]],[25,46],[-1,-1,[]],[-1,-1,[]],[56,47],[[[32,[2]]],[[8,[46,48]]]],[[[32,[2]]],[[8,[47,48]]]],[46,47],[49,[[8,[46]]]],[49,[[8,[47]]]],[[],16],[[],16],[[],16],[46,25],[47,56],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[46,55],0,[-1,55,[53,54]],[-1,46,[53,54]],0,[[46,-1,[35,[2]]],57,[53,54]],[47,[[32,[2]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,50,[]],[-1,50,[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[[47,[35,[2]],57],19],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[47,25],[47,[[6,[25,25]]]],[47,25],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[58,58],[[-1,-2],6,[],[]],[[58,58],59],[[60,58,58],58],[[58,58,61],58],0,[-1,[[8,[58,7]]],9],[-1,[[12,[[11,[10]]]]],[13,14,15]],[16,-1,[]],[62,25],[63,[[23,[58]]]],[16,-1,[]],[16,-1,[]],[16,-1,[]],[16,-1,[]],[16,-1,[]],[16,6],[16,6],[16,6],[[],58],[60,58],[[58,-1],[[8,[16,7]]],17],[[58,-1],[[12,[[11,[10]]]]],[18,14,15]],[[58,58],19],[[58,20],21],[[58,20],21],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[25,58],[[[32,[2]]],[[64,[58]]]],[49,[[8,[58]]]],[[],16],[[],16],[[],16],[58,25],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[25,58],[[58,58],[[64,[59]]]],0,0,[58,[[32,[2]]]],[-1,-2,[],[]],[-1,50,[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[1,65],65],[[],[[32,[1]]]],[[65,1],65],[[1,65],65],[[65,1,65],19],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[66,66],[67,67],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[-1,[[8,[66,7]]],9],[-1,[[8,[67,7]]],9],[-1,[[12,[[11,[10]]]]],[13,14,15]],[-1,[[12,[[11,[10]]]]],[13,14,15]],[[66,46],[[8,[-1,48]]],68],[[67,46],[[8,[[32,[25]],48]]]],[16,-1,[]],[16,-1,[]],[16,-1,[]],[16,-1,[]],[16,6],[16,6],[[66,-1],[[8,[16,7]]],17],[[67,-1],[[8,[16,7]]],17],[[66,-1],[[12,[[11,[10]]]]],[18,14,15]],[[67,-1],[[12,[[11,[10]]]]],[18,14,15]],[[-1,47,-2],[[8,[66,48]]],69,[53,54]],[[[32,[25]],46,47],[[8,[67,48]]]],0,0,0,[[66,66],19],[[67,67],19],[[66,20],21],[[67,20],21],[-1,-1,[]],[-1,-1,[]],[[],16],[[],16],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,26,[]],[-1,26,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[70,70],[[-1,-2],6,[],[]],[-1,[[8,[70,7]]],9],[-1,[[12,[[11,[10]]]]],[13,14,15]],[16,-1,[]],[16,-1,[]],[16,6],[[70,-1],[[8,[16,7]]],17],[[70,-1],[[12,[[11,[10]]]]],[18,14,15]],[[70,70],19],[[70,20],21],[[70,20],21],[25,70],[-1,-1,[]],[[[32,[2]]],[[8,[70,48]]]],[49,[[8,[70]]]],[[],16],[70,25],[-1,-2,[],[]],[70,[[32,[2]]]],[-1,-2,[],[]],[-1,50,[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,26,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[[35,[-1]],35],6,[]],[-1,[[72,[[71,[-1]]]]],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],[[72,[-1]]],[]],[[],[[64,[-1]]],[]],[49,[[64,[-1]]],[]],[73,-1,[]],[[],[[72,[-1]]],[]],[[],-1,[]],[49,[[11,[74]]]],[[],-1,[]],[-1,[[72,[-1]]],[]],[-1,61,[]],[-1,61,[]],[-1,61,[]],[-1,61,[]],[-1,61,[]],[-1,61,[]],[-1,19,[]],[-1,6,[]],[[],[[72,[-1]]],[]],[[-1,-2],-1,[],[[75,[[35,[1]]]]]],[[-1,-2],-1,[],[[75,[[35,[1]]]]]],[-1,-2,54,[]],[-1,-2,54,[]],[-1,[[72,[-1]]],[]],[-1,[[6,[61,-1]]],[]],[[-1,-1],[[6,[61,-1]]],[]],[-1,-1,[]],[-1,[],[]],[-1,[],[]],[[25,76],56],[[1,76],56],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[57,57],[[-1,-2],6,[],[]],0,[-1,[[8,[57,7]]],9],[-1,[[12,[[11,[10]]]]],[13,14,15]],[16,-1,[]],[16,-1,[]],[16,6],[[],57],[[57,-1],[[8,[16,7]]],17],[[57,-1],[[12,[[11,[10]]]]],[18,14,15]],[[57,57],19],[[57,20],21],[-1,-1,[]],[[],16],[-1,-2,[],[]],0,[[-1,-2,[35,[2]]],57,[],[53,54]],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,26,[]],[[-1,[35,[2]],57],19,[]],[-1,-2,[],[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[77,[-1,-2]],-1,-2],[[78,[-1]]],[79,80],[[81,[-1]]]],[[[77,[-1,-2]],-1,-1,-2],[[78,[19]]],[79,80],[[81,[-1]]]],[[[82,[-1]]],[[82,[-1]]],[83,79,80]],[[[77,[-1,-2]]],[[77,[-1,-2]]],[83,79,80],[83,[81,[-1]]]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[1,16],1],[[],[[82,[-1]]],[79,80]],[16,-1,[]],[16,-1,[]],[16,-1,[]],[16,-1,[]],[16,-1,[]],[16,-1,[]],[16,6],[16,6],[16,6],0,[[[82,[-1]],20],21,[84,79,80]],[[[77,[-1,-2]],20],21,[84,79,80],[84,[81,[-1]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[-2,[32,[2]]],[[78,[[32,[-1]]]]],[79,80,85],[[81,[-1]]]],[[[86,[-1,-2]],1],[[77,[-1,-2]]],[79,80,85],[[81,[-1]]]],[[[77,[-1,-2]],-1,-1,-2],[[78,[-1]]],[79,80],[[81,[-1]]]],[[-1,[32,[-2]]],[[78,[-2]]],[],[]],[[[82,[-1]],[32,[-1]]],[[78,[-1]]],[79,80]],[[],-1,[]],[[],[[82,[-1]]],[79,80]],[[],16],[[],16],[[],16],[[[86,[-1,-2]],[87,[36,-1]],-2],[[78,[6]]],[79,80,85],[[81,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,19],[1,19],[1,1],[1,36],0,0,[[[87,[36,-1]],-2,[32,[2]]],[[78,[[86,[-1,-2]]]]],[79,80,85],[[81,[-1]]]],[[],[[82,[-1]]],[79,80]],[[[35,[-1]],-2,[32,[2]]],[[78,[[86,[-1,-2]]]]],[79,80,85],[[81,[-1]]]],[1,[[64,[1]]]],0,[1,1],[[[86,[-1,-2]]],-1,[79,80,85],[[81,[-1]]]],[1,[[64,[1]]]],[-1,-2,[],[]],[-1,-2,[],[]],0,[1,36],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[88,88],[[-1,-2],6,[],[]],[-1,[[8,[88,7]]],9],[-1,[[12,[[11,[10]]]]],[13,14,15]],[16,-1,[]],[89,25],[90,88],[16,-1,[]],[16,-1,[]],[16,-1,[]],[16,-1,[]],[16,-1,[]],[46,88],[47,88],[16,6],[16,6],[16,6],[[88,-1],[[8,[16,7]]],17],[[88,-1],[[12,[[11,[10]]]]],[18,14,15]],[[88,88],19],[[88,20],21],[[88,20],21],[-1,-1,[]],[-1,-1,[]],[25,88],[-1,-1,[]],[[[32,[2]]],[[8,[88,48]]]],[49,[[8,[88]]]],[[],16],[[],16],[[],16],[88,25],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[88,[[32,[2]]]],[-1,-2,[],[]],[-1,50,[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[35,[2]],[35,[2]],[35,[2]]],76],[25,76],[[[32,[25]]],25],0,0,0,0,0,0,0,0,0,[[91,[35,[2]]],[[78,[19]]]],0,[[91,[35,[2]]],[[78,[6]]]],0,[[91,[35,[2]]],[[78,[[64,[[23,[2]]]]]]]],0,[[40,49],[[78,[91]]]],0,[[40,49],[[78,[91]]]],0,[[91,[35,[2]],[35,[2]]],[[78,[6]]]],0,[[[35,[2]]],[[78,[6]]]],0,0,[2,[[6,[40,[35,[2]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[48,48],[[-1,-2],6,[],[]],[16,-1,[]],[16,-1,[]],[16,6],[[48,20],21],[[48,20],21],[-1,-1,[]],[7,48],[92,48],[93,48],[[],16],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,50,[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,26,[]],[-1,-2,[],[]],[49,6],[[91,91,[35,[2]],[35,[2]],[35,[58]]],[[78,[6]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[94,94],[[-1,-2],6,[],[]],0,0,[-1,[[8,[94,7]]],9],[-1,[[12,[[11,[10]]]]],[13,14,15]],[16,-1,[]],[16,-1,[]],[16,6],[[94,-1],[[8,[16,7]]],17],[[94,-1],[[12,[[11,[10]]]]],[18,14,15]],[[94,94],19],[[94,20],21],[-1,-1,[]],[[],16],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,26,[]],[-1,-2,[],[]],[[],1],0,[[],1],0,[[],1],0,[[[35,[2]],36],93],0,[36,93],0,[1,[[78,[[64,[[23,[2]]]]]]]],0,[[],1],0,[[],1],0,[93,[[78,[[64,[[23,[2]]]]]]]],[[[35,[2]]],93],0,[[[35,[2]]],[[8,[6,48]]]],0],"c":[],"p":[[15,"u64"],[15,"u8"],[3,"PreviousSlot",20],[3,"PidOutput",20],[3,"Slot",20],[15,"tuple"],[3,"Error",1114],[4,"Result",1115],[8,"Read",1116],[8,"Future",1117],[3,"Box",1118],[3,"Pin",1119],[8,"AsyncRead",1120],[8,"Unpin",1121],[8,"Send",1121],[15,"usize"],[8,"Write",1116],[8,"AsyncWrite",1120],[15,"bool"],[3,"Formatter",1122],[6,"Result",1122],[3,"Hash",1123],[3,"Vec",1124],[15,"f64"],[6,"Base",1125],[3,"TypeId",1126],[4,"OrchardFixedBases",159],[4,"OrchardFixedBasesFull",159],[3,"NullifierK",159],[3,"ValueCommitV",159],[6,"Affine",1125],[15,"array"],[4,"OrchardHashDomains",290],[4,"OrchardCommitDomains",290],[15,"slice"],[15,"u32"],[8,"FnMut",1127],[8,"Copy",1121],[8,"Default",1128],[3,"ContractId",347],[3,"CONTRACT_ID_PREFIX",347],[3,"MONEY_CONTRACT_ID",347],[3,"DAO_CONTRACT_ID",347],[3,"CONSENSUS_CONTRACT_ID",347],[3,"DEPLOYOOOR_CONTRACT_ID",347],[3,"SecretKey",485],[3,"PublicKey",485],[4,"ContractError",999],[15,"str"],[3,"String",1129],[3,"Hash",1130],[3,"VrfProof",457],[8,"CryptoRng",1131],[8,"RngCore",1131],[3,"Keypair",485],[6,"Point",1125],[3,"Signature",804],[3,"MerkleNode",576],[4,"Ordering",1132],[3,"Level",1133],[3,"Choice",1134],[3,"UNCOMMITTED_ORCHARD",576],[3,"EMPTY_ROOTS",576],[4,"Option",1135],[3,"BigUint",1136],[3,"AeadEncryptedNote",655],[3,"ElGamalEncryptedNote",655],[8,"Decodable",1137],[8,"Encodable",1137],[3,"Nullifier",708],[3,"Coordinates",1138],[3,"CtOption",1134],[15,"u128"],[8,"Fn",1127],[8,"AsRef",1139],[6,"Scalar",1125],[3,"Path",833],[6,"GenericResult",999],[8,"WithSmallOrderMulGroup",1140],[8,"Ord",1132],[8,"FieldHasher",833],[3,"Poseidon",833],[8,"Clone",1141],[8,"Debug",1122],[8,"FromUniformBytes",1140],[3,"SparseMerkleTree",833],[3,"BTreeMap",1142],[3,"TokenId",910],[3,"TOKEN_ID_PREFIX",910],[3,"DARK_TOKEN_ID",910],[6,"DbHandle",974],[4,"Error",1143],[15,"i64"],[3,"ContractCall",1069],[6,"MerkleTree",576],[8,"CurveExt",737],[8,"Curve",737],[8,"CurveAffine",737],[8,"PrimeField",737],[8,"Field",737],[8,"Group",737],[8,"SchnorrSecret",804],[8,"SchnorrPublic",804],[6,"ContractResult",999]],"b":[[218,"impl-From%3CValueCommitV%3E-for-OrchardFixedBases"],[219,"impl-From%3COrchardFixedBasesFull%3E-for-OrchardFixedBases"],[220,"impl-From%3CNullifierK%3E-for-OrchardFixedBases"],[402,"impl-Display-for-ContractId"],[403,"impl-Debug-for-ContractId"],[526,"impl-Debug-for-SecretKey"],[527,"impl-Display-for-SecretKey"],[528,"impl-Debug-for-PublicKey"],[529,"impl-Display-for-PublicKey"],[613,"impl-Display-for-MerkleNode"],[614,"impl-Debug-for-MerkleNode"],[721,"impl-Display-for-Nullifier"],[722,"impl-Debug-for-Nullifier"],[941,"impl-Display-for-TokenId"],[942,"impl-Debug-for-TokenId"],[1051,"impl-Display-for-ContractError"],[1052,"impl-Debug-for-ContractError"],[1054,"impl-From%3CError%3E-for-ContractError"],[1055,"impl-From%3CError%3E-for-ContractError"],[1056,"impl-From%3Ci64%3E-for-ContractError"]]},\
"darkfi_serial":{"doc":"","t":"IIIIIIIYYDIAXLLKLKLOLLFFFFLKLKLOOOALLLOLLLKKKLKLKKKKKKKKKKKKKKFFLLOLALKKKKKKKKKKKKKKIIIIIIXKFFKOKKKLKLKKKKKKKKKKKKKKFOKKKKKKKKKKKKKKFOOOOOFFFFFFFFFFFFFFFFFFFFFFAAAAAA","n":["AsyncDecodable","AsyncEncodable","AsyncRead","AsyncWrite","Decodable","Encodable","ReadExt","SerialDecodable","SerialEncodable","VarInt","WriteExt","async_lib","async_trait","borrow","borrow_mut","decode","decode","decode_async","decode_async","decoder_fn","deref","deref_mut","deserialize","deserialize_async","deserialize_async_partial","deserialize_partial","drop","encode","encode","encode_async","encode_async","encode_payload","encode_payload_async","encoder_fn","endian","eq","fmt","from","impl_int_encodable","init","into","length","poll_close","poll_flush","poll_read","poll_read_vectored","poll_write","poll_write_vectored","read_bool","read_f32","read_f64","read_i128","read_i16","read_i32","read_i64","read_i8","read_slice","read_u128","read_u16","read_u32","read_u64","read_u8","serialize","serialize_async","try_from","try_into","tuple_encode","type_id","types","vzip","write_bool","write_f32","write_f64","write_i128","write_i16","write_i32","write_i64","write_i8","write_slice","write_u128","write_u16","write_u32","write_u64","write_u8","AsyncDecodable","AsyncEncodable","AsyncRead","AsyncReadExt","AsyncWrite","AsyncWriteExt","async_trait","decode_async","deserialize_async","deserialize_async_partial","encode_async","impl_int_encodable","poll_close","poll_flush","poll_read","poll_read_vectored","poll_write","poll_write_vectored","read_bool_async","read_f32_async","read_f64_async","read_i128_async","read_i16_async","read_i32_async","read_i64_async","read_i8_async","read_slice_async","read_u128_async","read_u16_async","read_u32_async","read_u64_async","read_u8_async","serialize_async","tuple_encode","write_bool_async","write_f32_async","write_f64_async","write_i128_async","write_i16_async","write_i32_async","write_i64_async","write_i8_async","write_slice_async","write_u128_async","write_u16_async","write_u32_async","write_u64_async","write_u8_async","bytes_to_u64_slice_le","define_be_to_array","define_chunk_slice_to_int","define_le_to_array","define_slice_to_be","define_slice_to_le","f32_to_array_le","f64_to_array_le","i128_to_array_le","i16_to_array_le","i32_to_array_le","i64_to_array_le","slice_to_f32_le","slice_to_f64_le","slice_to_i128_le","slice_to_i16_le","slice_to_i32_le","slice_to_i64_le","slice_to_u128_le","slice_to_u16_le","slice_to_u32_be","slice_to_u32_le","slice_to_u64_le","u128_to_array_le","u16_to_array_le","u32_to_array_be","u32_to_array_le","u64_to_array_le","bridgetree","collections","hash","pasta","semver","url"],"q":[[0,"darkfi_serial"],[84,"darkfi_serial::async_lib"],[132,"darkfi_serial::endian"],[160,"darkfi_serial::types"],[166,"std::io::error"],[167,"core::result"],[168,"std::io"],[169,"core::future::future"],[170,"alloc::boxed"],[171,"core::pin"],[172,"core::marker"],[173,"core::marker"],[174,"core::fmt"],[175,"core::task::poll"],[176,"std::io"],[177,"core::marker"]],"d":["Data which can asynchronously be decoded in a …","Data which can asynchronously be encoded in a …","Read bytes asynchronously.","Write bytes asynchronously.","Data which can be decoded in a consensus-consistent way.","Data which can be encoded in a consensus-consistent way.","Extensions of <code>Read</code> to decode data as per Bitcoin consensus.","","","Variable-integer encoding. Integer can be encoded …","Extensions of <code>Write</code> to encode data as per Bitcoin …","","","","","","","","","","","","Deserialize an object from a vector. Will error if said …","Asynchronously deserialize an object from a vector. Will …","Asynchronously deserialize an object from a vector, but do …","Deserialize an object from a vector, but do not error if …","","Encode an object with a well-defined format. Should only …","","Asynchronously encode an object with a well-defined format.","","Encode a dynamic set of arguments to a buffer.","Asynchronously encode a dynamic set of arguments to a …","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Gets the length of this <code>VarInt</code> when encoded. Returns:","Attempt to close the object.","Attempt to flush the object, ensuring that any buffered …","Attempt to read from the <code>AsyncRead</code> into <code>buf</code>.","Attempt to read from the <code>AsyncRead</code> into <code>bufs</code> using vectored","Attempt to write bytes from <code>buf</code> into the object.","Attempt to write bytes from <code>bufs</code> into the object using …","Read a boolean","Read a 32-bit floating point int","Read a 64-bit floating point int","Read a 128-bit signed int","Read a 16-bit signed int","Ouptut a 32-bit signed int","Read a 64-bit signed int","Read an 8-bit signed int","Read a byte slice","Read a 128-bit unsigned int","Read a 16-bit unsigned int","Read a 32-bit unsigned int","Read a 64-bit unsigned int","Read an 8-bit unsigned int","Encode an object into a vector.","Asynchronously encode an object into a vector.","","","","","Encodings for external crates","","Output a boolean","Output a 32-bit floating point int","Output a 64-bit floating point int","Output a 128-bit signed int","Output a 16-bit signed int","Ouptut a 32-bit signed int","Output a 64-bit signed int","Output an 8-bit signed int","Output a byte slice","Output a 128-bit unsigned int","Output a 16-bit unsigned int","Output a 32-bit unsigned int","Output a 64-bit unsigned int","Output an 8-bit unsigned int","Data which can asynchronously be decoded in a …","Data which can asynchronously be encoded in a …","Read bytes asynchronously.","Extensions of <code>AsyncRead</code> to decode data as per Bitcoin …","Write bytes asynchronously.","Extensions of <code>AsyncWrite</code> to encode data as per Bitcoin …","","","Asynchronously deserialize an object from a vector. Will …","Asynchronously deserialize an object from a vector, but do …","Asynchronously encode an object with a well-defined format.","","Attempt to close the object.","Attempt to flush the object, ensuring that any buffered …","Attempt to read from the <code>AsyncRead</code> into <code>buf</code>.","Attempt to read from the <code>AsyncRead</code> into <code>bufs</code> using vectored","Attempt to write bytes from <code>buf</code> into the object.","Attempt to write bytes from <code>bufs</code> into the object using …","Read a boolean","Read a 32-bit floating point int","Read a 64-bit floating point int","Read a 128-bit signed int","Read a 16-bit signed int","Ouptut a 32-bit signed int","Read a 64-bit signed int","Read an 8-bit signed int","Read a byte slice","Read a 128-bit unsigned int","Read a 16-bit unsigned int","Read a 32-bit unsigned int","Read a 64-bit unsigned int","Read an 8-bit unsigned int","Asynchronously encode an object into a vector.","","Output a boolean","Output a 32-bit floating point int","Output a 64-bit floating point int","Output a 128-bit signed int","Output a 16-bit signed int","Ouptut a 32-bit signed int","Output a 64-bit signed int","Output an 8-bit signed int","Output a byte slice","Output a 128-bit unsigned int","Output a 16-bit unsigned int","Output a 32-bit unsigned int","Output a 64-bit unsigned int","Output an 8-bit unsigned int","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Serialization of collections","","Implementations for pasta curves","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,14,4,16,4,0,4,4,0,0,0,0,4,39,4,41,4,0,0,0,0,4,4,4,0,4,4,4,19,19,8,8,19,19,44,44,44,44,44,44,44,44,44,44,44,44,44,44,0,0,4,4,0,4,0,4,45,45,45,45,45,45,45,45,45,45,45,45,45,45,0,0,0,0,0,0,0,16,0,0,41,0,19,19,8,8,19,19,46,46,46,46,46,46,46,46,46,46,46,46,46,46,0,0,47,47,47,47,47,47,47,47,47,47,47,47,47,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[2,[-2,1]]],3,[]],[-1,[[2,[4,1]]],3],[-1,[[7,[[6,[5]]]]],[8,9,10]],[-1,[[7,[[6,[5]]]]],[8,9,10]],0,[11,-1,[]],[11,-1,[]],[[[13,[12]]],[[2,[-1,1]]],14],[[[13,[12]]],[[15,[-1]]],16],[[[13,[12]]],[[15,[[17,[-1,11]]]]],16],[[[13,[12]]],[[2,[[17,[-1,11]],1]]],14],[11,17],[[-1,-2],[[2,[11,1]]],[],18],[[4,-1],[[2,[11,1]]],18],[[-1,-2],[[7,[[6,[5]]]]],[],[19,9,10]],[[4,-1],[[7,[[6,[5]]]]],[19,9,10]],0,0,0,0,[[4,4],20],[[4,21],22],[-1,-1,[]],0,[[],11],[-1,-2,[],[]],[4,11],[[[7,[-1]],23],[[24,[[2,[17,1]]]]],[]],[[[7,[-1]],23],[[24,[[2,[17,1]]]]],[]],[[[7,[-1]],23,[13,[12]]],[[24,[[2,[11,1]]]]],[]],[[[7,[-1]],23,[13,[25]]],[[24,[[2,[11,1]]]]],[]],[[[7,[-1]],23,[13,[12]]],[[24,[[2,[11,1]]]]],[]],[[[7,[-1]],23,[13,[26]]],[[24,[[2,[11,1]]]]],[]],[-1,[[2,[20,1]]],[]],[-1,[[2,[27,1]]],[]],[-1,[[2,[28,1]]],[]],[-1,[[2,[29,1]]],[]],[-1,[[2,[30,1]]],[]],[-1,[[2,[31,1]]],[]],[-1,[[2,[32,1]]],[]],[-1,[[2,[33,1]]],[]],[[-1,[13,[12]]],[[2,[17,1]]],[]],[-1,[[2,[34,1]]],[]],[-1,[[2,[35,1]]],[]],[-1,[[2,[36,1]]],[]],[-1,[[2,[37,1]]],[]],[-1,[[2,[12,1]]],[]],[-1,[[38,[12]]],[39,40]],[-1,[[38,[12]]],[41,40]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],0,[-1,42,[]],0,[-1,-2,[],[]],[[-1,20],[[2,[17,1]]],[]],[[-1,27],[[2,[17,1]]],[]],[[-1,28],[[2,[17,1]]],[]],[[-1,29],[[2,[17,1]]],[]],[[-1,30],[[2,[17,1]]],[]],[[-1,31],[[2,[17,1]]],[]],[[-1,32],[[2,[17,1]]],[]],[[-1,33],[[2,[17,1]]],[]],[[-1,[13,[12]]],[[2,[17,1]]],[]],[[-1,34],[[2,[17,1]]],[]],[[-1,35],[[2,[17,1]]],[]],[[-1,36],[[2,[17,1]]],[]],[[-1,37],[[2,[17,1]]],[]],[[-1,12],[[2,[17,1]]],[]],0,0,0,0,0,0,0,[-1,[[7,[[6,[5]]]]],[8,9,10]],[[[13,[12]]],[[15,[-1]]],16],[[[13,[12]]],[[15,[[17,[-1,11]]]]],16],[[-1,-2],[[7,[[6,[5]]]]],[],[19,9,10]],0,[[[7,[-1]],23],[[24,[[2,[17,1]]]]],[]],[[[7,[-1]],23],[[24,[[2,[17,1]]]]],[]],[[[7,[-1]],23,[13,[12]]],[[24,[[2,[11,1]]]]],[]],[[[7,[-1]],23,[13,[25]]],[[24,[[2,[11,1]]]]],[]],[[[7,[-1]],23,[13,[12]]],[[24,[[2,[11,1]]]]],[]],[[[7,[-1]],23,[13,[26]]],[[24,[[2,[11,1]]]]],[]],[-1,[[7,[[6,[5]]]]],[]],[-1,[[7,[[6,[5]]]]],[]],[-1,[[7,[[6,[5]]]]],[]],[-1,[[7,[[6,[5]]]]],[]],[-1,[[7,[[6,[5]]]]],[]],[-1,[[7,[[6,[5]]]]],[]],[-1,[[7,[[6,[5]]]]],[]],[-1,[[7,[[6,[5]]]]],[]],[[-1,[13,[12]]],[[7,[[6,[5]]]]],[]],[-1,[[7,[[6,[5]]]]],[]],[-1,[[7,[[6,[5]]]]],[]],[-1,[[7,[[6,[5]]]]],[]],[-1,[[7,[[6,[5]]]]],[]],[-1,[[7,[[6,[5]]]]],[]],[-1,[[38,[12]]],[41,40]],0,[[-1,20],[[7,[[6,[5]]]]],[]],[[-1,27],[[7,[[6,[5]]]]],[]],[[-1,28],[[7,[[6,[5]]]]],[]],[[-1,29],[[7,[[6,[5]]]]],[]],[[-1,30],[[7,[[6,[5]]]]],[]],[[-1,31],[[7,[[6,[5]]]]],[]],[[-1,32],[[7,[[6,[5]]]]],[]],[[-1,33],[[7,[[6,[5]]]]],[]],[[-1,[13,[12]]],[[7,[[6,[5]]]]],[]],[[-1,34],[[7,[[6,[5]]]]],[]],[[-1,35],[[7,[[6,[5]]]]],[]],[[-1,36],[[7,[[6,[5]]]]],[]],[[-1,37],[[7,[[6,[5]]]]],[]],[[-1,12],[[7,[[6,[5]]]]],[]],[[[13,[12]],[13,[37]]],17],0,0,0,0,0,[27,[[43,[12]]]],[28,[[43,[12]]]],[29,[[43,[12]]]],[30,[[43,[12]]]],[31,[[43,[12]]]],[32,[[43,[12]]]],[[[43,[12]]],27],[[[43,[12]]],28],[[[13,[12]]],29],[[[13,[12]]],30],[[[13,[12]]],31],[[[13,[12]]],32],[[[13,[12]]],34],[[[13,[12]]],35],[[[13,[12]]],36],[[[13,[12]]],36],[[[13,[12]]],37],[34,[[43,[12]]]],[35,[[43,[12]]]],[36,[[43,[12]]]],[36,[[43,[12]]]],[37,[[43,[12]]]],0,0,0,0,0,0],"c":[],"p":[[3,"Error",166],[4,"Result",167],[8,"Read",168],[3,"VarInt",0],[8,"Future",169],[3,"Box",170],[3,"Pin",171],[8,"AsyncRead",0],[8,"Unpin",172],[8,"Send",172],[15,"usize"],[15,"u8"],[15,"slice"],[8,"Decodable",0],[6,"Result",166],[8,"AsyncDecodable",84],[15,"tuple"],[8,"Write",168],[8,"AsyncWrite",0],[15,"bool"],[3,"Formatter",173],[6,"Result",173],[3,"Context",174],[4,"Poll",175],[3,"IoSliceMut",168],[3,"IoSlice",168],[15,"f32"],[15,"f64"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[15,"u128"],[15,"u16"],[15,"u32"],[15,"u64"],[3,"Vec",176],[8,"Encodable",0],[8,"Sized",172],[8,"AsyncEncodable",84],[3,"TypeId",177],[15,"array"],[8,"ReadExt",0],[8,"WriteExt",0],[8,"AsyncReadExt",84],[8,"AsyncWriteExt",84]],"b":[]},\
"darkfid":{"doc":"","t":"DRRDDLMLLLLLLLLLLLLLLLLLLMMMLMLLMLMMMMMMMMMMMLLLLLLLLLLLLLLAMLLLLLMLFLLLLLLLLLLLLLLLLLLMMFLLLLLLLLLFAMMAAAMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLMMLLLLLMMLLNNNENNNLLLLLLLLLLLLLLLLFFLLLLLLL","n":["Args","CONFIG_FILE","CONFIG_FILE_CONTENTS","Darkfid","SignalHandler","__clone_box","_wallet","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","blockchain_get_slot","blockchain_get_tx","blockchain_last_known_slot","blockchain_lookup_zkas","blockchain_subscribe_blocks","blockchain_subscribe_err_txs","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cashier_pub","chain","channel_log","clap","clock_sync","clone","clone_into","config","connections_mut","consensus","consensus_p2p","consensus_p2p_accept","consensus_p2p_external","consensus_p2p_peer","consensus_p2p_seed","consensus_p2p_transports","consensus_peer_rpc","consensus_seed_rpc","consensus_slots","database","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","error","faucet_pub","fmt","from","from","from","from_clap","handle","handle_request","handle_signals","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","layout_raw","layout_raw","layout_raw","localnet","log","main","merge","misc_clock","misc_consensus_dnet_switch","misc_sync_dnet_switch","new","new","pointer_metadata","pointer_metadata","pointer_metadata","realmain","rpc_blockchain","rpc_connections","rpc_listen","rpc_misc","rpc_tx","rpc_wallet","sighup_sub","single_node","sync_p2p","sync_p2p_accept","sync_p2p_external","sync_p2p_peer","sync_p2p_seed","sync_p2p_transports","sync_slots","synced","term_rx","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","tx_broadcast","tx_simulate","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","validator_state","verbose","vzip","vzip","vzip","wait_termination","wallet_exec_sql","wallet_pass","wallet_path","wallet_query_row_multi","wallet_query_row_single","ContractZkasDbNotFound","NotSynced","ParseError","RpcError","TxBroadcastFail","TxSimulationFail","UnknownSlot","as_any","as_any_mut","borrow","borrow_mut","deref","deref_mut","deserialize","drop","from","init","into","into_any","into_any_arc","into_any_rc","layout_raw","pointer_metadata","server_error","to_tuple","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip"],"q":[[0,"darkfid"],[149,"darkfid::error"],[181,"dyn_clone::sealed"],[182,"core::any"],[183,"tinyjson::json_value"],[184,"darkfi::rpc::jsonrpc"],[185,"clap::app"],[186,"core::future::future"],[187,"alloc::boxed"],[188,"core::pin"],[189,"rkyv::with"],[190,"core::result"],[191,"serde::de"],[192,"core::fmt"],[193,"core::fmt"],[194,"darkfi::rpc::jsonrpc"],[195,"async_channel"],[196,"darkfi::system::subscriber"],[197,"darkfi::error"],[198,"alloc::sync"],[199,"alloc::rc"],[200,"core::alloc::layout"],[201,"core::alloc::layout"],[202,"darkfi::net::p2p"],[203,"core::option"],[204,"darkfi::wallet::walletdb"],[205,"async_executor"],[206,"async_task::task"],[207,"core::any"]],"d":["","","","","Auxiliary structure used to keep track of signals","","","","","","","","","","","","","","","","","","","","","Whitelisted cashier public key (repeatable flag)","Chain to use (testnet, mainnet)","Enable channel log","","Verify system clock is correct","","","Configuration file to use","","Participate in consensus","","P2P accept addresses for the consensus protocol …","P2P external addresses for the consensus protocol …","Connect to peer for the consensus protocol (repeatable …","Connect to seed for the consensus protocol (repeatable …","Prefered transports of outbound connections for the …","Peers JSON-RPC listen URL for clock synchronization …","Seed nodes JSON-RPC listen URL for clock synchronization …","Connection slots for the consensus protocol","Path to blockchain database","","","","","","","","","","","","","","","","Whitelisted faucet public key (repeatable flag)","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Signals handle","","Auxiliary task to handle SIGHUP, SIGTERM, SIGINT and …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Enable localnet hosts","Set log file to ouput into","","","","","","","","","","","","","","JSON-RPC listen URL","","","","SIGHUP subscriber to retrieve new configuration,","Enable single-node mode for local testing","","P2P accept addresses for the syncing protocol (repeatable …","P2P external addresses for the syncing protocol …","Connect to peer for the syncing protocol (repeatable flag)","Connect to seed for the syncing protocol (repeatable flag)","Prefered transports of outbound connections for the …","Connection slots for the syncing protocol","","Termination signal channel receiver","","","","","","","","","","","","","","","","","","","","","","","Increase verbosity (-vvv supported)","","","","Handler waits for termination signal","","Password for the wallet database","Path to wallet database","","","","","","Custom RPC errors available for darkfid. Please sort them …","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,9,4,4,9,34,4,9,34,4,4,4,4,4,4,4,9,34,4,9,34,9,9,9,9,9,9,9,9,4,9,4,9,9,9,9,9,9,9,9,9,9,4,9,34,4,9,34,4,9,9,34,4,9,34,0,9,9,4,9,34,9,34,4,0,4,9,34,4,9,34,4,9,34,4,9,34,4,9,34,4,9,34,9,9,0,9,4,4,4,4,34,4,9,34,0,0,4,9,0,0,0,34,9,4,9,9,9,9,9,9,4,34,9,4,9,34,4,9,34,4,4,4,9,34,4,9,34,4,9,34,4,9,34,4,9,4,9,34,34,4,9,9,4,4,37,37,37,0,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,0,0,37,37,37,37,37,37,37],"f":[0,0,0,0,0,[[-1,1],2,[]],0,[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[[4,5,6],7],[[4,5,6],7],[[4,5,6],7],[[4,5,6],7],[[4,5,6],7],[[4,5,6],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[],8],0,[9,9],[[-1,-2],2,[],[]],0,[4,[[12,[[11,[10]]]]]],0,0,0,0,0,0,0,0,0,0,0,[[],9],[13,-1,[]],[13,-1,[]],[13,-1,[]],[13,-1,[]],[13,-1,[]],[13,-1,[]],[[-1,-2],[[15,[[14,[-3,-4]]]]],[],[],[],[]],[-1,[[15,[9]]],16],[[-1,-2],[[15,[[14,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[15,[[14,[-3,-4]]]]],[],[],[],[]],[13,2],[13,2],[13,2],0,0,[[9,17],18],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[19,9],0,[[4,20],[[12,[[11,[10]]]]]],[[21,[22,[2]],[23,[9]]],[[24,[2]]]],[[],13],[[],13],[[],13],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[11,[-1]]],[[11,[3]]],[]],[[[11,[-1]]],[[11,[3]]],[]],[[[11,[-1]]],[[11,[3]]],[]],[[[25,[-1]]],[[25,[3]]],[]],[[[25,[-1]]],[[25,[3]]],[]],[[[25,[-1]]],[[25,[3]]],[]],[[[26,[-1]]],[[26,[3]]],[]],[[[26,[-1]]],[[26,[3]]],[]],[[[26,[-1]]],[[26,[3]]],[]],[[],[[15,[27,28]]]],[[],[[15,[27,28]]]],[[],[[15,[27,28]]]],0,0,[[],[[24,[2]]]],[[9,9,19],9],[[4,5,6],7],[[4,5,6],7],[[4,5,6],7],[[29,[31,[30]],[31,[30]],32],4],[[[25,[33]]],[[24,[[2,[34,[35,[[24,[2]]]]]]]]]],[[]],[[]],[[]],[[9,[25,[33]]],[[24,[2]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[[4,5,6],7],[[4,5,6],7],[-1,36,[]],[-1,36,[]],[-1,36,[]],[[[11,[-1]]],[[11,[3]]],[]],[[[11,[-1]]],[[11,[3]]],[]],[[[11,[-1]]],[[11,[3]]],[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[34,[35,[[24,[2]]]]],[[24,[2]]]],[[4,5,6],7],0,0,[[4,5,6],7],[[4,5,6],7],0,0,0,0,0,0,0,[-1,3,[]],[-1,3,[]],[-1,-2,[],[]],[-1,-2,[],[]],[13,-1,[]],[13,-1,[]],[[-1,-2],[[15,[[14,[-3,-4]]]]],[],[],[],[]],[13,2],[-1,-1,[]],[[],13],[-1,-2,[],[]],[[[11,[-1]]],[[11,[3]]],[]],[[[25,[-1]]],[[25,[3]]],[]],[[[26,[-1]]],[[26,[3]]],[]],[[],[[15,[27,28]]]],[[]],[[37,5,[31,[38]]],7],[37,[[2,[39,40]]]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,36,[]],[[[11,[-1]]],[[11,[3]]],[]],[-1,3,[]],[-1,3,[]],[-1,-2,[],[]]],"c":[],"p":[[3,"Private",181],[15,"tuple"],[8,"Any",182],[3,"Darkfid",0],[15,"u16"],[4,"JsonValue",183],[4,"JsonResult",184],[3,"App",185],[3,"Args",0],[8,"Future",186],[3,"Box",187],[3,"Pin",188],[15,"usize"],[3,"With",189],[4,"Result",190],[8,"Deserializer",191],[3,"Formatter",192],[6,"Result",192],[3,"ArgMatches",193],[3,"JsonRequest",184],[6,"Signals",194],[3,"Sender",195],[6,"SubscriberPtr",196],[6,"Result",197],[3,"Arc",198],[3,"Rc",199],[3,"Layout",200],[3,"LayoutError",200],[6,"ValidatorStatePtr",201],[6,"P2pPtr",202],[4,"Option",203],[6,"WalletPtr",204],[3,"Executor",205],[3,"SignalHandler",0],[3,"Task",206],[3,"TypeId",182],[4,"RpcError",149],[15,"str"],[15,"i32"],[3,"String",207]],"b":[]},\
"darkfid2":{"doc":"","t":"DDRRDRRRDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMLMMMLLLLLLLLLLLLLLLLLLLLMAMLLLLLLLLMLFLLLLLLLLLLLLLLLLLLLLLLLLMMFMLLMLLLLLLMMAFMAAMMAMMMMLMMAMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAMMLLLLLNNNENNNLLLLLLLLLLLLLLLLFFLLLLLLLCCCCCCCAAAADDLLLLLMLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLMLLLMLLLLLLLLLLLLLMLLDDLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLMLLMLMLLLLLLLLLLLLLMLLRDDDLLLLLLLMMLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLMMLLLLLLLLLLLLLLLLLLLLMLLLDDLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLMLLLMLLLLLMLLLLLLLLMLLACACFFFFFFF","n":["Args","BlockchainNetwork","CONFIG_FILE","CONFIG_FILE_CONTENTS","Darkfid","GENESIS_BLOCK_LOCALNET","GENESIS_BLOCK_MAINNET","GENESIS_BLOCK_TESTNET","SignalHandler","__clone_box","__clone_box","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","blockchain_get_slot","blockchain_get_tx","blockchain_last_known_slot","blockchain_lookup_zkas","blockchain_subscribe_blocks","blockchain_subscribe_proposals","blockchain_subscribe_txs","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clap","clap","clock","clone","clone","clone_into","clone_into","config","connections_mut","consensus","consensus_dnet_switch","consensus_net","consensus_p2p","database","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","epoch_length","error","faucet_pub","fmt","fmt","from","from","from","from","from_clap","from_clap","handle","handle_request","handle_signals","init","init","init","init","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","layout_raw","layout_raw","layout_raw","layout_raw","localnet","log","main","mainnet","merge","merge","network","new","new","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pow_target","pow_threads","proto","realmain","recipient","rpc","rpc_blockchain","rpc_connections","rpc_listen","rpc_tx","sighup_sub","skip_sync","slot_time","subscribers","sync_dnet_switch","sync_net","sync_p2p","task","term_rx","testing_mode","testnet","threshold","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","tx_broadcast","tx_clean_pending","tx_pending","tx_simulate","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","utils","validator","verbose","vzip","vzip","vzip","vzip","wait_termination","ContractZkasDbNotFound","NotSynced","ParseError","RpcError","TxBroadcastFail","TxSimulationFail","UnknownSlot","as_any","as_any_mut","borrow","borrow_mut","deref","deref_mut","deserialize","drop","from","init","into","into_any","into_any_arc","into_any_rc","layout_raw","pointer_metadata","server_error","to_tuple","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","BlockInfoMessage","ProtocolBlock","ProtocolProposal","ProtocolSync","ProtocolTx","SyncRequest","SyncResponse","protocol_block","protocol_proposal","protocol_sync","protocol_tx","BlockInfoMessage","ProtocolBlock","__clone_box","as_any","as_any","as_any_mut","as_any_mut","block_sub","borrow","borrow","borrow_mut","borrow_mut","channel_address","clone","clone_into","decode","decode_async","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","encode","encode_async","fmt","from","from","from","handle_receive_block","init","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","jobsman","layout_raw","layout_raw","name","p2p","pointer_metadata","pointer_metadata","start","subscriber","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","validator","vzip","vzip","ProposalMessage","ProtocolProposal","__clone_box","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","channel_address","clone","clone_into","decode","decode_async","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","encode","encode_async","fmt","from","from","handle_receive_proposal","init","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","jobsman","layout_raw","layout_raw","name","p2p","pointer_metadata","pointer_metadata","proposal_sub","start","subscriber","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","validator","vzip","vzip","BATCH","ProtocolSync","SyncRequest","SyncResponse","__clone_box","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","block","blocks","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","channel","clone","clone_into","decode","decode","decode_async","decode_async","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","encode","encode","encode_async","encode_async","fmt","fmt","from","from","from","handle_receive_request","init","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","jobsman","layout_raw","layout_raw","layout_raw","name","pointer_metadata","pointer_metadata","pointer_metadata","request_sub","slot","start","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","validator","vzip","vzip","vzip","ProtocolTx","TransactionMessage","__clone_box","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","channel_address","clone","clone_into","decode","decode_async","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","encode","encode_async","fmt","from","from","handle_receive_tx","init","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","jobsman","layout_raw","layout_raw","name","p2p","pointer_metadata","pointer_metadata","start","subscriber","to_owned","try_from","try_from","try_into","try_into","tx_sub","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","validator","vzip","vzip","miner","miner_task","sync","sync_task","generate_next_block","generate_pow_transaction","miner_loop","miner_task","sync_task","spawn_consensus_p2p","spawn_sync_p2p"],"q":[[0,"darkfid2"],[179,"darkfid2::error"],[211,"darkfid2::proto"],[222,"darkfid2::proto::protocol_block"],[290,"darkfid2::proto::protocol_proposal"],[357,"darkfid2::proto::protocol_sync"],[455,"darkfid2::proto::protocol_tx"],[522,"darkfid2::task"],[526,"darkfid2::task::miner"],[530,"darkfid2::task::sync"],[531,"darkfid2::utils"],[533,"dyn_clone::sealed"],[534,"core::any"],[535,"tinyjson::json_value"],[536,"darkfi::rpc::jsonrpc"],[537,"clap::app"],[538,"core::future::future"],[539,"alloc::boxed"],[540,"core::pin"],[541,"rkyv::with"],[542,"core::result"],[543,"serde::de"],[544,"core::fmt"],[545,"core::fmt"],[546,"darkfi::rpc::jsonrpc"],[547,"async_channel"],[548,"darkfi::system::subscriber"],[549,"darkfi::error"],[550,"alloc::sync"],[551,"alloc::rc"],[552,"core::alloc::layout"],[553,"core::alloc::layout"],[554,"core::option"],[555,"darkfi::validator"],[556,"darkfi::rpc::jsonrpc"],[557,"async_executor"],[558,"async_task::task"],[559,"core::any"],[560,"std::io::error"],[561,"std::io"],[562,"futures_io::if_std"],[563,"core::marker"],[564,"core::marker"],[565,"darkfi::net::channel"],[566,"darkfi::net::protocol::protocol_base"],[567,"darkfi_sdk::crypto::keypair"],[568,"darkfi_sdk::crypto::keypair"],[569,"darkfi::zk::proof"],[570,"darkfi::validator::pow"],[571,"darkfi::validator::consensus"],[572,"darkfi::tx"],[573,"async_channel"]],"d":["","Defines a blockchain network configuration. Default values …","","","Daemon structure","Note: If you change these don’t forget to remove their …","","","Auxiliary structure used to keep track of signals","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Configuration file to use","","Participate in the consensus protocol","","Consensus network settings","Optional consensus P2P network pointer","Path to blockchain database","","","","","","","","","","","","","","","","","","","","","Epoch duration, denominated by number of blocks/slots","","Whitelisted faucet public key (repeatable flag)","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Signals handle","","Auxiliary task to handle SIGHUP, SIGTERM, SIGINT and …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Localnet blockchain network configuration","Set log file to ouput into","","Mainnet blockchain network configuration","","","Blockchain network to use","","","","","","","PoW block production target, in seconds","PoW miner number of threads to use","P2P net protocols","","Wallet address to receive consensus rewards","JSON-RPC requests handler and methods","","JSON-RPC connection tracker","JSON-RPC listen URL","","SIGHUP subscriber to retrieve new configuration,","Skip syncing process and start node right away","PoS slot duration, in seconds","A map of various subscribers exporting live info from the …","","Syncing network settings","Syncing P2P network pointer","Validator async tasks","Termination signal channel receiver","Enable testing mode for local testing","Testnet blockchain network configuration","Finalization threshold, denominated by number of blocks","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Utility functions","Validator(node) pointer","Increase verbosity (-vvv supported)","","","","","Handler waits for termination signal","","","","Custom RPC errors available for darkfid. Please sort them …","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Block broadcast protocol","Block proposal broadcast protocol","Validator blockchain sync protocol","Transaction broadcast protocol","Auxiliary <code>BlockInfo</code> wrapper structure used for messaging.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Auxiliary <code>Proposal</code> wrapper structure used for messaging.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Auxiliary structure used for blockchain syncing.","Auxiliary structure used for blockchain syncing.","","","","","","","","Block headerhash of that slot","Response blocks","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Slot UID","","","","","","","","","","","","","","","","","","","","","","","","","","Auxiliary <code>Transaction</code> wrapper structure used for messaging.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Auxiliary function to generate next block in an atomic …","Auxiliary function to generate a Money::PoWReward …","Miner loop","async task used for participating in the PoW consensus …","async task used for block syncing","Auxiliary function to generate the consensus P2P network …","Auxiliary function to generate the sync P2P network and …"],"i":[0,0,0,0,0,0,0,0,0,9,10,4,9,10,37,4,9,10,37,4,4,4,4,4,4,4,4,9,10,37,4,9,10,37,9,10,4,9,10,9,10,9,4,10,4,10,4,10,9,10,4,9,10,37,4,9,10,37,4,9,9,10,10,37,4,9,10,37,10,0,10,9,10,4,9,10,37,9,10,37,4,0,4,9,10,37,4,9,10,37,4,9,10,37,4,9,10,37,4,9,10,37,4,9,10,37,9,9,0,9,9,10,9,4,37,4,9,10,37,10,10,0,0,10,0,0,4,9,0,37,10,10,4,4,10,4,0,37,10,9,10,9,10,4,9,10,37,4,9,10,37,4,4,4,4,4,9,10,37,4,9,10,37,4,9,10,37,4,9,10,37,0,4,9,4,9,10,37,37,40,40,40,0,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,0,0,40,40,40,40,40,40,40,0,0,0,0,0,0,0,0,0,0,0,0,0,43,52,43,52,43,52,52,43,52,43,52,43,43,43,43,52,43,52,43,52,43,52,43,43,43,43,52,43,43,52,52,52,43,52,43,52,43,52,43,52,43,52,52,43,52,52,52,43,52,52,43,52,43,52,43,52,43,52,43,52,43,52,43,52,52,43,0,0,55,56,55,56,55,56,55,56,55,56,55,55,55,55,56,55,56,55,56,55,56,55,55,55,55,56,55,56,56,56,55,56,55,56,55,56,55,56,55,56,56,55,56,56,56,55,56,56,56,55,56,55,56,55,56,55,56,55,56,55,56,55,56,56,55,0,0,0,0,57,59,58,57,59,58,57,58,57,59,58,57,59,58,57,59,57,57,58,57,58,57,59,58,57,59,58,57,59,58,57,59,58,57,58,57,58,57,58,57,59,58,57,59,59,59,58,57,59,58,57,59,58,57,59,58,57,59,58,57,59,59,58,57,59,59,58,57,59,58,59,57,59,58,57,59,58,57,59,58,57,59,58,57,59,58,57,59,58,57,59,59,58,57,0,0,60,61,60,61,60,61,60,61,60,61,60,60,60,60,61,60,61,60,61,60,61,60,60,60,60,61,60,61,61,61,60,61,60,61,60,61,60,61,60,61,61,60,61,61,61,60,61,61,60,61,60,61,60,61,61,60,61,60,61,60,61,60,61,61,60,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,[[-1,1],2,[]],[[-1,1],2,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[[4,5,6],7],[[4,5,6],7],[[4,5,6],7],[[4,5,6],7],[[4,5,6],7],[[4,5,6],7],[[4,5,6],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],8],[[],8],[[4,5,6],7],[9,9],[10,10],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[4,[[13,[[12,[11]]]]]],0,[[4,5,6],7],0,0,0,[[],9],[[],10],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[-1,[[16,[9]]],17],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[-1,[[16,[10]]],17],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[14,2],[14,2],[14,2],0,0,0,[[9,18],19],[[10,18],19],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[20,9],[20,10],0,[[4,21],[[13,[[12,[11]]]]]],[[22,[23,[2]],[24,[9]]],[[25,[2]]]],[[],14],[[],14],[[],14],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[12,[-1]]],[[12,[3]]],[]],[[[12,[-1]]],[[12,[3]]],[]],[[[12,[-1]]],[[12,[3]]],[]],[[[12,[-1]]],[[12,[3]]],[]],[[[26,[-1]]],[[26,[3]]],[]],[[[26,[-1]]],[[26,[3]]],[]],[[[26,[-1]]],[[26,[3]]],[]],[[[26,[-1]]],[[26,[3]]],[]],[[[27,[-1]]],[[27,[3]]],[]],[[[27,[-1]]],[[27,[3]]],[]],[[[27,[-1]]],[[27,[3]]],[]],[[[27,[-1]]],[[27,[3]]],[]],[[],[[16,[28,29]]]],[[],[[16,[28,29]]]],[[],[[16,[28,29]]]],[[],[[16,[28,29]]]],0,0,[[],[[25,[2]]]],0,[[9,9,20],9],[[10,10,20],10],0,[[30,[31,[30]],32,[35,[33,34]]],4],[[[26,[36]]],[[25,[[2,[37,[38,[[25,[2]]]]]]]]]],[[]],[[]],[[]],[[]],0,0,0,[[9,[26,[36]]],[[25,[2]]]],0,0,0,0,0,0,0,0,0,0,[[4,5,6],7],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[[4,5,6],7],[[4,5,6],7],[[4,5,6],7],[[4,5,6],7],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[[[12,[-1]]],[[12,[3]]],[]],[[[12,[-1]]],[[12,[3]]],[]],[[[12,[-1]]],[[12,[3]]],[]],[[[12,[-1]]],[[12,[3]]],[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[37,[38,[[25,[2]]]]],[[25,[2]]]],0,0,0,0,0,0,0,[-1,3,[]],[-1,3,[]],[-1,-2,[],[]],[-1,-2,[],[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[-1,-1,[]],[[],14],[-1,-2,[],[]],[[[12,[-1]]],[[12,[3]]],[]],[[[26,[-1]]],[[26,[3]]],[]],[[[27,[-1]]],[[27,[3]]],[]],[[],[[16,[28,29]]]],[[]],[[40,5,[31,[33]]],7],[40,[[2,[41,42]]]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,39,[]],[[[12,[-1]]],[[12,[3]]],[]],[-1,3,[]],[-1,3,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,1],2,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[43,43],[[-1,-2],2,[],[]],[-1,[[16,[43,44]]],45],[-1,[[13,[[12,[11]]]]],[46,47,48]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[14,2],[[43,-1],[[16,[14,44]]],49],[[43,-1],[[13,[[12,[11]]]]],[50,47,48]],[[43,18],19],[-1,-1,[]],[-1,-1,[]],[51,43],[[[26,[52]]],[[25,[2]]]],[[],14],[[53,32,30,34],[[25,[54]]]],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[[[12,[-1]]],[[12,[3]]],[]],[[[12,[-1]]],[[12,[3]]],[]],[[[26,[-1]]],[[26,[3]]],[]],[[[26,[-1]]],[[26,[3]]],[]],[[[27,[-1]]],[[27,[3]]],[]],[[[27,[-1]]],[[27,[3]]],[]],0,[[],[[16,[28,29]]]],[[],[[16,[28,29]]]],[52,33],0,[[]],[[]],[[[26,[52]],[26,[36]]],[[13,[[12,[11]]]]]],0,[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,39,[]],[-1,39,[]],[[[12,[-1]]],[[12,[3]]],[]],[[[12,[-1]]],[[12,[3]]],[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[-1,1],2,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[55,55],[[-1,-2],2,[],[]],[-1,[[16,[55,44]]],45],[-1,[[13,[[12,[11]]]]],[46,47,48]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[14,2],[[55,-1],[[16,[14,44]]],49],[[55,-1],[[13,[[12,[11]]]]],[50,47,48]],[[55,18],19],[-1,-1,[]],[-1,-1,[]],[[[26,[56]]],[[25,[2]]]],[[53,32,30,34],[[25,[54]]]],[[],14],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[[[12,[-1]]],[[12,[3]]],[]],[[[12,[-1]]],[[12,[3]]],[]],[[[26,[-1]]],[[26,[3]]],[]],[[[26,[-1]]],[[26,[3]]],[]],[[[27,[-1]]],[[27,[3]]],[]],[[[27,[-1]]],[[27,[3]]],[]],0,[[],[[16,[28,29]]]],[[],[[16,[28,29]]]],[56,33],0,[[]],[[]],0,[[[26,[56]],[26,[36]]],[[13,[[12,[11]]]]]],0,[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,39,[]],[-1,39,[]],[[[12,[-1]]],[[12,[3]]],[]],[[[12,[-1]]],[[12,[3]]],[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[[-1,1],2,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[57,57],[[-1,-2],2,[],[]],[-1,[[16,[58,44]]],45],[-1,[[16,[57,44]]],45],[-1,[[13,[[12,[11]]]]],[46,47,48]],[-1,[[13,[[12,[11]]]]],[46,47,48]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[14,2],[14,2],[[58,-1],[[16,[14,44]]],49],[[57,-1],[[16,[14,44]]],49],[[58,-1],[[13,[[12,[11]]]]],[50,47,48]],[[57,-1],[[13,[[12,[11]]]]],[50,47,48]],[[58,18],19],[[57,18],19],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[26,[59]]],[[25,[2]]]],[[53,32],[[25,[54]]]],[[],14],[[],14],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[12,[-1]]],[[12,[3]]],[]],[[[12,[-1]]],[[12,[3]]],[]],[[[12,[-1]]],[[12,[3]]],[]],[[[26,[-1]]],[[26,[3]]],[]],[[[26,[-1]]],[[26,[3]]],[]],[[[26,[-1]]],[[26,[3]]],[]],[[[27,[-1]]],[[27,[3]]],[]],[[[27,[-1]]],[[27,[3]]],[]],[[[27,[-1]]],[[27,[3]]],[]],0,[[],[[16,[28,29]]]],[[],[[16,[28,29]]]],[[],[[16,[28,29]]]],[59,33],[[]],[[]],[[]],0,0,[[[26,[59]],[26,[36]]],[[13,[[12,[11]]]]]],[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[[[12,[-1]]],[[12,[3]]],[]],[[[12,[-1]]],[[12,[3]]],[]],[[[12,[-1]]],[[12,[3]]],[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[-1,1],2,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[60,60],[[-1,-2],2,[],[]],[-1,[[16,[60,44]]],45],[-1,[[13,[[12,[11]]]]],[46,47,48]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[14,2],[[60,-1],[[16,[14,44]]],49],[[60,-1],[[13,[[12,[11]]]]],[50,47,48]],[[60,18],19],[-1,-1,[]],[-1,-1,[]],[[[26,[61]]],[[25,[2]]]],[[53,32,30,34],[[25,[54]]]],[[],14],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[[[12,[-1]]],[[12,[3]]],[]],[[[12,[-1]]],[[12,[3]]],[]],[[[26,[-1]]],[[26,[3]]],[]],[[[26,[-1]]],[[26,[3]]],[]],[[[27,[-1]]],[[27,[3]]],[]],[[[27,[-1]]],[[27,[3]]],[]],0,[[],[[16,[28,29]]]],[[],[[16,[28,29]]]],[61,33],0,[[]],[[]],[[[26,[61]],[26,[36]]],[[13,[[12,[11]]]]]],0,[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],0,[-1,39,[]],[-1,39,[]],[[[12,[-1]]],[[12,[3]]],[]],[[[12,[-1]]],[[12,[3]]],[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[[4,62,63,64,65],[[25,[[2,[51,66]]]]]],[[67,62,63,64,65],[[25,[68]]]],[[4,63,[69,[2]]],[[25,[2]]]],[[4,63,[69,[2]]],[[25,[2]]]],[4,[[25,[2]]]],[[70,32,[35,[33,34]],[26,[36]]],30],[[70,32,[35,[33,34]],[26,[36]]],30]],"c":[],"p":[[3,"Private",533],[15,"tuple"],[8,"Any",534],[3,"Darkfid",0],[15,"u16"],[4,"JsonValue",535],[4,"JsonResult",536],[3,"App",537],[3,"Args",0],[3,"BlockchainNetwork",0],[8,"Future",538],[3,"Box",539],[3,"Pin",540],[15,"usize"],[3,"With",541],[4,"Result",542],[8,"Deserializer",543],[3,"Formatter",544],[6,"Result",544],[3,"ArgMatches",545],[3,"JsonRequest",536],[6,"Signals",546],[3,"Sender",547],[6,"SubscriberPtr",548],[6,"Result",549],[3,"Arc",550],[3,"Rc",551],[3,"Layout",552],[3,"LayoutError",552],[6,"P2pPtr",553],[4,"Option",554],[6,"ValidatorPtr",555],[15,"str"],[3,"JsonSubscriber",536],[3,"HashMap",556],[3,"Executor",557],[3,"SignalHandler",0],[3,"Task",558],[3,"TypeId",534],[4,"RpcError",179],[15,"i32"],[3,"String",559],[3,"BlockInfoMessage",222],[3,"Error",560],[8,"Read",561],[8,"AsyncRead",562],[8,"Unpin",563],[8,"Send",563],[8,"Write",561],[8,"AsyncWrite",562],[3,"BlockInfo",564],[3,"ProtocolBlock",222],[6,"ChannelPtr",565],[6,"ProtocolBasePtr",566],[3,"ProposalMessage",290],[3,"ProtocolProposal",290],[3,"SyncResponse",357],[3,"SyncRequest",357],[3,"ProtocolSync",357],[3,"TransactionMessage",455],[3,"ProtocolTx",455],[3,"SecretKey",567],[3,"PublicKey",567],[3,"ZkBinary",568],[3,"ProvingKey",569],[3,"PoWModule",570],[3,"Fork",571],[3,"Transaction",572],[3,"Receiver",547],[3,"Settings",573]],"b":[]},\
"darkirc":{"doc":"","t":"DRRDDLLLLLLLLLLLLLLLLMLAMLLLLLLLLLLLMLLLLLMLLLLLMMMMLFLLLLLLLLLLLLLLLAMMMLLLMFLMLLLMLLLFAMMAMMMMLLLLLLLLLLLLLLLLLLLMLLLLAFFDDDRLLLLLLLLLLLLLLLMALLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLAMMALLLMLLLLLLLLLLLLLLLLLLLLLNDNRNENMLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLMLLLLLMMLLLMMMLMMLLLLLLLLLLLLMLLLRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRDRMLLMLLMMMMMLLLLLLLLLLLLMLLLLLLLLLLLLLLLFFFF","n":["Args","CONFIG_FILE","CONFIG_FILE_CONTENTS","DarkIrc","SignalHandler","__clone_box","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clap","clone","clone_into","config","connections_mut","crypto","datastore","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","dnet_sub","dnet_subscribe_events","dnet_switch","drop","drop","drop","event_graph","fmt","from","from","from","from_clap","gen_chacha_keypair","gen_channel_secret","get_chacha_pubkey","handle","handle_request","handle_signals","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","irc","irc_listen","irc_tls_cert","irc_tls_secret","layout_raw","layout_raw","layout_raw","log","main","merge","net","new","new","p2p","p2p","pointer_metadata","pointer_metadata","pointer_metadata","realmain","rpc","rpc_connections","rpc_listen","settings","sighup_sub","skip_dag_sync","sled","term_rx","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","verbose","vzip","vzip","vzip","wait_termination","saltbox","encrypt","try_decrypt","IrcChannel","IrcContact","Privmsg","SERVER_NAME","__clone_box","__clone_box","__clone_box","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","channel","client","clone","clone","clone","clone_into","clone_into","clone_into","command","decode","decode_async","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","encode","encode_async","fmt","from","from","from","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","layout_raw","layout_raw","layout_raw","msg","nick","nicks","pointer_metadata","pointer_metadata","pointer_metadata","rpl","saltbox","saltbox","server","to_owned","to_owned","to_owned","topic","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","Cap","Client","Client","PENALTY_LIMIT","Pong","ReplyType","Server","addr","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","caps","channels","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","from","from","get_history","handle_cmd_admin","handle_cmd_cap","handle_cmd_info","handle_cmd_join","handle_cmd_list","handle_cmd_mode","handle_cmd_motd","handle_cmd_names","handle_cmd_nick","handle_cmd_part","handle_cmd_ping","handle_cmd_privmsg","handle_cmd_rehash","handle_cmd_topic","handle_cmd_user","handle_cmd_version","incoming","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","is_seen","last_sent","layout_raw","layout_raw","mark_seen","multiplex_connection","new","nickname","penalty","pointer_metadata","pointer_metadata","process_client_line","realname","reg_paused","registered","reply","seen","server","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","username","vzip","vzip","welcome","ALREADY_REGISTERED","ERR_ALREADYREGISTERED","ERR_ERRONEOUSNICKNAME","ERR_NEEDMOREPARAMS","ERR_NOORIGIN","ERR_NORECIPIENT","ERR_NOSUCHCHANNEL","ERR_NOSUCHNICK","ERR_NOTEXTTOSEND","ERR_NOTREGISTERED","ERR_USERSDONTMATCH","INVALID_SYNTAX","NOT_REGISTERED","RPL_ADMINEMAIL","RPL_ADMINLOC1","RPL_ADMINLOC2","RPL_ADMINME","RPL_CHANNELMODEIS","RPL_ENDOFINFO","RPL_ENDOFMOTD","RPL_ENDOFNAMES","RPL_INFO","RPL_LIST","RPL_LISTEND","RPL_LISTSTART","RPL_MOTD","RPL_MOTDSTART","RPL_NAMREPLY","RPL_NOTOPIC","RPL_TOPIC","RPL_UMODEIS","RPL_VERSION","RPL_WELCOME","RPL_YOURHOST","WELCOME","IrcServer","MAX_NICK_LEN","acceptor","as_any","as_any_mut","autojoin","borrow","borrow_mut","channels","clients","config_path","contacts","darkirc","deref","deref_mut","deserialize","drop","from","init","into","into_any","into_any_arc","into_any_rc","layout_raw","listen","listener","new","pad","pointer_metadata","process_connection","rehash","try_decrypt","try_encrypt","try_from","try_into","type_id","unpad","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","parse_autojoin_channels","parse_configured_channels","parse_configured_contacts","parse_dm_chacha_secret"],"q":[[0,"darkirc"],[120,"darkirc::crypto"],[121,"darkirc::crypto::saltbox"],[123,"darkirc::irc"],[224,"darkirc::irc::client"],[314,"darkirc::irc::rpl"],[349,"darkirc::irc::server"],[390,"darkirc::settings"],[394,"dyn_clone::sealed"],[395,"core::any"],[396,"clap::app"],[397,"core::future::future"],[398,"alloc::boxed"],[399,"core::pin"],[400,"rkyv::with"],[401,"core::result"],[402,"serde::de"],[403,"tinyjson::json_value"],[404,"darkfi::rpc::jsonrpc"],[405,"core::fmt"],[406,"core::fmt"],[407,"darkfi::rpc::jsonrpc"],[408,"async_channel"],[409,"darkfi::system::subscriber"],[410,"darkfi::error"],[411,"alloc::sync"],[412,"alloc::rc"],[413,"core::alloc::layout"],[414,"core::alloc::layout"],[415,"sled::db"],[416,"darkfi::event_graph"],[417,"darkfi::rpc::jsonrpc"],[418,"async_task::task"],[419,"core::any"],[420,"alloc::string"],[421,"alloc::vec"],[422,"core::option"],[423,"std::io::error"],[424,"std::io"],[425,"futures_io::if_std"],[426,"core::marker"],[427,"core::marker"],[428,"blake3"],[429,"darkfi::event_graph::event"],[430,"darkfi::system::subscriber"],[431,"url"],[432,"std::path"],[433,"toml::value"],[434,"std::collections::hash::map"],[435,"crypto_box::secret_key"]],"d":["","","","","Auxiliary structure used to keep track of signals","","","","","","","","","","","","","","","","","Configuration file to use","","Cryptography utilities Cryptographic implementations","Datastore (DB) path","","","","","","","","","","","","dnet JSON-RPC subscriber","","","","","","Event Graph instance","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Generate a new NaCl keypair and exit","Generate a new encrypted channel NaCl secret and exit","Recover NaCl public key from a secret key","Signals handle","","Auxiliary task to handle SIGHUP, SIGTERM, SIGINT and …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","IRC server and client handler implementation","IRC server listen address","Optional TLS certificate file path if <code>irc_listen</code> uses TLS","Optional TLS certificate key file path if <code>irc_listen</code> uses …","","","","Set log file output","","","P2P network settings","","","","P2P network pointer","","","","","JSON-RPC methods","JSON-RPC connection tracker","RPC server listen address","Settings utilities","SIGHUP subscriber to retrieve new configuration,","","Sled DB (also used in event_graph)","Termination signal channel receiver","","","","","","","","","","","","","","","","","","","","Increase verbosity (-vvv supported)","","","","Handler waits for termination signal","ChaCha box, used for channel encryption, and optionally DM …","Encrypt given data using the given <code>ChaChaBox</code>. Returns …","Attempt to decrypt given ciphertext using the given …","IRC channel definition","IRC contact definition","IRC PRIVMSG","Hardcoded server name","","","","","","","","","","","","","","","","","IRC client state","","","","","","","IRC command handler IRC command implemenatations","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","IRC numerics and server replies","","","IRC server implementation","","","","","","","","","","","","","","","","","","","","","","","","","","CAP reply","Stateful IRC client handler, used for each client …","Client reply, message from someone to some{one,where}","","Pong reply, we just use server origin","Reply types, we can either send server replies, or client …","Server reply, we have to use numerics","Client socket addr","","","","","","","","","Client caps","Active (joined) channels for this client","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Internal function that scans the DAG and returns events for","<code>ADMIN [&lt;server&gt;]</code>","<code>CAP &lt;args&gt;</code>","<code>INFO [&lt;target&gt;]</code>","<code>JOIN &lt;channels&gt; [&lt;keys&gt;]</code>","<code>LIST [&lt;channels&gt; [&lt;server&gt;]]</code>","<code>MODE &lt;nickname&gt; &lt;flags&gt;</code> <code>MODE &lt;channel&gt; &lt;flags&gt;</code>","<code>MOTD [&lt;server&gt;]</code>","<code>NAMES [&lt;channel&gt;]</code>","<code>NICK &lt;nickname&gt;</code>","<code>PART &lt;channel&gt;</code>","<code>PING &lt;server1&gt;</code>","<code>PRIVMSG &lt;msgtarget&gt; &lt;message&gt;</code>","<code>REHASH</code>","<code>TOPIC &lt;channel&gt; [&lt;topic&gt;]</code>","<code>USER &lt;user&gt; &lt;mode&gt; &lt;unused&gt; &lt;realname&gt;</code>","<code>VERSION</code>","Subscription for incoming events","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Check if a message was already marked seen for this client.","ID of the last sent event","","","Atomically mark a message as seen for this client.","This function handles a single IRC client. We listen to …","Instantiate a new Client.","Client nickname","Penalty counter, when limit is reached, disconnect client","","","Handle the incoming line given sent by the IRC client","Client realname","Registration pause marker","Registration marker","Send a reply to the IRC client. Matches on the reply type.","Set of seen messages for the user TODO: It grows …","Pointer to parent <code>IrcServer</code>","","","","","","","","","","","","","Client username","","","Internal function that constructs the welcome message.","The message sent to the client when they are already …","<code>&lt;client&gt; :You may not reregister</code>","  :Erroneus nickname","<code>&lt;client&gt; &lt;command&gt; :Not enough parameters</code>","<code>&lt;client&gt; :No origin specified</code>","<code>&lt;client&gt; :No recipient given (&lt;command&gt;)</code>","<code>&lt;client&gt; &lt;channel&gt; :No such channel</code>","<code>&lt;client&gt; &lt;nickname&gt; :No such nick/channel</code>","<code>&lt;client&gt; :No text to send</code>","<code>&lt;client&gt; :You have not registered</code>","<code>&lt;client&gt; :Cant change mode for other users</code>","The message sent to the client when command params could …","The message sent to the client when they are not registered","<code>&lt;client&gt; :&lt;info&gt;</code>","<code>&lt;client&gt; :&lt;info&gt;</code>","<code>&lt;client&gt; :&lt;info&gt;</code>","<code>&lt;client&gt; [&lt;server&gt;] :Administrative info</code>","<code>&lt;client&gt; &lt;channel&gt; &lt;modestring&gt; &lt;mode arguments&gt;...</code>","<code>&lt;client&gt; :End of INFO list</code>","<code>&lt;client&gt; :End of /MOTD command.</code>","<code>&lt;client&gt; &lt;channel&gt; :End of /NAMES list</code>","<code>&lt;client&gt; :&lt;string&gt;</code>","<code>&lt;client&gt; &lt;channel&gt; &lt;client count&gt; :&lt;topic&gt;</code>"," :End of /LIST","<code>&lt;client&gt; Channel :Users  Name</code>","<code>&lt;client&gt; :&lt;line of the motd&gt;</code>","<code>&lt;client&gt; :- &lt;server&gt; Message of the day -</code>","…","<code>&lt;client&gt; &lt;channel&gt; :No topic is set</code>","<code>&lt;client&gt; &lt;channel&gt; :&lt;topic&gt;</code>","<code>&lt;client&gt; &lt;user modes&gt;</code>","<code>&lt;client&gt; &lt;version&gt; &lt;server&gt; :&lt;comments&gt;</code>","<code>&lt;client&gt; :Welcome to the DarkIRC network</code>","…","The welcome message sent upon successful registration","IRC server instance","Max channel/nick length","TLS acceptor","","","Configured autojoin channels","","","Configured IRC channels","Active client connections","Path to the darkirc config file","Configured IRC contacts","DarkIrc instance","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","Start accepting new IRC connections.","TCP listener","Instantiate a new IRC server. This function will try to …","","","IRC client connection process. Sets up multiplexing …","Reload the darkirc configuration file and reconfigure …","Try decrypting a given potentially encrypted <code>Privmsg</code> …","Try encrypting a given <code>Privmsg</code> if there is such a …","","","","","","","","","Parse configured autojoin channels from a TOML map.","Parse a TOML string for any configured channels and return …","Parse configured contacts from a TOML map.","Parse a DM secret key from a TOML map."],"i":[0,0,0,0,0,5,6,5,34,6,5,34,6,5,34,6,5,34,5,5,5,5,6,0,5,5,6,5,34,6,5,34,6,5,5,34,6,6,6,6,5,34,6,5,6,5,34,5,5,5,5,34,6,0,6,5,34,6,5,34,6,5,34,6,5,34,6,5,34,0,5,5,5,6,5,34,5,0,5,5,6,34,6,6,6,5,34,0,0,6,5,0,34,5,6,34,5,6,5,34,6,5,34,6,5,34,6,5,34,6,5,34,6,5,34,5,6,5,34,34,0,0,0,0,0,0,0,43,44,45,43,44,45,43,44,45,43,44,45,43,44,45,43,0,43,44,45,43,44,45,0,43,43,43,44,45,43,44,45,43,44,45,43,44,45,43,43,43,43,44,45,43,44,45,43,44,45,43,44,45,43,44,45,43,44,45,43,44,45,43,43,44,43,44,45,0,44,45,0,43,44,45,44,43,44,45,43,44,45,43,44,45,43,44,45,43,44,45,43,44,45,43,44,45,55,0,55,0,55,0,55,53,55,53,55,53,55,53,55,53,53,53,55,53,55,53,55,53,55,53,55,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,55,53,55,53,55,53,55,53,55,53,53,53,55,53,53,53,53,53,53,55,53,53,53,53,53,53,53,53,55,53,55,53,55,53,55,53,55,53,55,53,53,55,53,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,0,0,0,0],"f":[0,0,0,0,0,[[-1,1],2,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],4],[5,5],[[-1,-2],2,[],[]],0,[6,[[9,[[8,[7]]]]]],0,0,[[],5],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[[-1,-2],[[12,[[11,[-3,-4]]]]],[],[],[],[]],[-1,[[12,[5]]],13],[[-1,-2],[[12,[[11,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[12,[[11,[-3,-4]]]]],[],[],[],[]],0,[[6,14,15],16],[[6,14,15],16],[10,2],[10,2],[10,2],0,[[5,17],18],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[19,5],0,0,0,0,[[6,20],[[9,[[8,[7]]]]]],[[21,[22,[2]],[23,[5]]],[[24,[2]]]],[[],10],[[],10],[[],10],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[8,[-1]]],[[8,[3]]],[]],[[[8,[-1]]],[[8,[3]]],[]],[[[8,[-1]]],[[8,[3]]],[]],[[[25,[-1]]],[[25,[3]]],[]],[[[25,[-1]]],[[25,[3]]],[]],[[[25,[-1]]],[[25,[3]]],[]],[[[26,[-1]]],[[26,[3]]],[]],[[[26,[-1]]],[[26,[3]]],[]],[[[26,[-1]]],[[26,[3]]],[]],0,0,0,0,[[],[[12,[27,28]]]],[[],[[12,[27,28]]]],[[],[[12,[27,28]]]],0,[[],[[24,[2]]]],[[5,5,19],5],0,[[29,30,31,32],6],[[[25,[33]]],[[24,[[2,[34,[35,[[24,[2]]]]]]]]]],[6,29],0,[[]],[[]],[[]],[[5,[25,[33]]],[[24,[2]]]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[[[8,[-1]]],[[8,[3]]],[]],[[[8,[-1]]],[[8,[3]]],[]],[[[8,[-1]]],[[8,[3]]],[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[34,[35,[[24,[2]]]]],[[24,[2]]]],0,[[37,[39,[38]]],40],[[37,[39,[38]]],[[42,[[41,[38]]]]]],0,0,0,0,[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[43,43],[44,44],[45,45],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[-1,[[12,[43,46]]],47],[-1,[[9,[[8,[7]]]]],[48,49,50]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[[-1,-2],[[12,[[11,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[12,[[11,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[12,[[11,[-3,-4]]]]],[],[],[],[]],[10,2],[10,2],[10,2],[[43,-1],[[12,[10,46]]],51],[[43,-1],[[9,[[8,[7]]]]],[52,49,50]],[[43,17],18],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],10],[[],10],[[],10],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[8,[-1]]],[[8,[3]]],[]],[[[8,[-1]]],[[8,[3]]],[]],[[[8,[-1]]],[[8,[3]]],[]],[[[25,[-1]]],[[25,[3]]],[]],[[[25,[-1]]],[[25,[3]]],[]],[[[25,[-1]]],[[25,[3]]],[]],[[[26,[-1]]],[[26,[3]]],[]],[[[26,[-1]]],[[26,[3]]],[]],[[[26,[-1]]],[[26,[3]]],[]],[[],[[12,[27,28]]]],[[],[[12,[27,28]]]],[[],[[12,[27,28]]]],0,0,0,[[]],[[]],[[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[[[8,[-1]]],[[8,[3]]],[]],[[[8,[-1]]],[[8,[3]]],[]],[[[8,[-1]]],[[8,[3]]],[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[[-1,-2],[[12,[[11,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[12,[[11,[-3,-4]]]]],[],[],[],[]],[10,2],[10,2],[-1,-1,[]],[-1,-1,[]],[[53,[54,[40]]],[[24,[[41,[55]]]]]],[[53,56],[[24,[[41,[55]]]]]],[[53,56],[[24,[[41,[55]]]]]],[[53,56],[[24,[[41,[55]]]]]],[[53,56],[[24,[[41,[55]]]]]],[[53,56],[[24,[[41,[55]]]]]],[[53,56],[[24,[[41,[55]]]]]],[[53,56],[[24,[[41,[55]]]]]],[[53,56],[[24,[[41,[55]]]]]],[[53,56],[[24,[[41,[55]]]]]],[[53,56],[[24,[[41,[55]]]]]],[[53,56],[[24,[[41,[55]]]]]],[[53,56],[[24,[[41,[55]]]]]],[[53,56],[[24,[[41,[55]]]]]],[[53,56],[[24,[[41,[55]]]]]],[[53,56],[[24,[[41,[55]]]]]],[[53,56],[[24,[[41,[55]]]]]],0,[[],10],[[],10],[-1,-2,[],[]],[-1,-2,[],[]],[[[8,[-1]]],[[8,[3]]],[]],[[[8,[-1]]],[[8,[3]]],[]],[[[25,[-1]]],[[25,[3]]],[]],[[[25,[-1]]],[[25,[3]]],[]],[[[26,[-1]]],[[26,[3]]],[]],[[[26,[-1]]],[[26,[3]]],[]],[[53,57],[[24,[58]]]],0,[[],[[12,[27,28]]]],[[],[[12,[27,28]]]],[[53,57],[[24,[2]]]],[[53,-1],[[24,[2]]],[48,52,49,50]],[[[25,[59]],[61,[60]],62],[[24,[53]]]],0,0,[[]],[[]],[[53,56,-1],[[24,[[42,[60]]]]],[52,49]],0,0,0,[[53,-1,55],[[24,[2]]],[52,49]],0,0,[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,36,[]],[-1,36,[]],[[[8,[-1]]],[[8,[3]]],[]],[[[8,[-1]]],[[8,[3]]],[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[53,[[41,[55]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,3,[]],[-1,3,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,[10,-1,[]],[10,-1,[]],[[-1,-2],[[12,[[11,[-3,-4]]]]],[],[],[],[]],[10,2],[-1,-1,[]],[[],10],[-1,-2,[],[]],[[[8,[-1]]],[[8,[3]]],[]],[[[25,[-1]]],[[25,[3]]],[]],[[[26,[-1]]],[[26,[3]]],[]],[[],[[12,[27,28]]]],[[[25,[59]],[25,[33]]],[[24,[2]]]],0,[[[25,[6]],63,[42,[40]],[42,[40]],64],[[24,[[25,[59]]]]]],[56,[[41,[38]]]],[[]],[[[25,[59]],-1,62,[61,[60]],[25,[33]]],[[24,[2]]],[48,52,50,49]],[59,[[24,[2]]]],[[59,43],2],[[59,43],2],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,36,[]],[[[41,[38]]],2],[[[8,[-1]]],[[8,[3]]],[]],[-1,3,[]],[-1,3,[]],[-1,-2,[],[]],[65,[[24,[[41,[40]]]]]],[65,[[24,[[66,[40,44]]]]]],[65,[[24,[[66,[40,45]]]]]],[65,[[24,[[42,[67]]]]]]],"c":[],"p":[[3,"Private",394],[15,"tuple"],[8,"Any",395],[3,"App",396],[3,"Args",0],[3,"DarkIrc",0],[8,"Future",397],[3,"Box",398],[3,"Pin",399],[15,"usize"],[3,"With",400],[4,"Result",401],[8,"Deserializer",402],[15,"u16"],[4,"JsonValue",403],[4,"JsonResult",404],[3,"Formatter",405],[6,"Result",405],[3,"ArgMatches",406],[3,"JsonRequest",404],[6,"Signals",407],[3,"Sender",408],[6,"SubscriberPtr",409],[6,"Result",410],[3,"Arc",411],[3,"Rc",412],[3,"Layout",413],[3,"LayoutError",413],[6,"P2pPtr",414],[3,"Db",415],[6,"EventGraphPtr",416],[3,"JsonSubscriber",404],[3,"Executor",417],[3,"SignalHandler",0],[3,"Task",418],[3,"TypeId",395],[6,"ChaChaBox",419],[15,"u8"],[15,"slice"],[3,"String",420],[3,"Vec",421],[4,"Option",422],[3,"Privmsg",123],[3,"IrcChannel",123],[3,"IrcContact",123],[3,"Error",423],[8,"Read",424],[8,"AsyncRead",425],[8,"Unpin",426],[8,"Send",426],[8,"Write",424],[8,"AsyncWrite",425],[3,"Client",224],[3,"HashSet",427],[4,"ReplyType",224],[15,"str"],[3,"Hash",428],[15,"bool"],[3,"IrcServer",349],[3,"Event",429],[3,"Subscription",409],[4,"SocketAddr",430],[3,"Url",431],[3,"PathBuf",432],[4,"Value",433],[3,"HashMap",434],[3,"SecretKey",435]],"b":[]},\
"faucetd":{"doc":"","t":"GDRRGDGDLMLMMMMMMMMLLLLLLLLLLLLMMLMLLLMLMLLLLLLLLLLLLLLAMLLLLLMLFLLLLLLLLLLLLLLLLLMLLLMMFLMLLMMMLLLMFMMMFMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLMMLLLLMMNNNNNENNLLLLLLLLLLLLLLLLFFLLLLLLL","n":["AirdropMap","Args","CONFIG_FILE","CONFIG_FILE_CONTENTS","ChallengeMap","Faucetd","ProvingKeyMap","SignalHandler","__clone_box","_wallet","airdrop","airdrop_limit","airdrop_limit","airdrop_map","airdrop_timeout","airdrop_timeout","alloc","alloc","alloc","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cashier_pub","chain","challenge","challenge_map","clap","clone","clone_into","config","connections_mut","database","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","error","faucet_pub","fmt","from","from","from","from_clap","handle","handle_request","handle_signals","init","init","init","initialize_keypair","initialize_wallet","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","keypair","layout_raw","layout_raw","layout_raw","localnet","log","main","merge","merkle_tree","new","new","phantom","phantom","phantom","pointer_metadata","pointer_metadata","pointer_metadata","proving_keys","prune_airdrop_maps","ptr","ptr","ptr","realmain","rpc_connections","rpc_listen","sighup_sub","sync_p2p","sync_p2p_accept","sync_p2p_external","sync_p2p_peer","sync_p2p_seed","sync_p2p_transports","sync_slots","synced","term_rx","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","validator_state","verbose","vzip","vzip","vzip","wait_termination","wallet_pass","wallet_path","AmountExceedsLimit","InternalError","NoVdfChallenge","ParseError","RateLimitReached","RpcError","TimeLimitReached","VdfVerifyFailed","as_any","as_any_mut","borrow","borrow_mut","deref","deref_mut","deserialize","drop","from","init","into","into_any","into_any_arc","into_any_rc","layout_raw","pointer_metadata","server_error","to_tuple","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip"],"q":[[0,"faucetd"],[144,"faucetd::error"],[177,"dyn_clone::sealed"],[178,"tinyjson::json_value"],[179,"darkfi::rpc::jsonrpc"],[180,"core::any"],[181,"clap::app"],[182,"core::future::future"],[183,"alloc::boxed"],[184,"core::pin"],[185,"rkyv::with"],[186,"core::result"],[187,"serde::de"],[188,"core::fmt"],[189,"core::fmt"],[190,"darkfi::rpc::jsonrpc"],[191,"async_channel"],[192,"darkfi::system::subscriber"],[193,"darkfi::error"],[194,"darkfi::wallet::walletdb"],[195,"darkfi_sdk::crypto::keypair"],[196,"darkfi_sdk::crypto::merkle_node"],[197,"alloc::sync"],[198,"alloc::rc"],[199,"core::alloc::layout"],[200,"core::alloc::layout"],[201,"darkfi::net::p2p"],[202,"async_executor"],[203,"async_task::task"],[204,"std::collections::hash::map"],[205,"async_lock::mutex"],[206,"num_bigint::biguint"],[207,"core::any"]],"d":["","","","","","","","Auxiliary structure used to keep track of signals","","","","","Airdrop amount limit","","","Airdrop timeout limit in seconds","","","","","","","","","","","","","","","","Whitelisted cashier address (repeatable flag)","Chain to use (testnet, mainnet)","","","","","","Configuration file to use","","Path to blockchain database","","","","","","","","","","","","","","","","Whitelisted faucet address (repeatable flag)","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Signals handle","","Auxiliary task to handle SIGHUP, SIGTERM, SIGINT and …","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Enable localnet hosts","Set log file to ouput into","","","","","","","","","","","","","","","","","","","JSON-RPC listen URL","SIGHUP subscriber to retrieve new configuration,","","P2P accept addresses for the syncing protocol","P2P external addresses for the syncing protocol","Connect to peer for the syncing protocol (repeatable flag)","Connect to seed for the syncing protocol (repeatable flag)","Prefered transports of outbound connections for the …","Connection slots for the syncing protocol","","Termination signal channel receiver","","","","","","","","","","","","","","","","","","","","","Increase verbosity (-vvv supported)","","","","Handler waits for termination signal","Password for the wallet database","Path to wallet database","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,9,3,3,3,9,3,3,9,48,49,50,3,9,37,3,9,37,3,9,37,3,9,37,9,9,3,3,9,9,9,9,3,9,9,3,9,37,3,9,37,3,9,9,37,3,9,37,0,9,9,3,9,37,9,37,3,0,3,9,37,3,3,3,9,37,3,9,37,3,9,37,3,9,37,3,3,9,37,9,9,0,9,3,3,37,48,49,50,3,9,37,3,0,48,49,50,0,3,9,37,3,9,9,9,9,9,9,3,37,9,3,9,37,3,9,37,3,9,37,3,9,37,3,9,37,3,9,37,3,9,3,9,37,37,9,9,45,45,45,45,45,0,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,0,0,45,45,45,45,45,45,45],"f":[0,0,0,0,0,0,0,0,[[-1,1],2,[]],0,[[3,4,5],6],0,0,0,0,0,0,0,0,[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[3,4,5],6],0,[[],8],[9,9],[[-1,-2],2,[],[]],0,[3,[[12,[[11,[10]]]]]],0,[[],9],[13,-1,[]],[13,-1,[]],[13,-1,[]],[13,-1,[]],[13,-1,[]],[13,-1,[]],[[-1,-2],[[15,[[14,[-3,-4]]]]],[],[],[],[]],[-1,[[15,[9]]],16],[[-1,-2],[[15,[[14,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[15,[[14,[-3,-4]]]]],[],[],[],[]],[13,2],[13,2],[13,2],0,0,[[9,17],18],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[19,9],0,[[3,20],[[12,[[11,[10]]]]]],[[21,[22,[2]],[23,[9]]],[[24,[2]]]],[[],13],[[],13],[[],13],[25,[[24,[26]]]],[25,[[24,[27]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[11,[-1]]],[[11,[7]]],[]],[[[11,[-1]]],[[11,[7]]],[]],[[[11,[-1]]],[[11,[7]]],[]],[[[28,[-1]]],[[28,[7]]],[]],[[[28,[-1]]],[[28,[7]]],[]],[[[28,[-1]]],[[28,[7]]],[]],[[[29,[-1]]],[[29,[7]]],[]],[[[29,[-1]]],[[29,[7]]],[]],[[[29,[-1]]],[[29,[7]]],[]],0,[[],[[15,[30,31]]]],[[],[[15,[30,31]]]],[[],[[15,[30,31]]]],0,0,[[],[[24,[2]]]],[[9,9,19],9],0,[[32,33,25,34,35],[[24,[3]]]],[[[28,[36]]],[[24,[[2,[37,[38,[[24,[2]]]]]]]]]],0,0,0,[[]],[[]],[[]],0,[[[28,[[42,[[41,[[40,[39]],34]]]]]],[28,[[42,[[41,[[40,[39]],[2,[43,35]]]]]]]],34],[[24,[2]]]],0,0,0,[[9,[28,[36]]],[[24,[2]]]],0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,44,[]],[-1,44,[]],[-1,44,[]],[[[11,[-1]]],[[11,[7]]],[]],[[[11,[-1]]],[[11,[7]]],[]],[[[11,[-1]]],[[11,[7]]],[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[37,[38,[[24,[2]]]]],[[24,[2]]]],0,0,0,0,0,0,0,0,0,0,[-1,7,[]],[-1,7,[]],[-1,-2,[],[]],[-1,-2,[],[]],[13,-1,[]],[13,-1,[]],[[-1,-2],[[15,[[14,[-3,-4]]]]],[],[],[],[]],[13,2],[-1,-1,[]],[[],13],[-1,-2,[],[]],[[[11,[-1]]],[[11,[7]]],[]],[[[28,[-1]]],[[28,[7]]],[]],[[[29,[-1]]],[[29,[7]]],[]],[[],[[15,[30,31]]]],[[]],[[45,4],6],[45,[[2,[46,47]]]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,44,[]],[[[11,[-1]]],[[11,[7]]],[]],[-1,7,[]],[-1,7,[]],[-1,-2,[],[]]],"c":[],"p":[[3,"Private",177],[15,"tuple"],[3,"Faucetd",0],[15,"u16"],[4,"JsonValue",178],[4,"JsonResult",179],[8,"Any",180],[3,"App",181],[3,"Args",0],[8,"Future",182],[3,"Box",183],[3,"Pin",184],[15,"usize"],[3,"With",185],[4,"Result",186],[8,"Deserializer",187],[3,"Formatter",188],[6,"Result",188],[3,"ArgMatches",189],[3,"JsonRequest",179],[6,"Signals",190],[3,"Sender",191],[6,"SubscriberPtr",192],[6,"Result",193],[6,"WalletPtr",194],[3,"Keypair",195],[6,"MerkleTree",196],[3,"Arc",197],[3,"Rc",198],[3,"Layout",199],[3,"LayoutError",199],[6,"ValidatorStatePtr",200],[6,"P2pPtr",201],[15,"i64"],[15,"u64"],[3,"Executor",202],[3,"SignalHandler",0],[3,"Task",203],[15,"u8"],[15,"array"],[3,"HashMap",204],[3,"Mutex",205],[3,"BigUint",206],[3,"TypeId",180],[4,"RpcError",144],[15,"i32"],[3,"String",207],[6,"ProvingKeyMap",0],[6,"AirdropMap",0],[6,"ChallengeMap",0]],"b":[]},\
"fud":{"doc":"","t":"DRRDDLLLLLLLMLLLLLLMMMLLLMLLLLLLLLLLLLLLLLFFMMLLLLLMLMLFLLLLLLLLLLLLLLLLLLMFLMMLMLLLALFMMMMLLLLLLLLLLLLLLLLLLLMLLLLDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Args","CONFIG_FILE","CONFIG_FILE_CONTENTS","Fud","SignalHandler","__clone_box","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","base_dir","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","chunk_fetch_rx","chunk_fetch_tx","chunks_router","clap","clone","clone_into","config","connections_mut","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","dnet_switch","drop","drop","drop","fetch_chunk_task","fetch_file_task","file_fetch_rx","file_fetch_tx","fmt","from","from","from","from_clap","geode","get","handle","handle_request","handle_signals","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","layout_raw","layout_raw","layout_raw","log","main","merge","metadata_router","net","new","p2p","pointer_metadata","pointer_metadata","pointer_metadata","proto","put","realmain","rpc_connections","rpc_listen","sighup_sub","term_rx","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","verbose","vzip","vzip","vzip","wait_termination","FudChunkNotFound","FudChunkPut","FudChunkReply","FudChunkRequest","FudChunkRoute","FudFileNotFound","FudFilePut","FudFileReply","FudFileRequest","FudFileRoute","ProtocolFud","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","channel","chunk","chunk_hash","chunk_hash","chunk_hash","chunk_hashes","chunk_hashes","chunk_hashes","chunk_put_sub","chunk_request_sub","chunk_route_sub","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode_async","decode_async","decode_async","decode_async","decode_async","decode_async","decode_async","decode_async","decode_async","decode_async","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode_async","encode_async","encode_async","encode_async","encode_async","encode_async","encode_async","encode_async","encode_async","encode_async","file_hash","file_hash","file_hash","file_put_sub","file_request_sub","file_route_sub","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","fud","handle_fud_chunk_put","handle_fud_chunk_request","handle_fud_chunk_route","handle_fud_file_put","handle_fud_file_request","handle_fud_file_route","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","jobsman","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","name","p2p","peer","peer","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","start","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip"],"q":[[0,"fud"],[115,"fud::proto"],[500,"dyn_clone::sealed"],[501,"core::any"],[502,"clap::app"],[503,"core::future::future"],[504,"alloc::boxed"],[505,"core::pin"],[506,"rkyv::with"],[507,"core::result"],[508,"serde::de"],[509,"tinyjson::json_value"],[510,"darkfi::rpc::jsonrpc"],[511,"alloc::sync"],[512,"async_executor"],[513,"darkfi::error"],[514,"core::fmt"],[515,"core::fmt"],[516,"darkfi::rpc::jsonrpc"],[517,"async_channel"],[518,"darkfi::system::subscriber"],[519,"alloc::rc"],[520,"core::alloc::layout"],[521,"core::alloc::layout"],[522,"core::any"],[523,"std::io"],[524,"futures_io::if_std"],[525,"core::marker"],[526,"core::marker"],[527,"darkfi::net::p2p"],[528,"darkfi::net::protocol::protocol_base"]],"d":["","","","","Auxiliary structure used to keep track of signals","","","","","","","","Base directory for filesystem storage","","","","","","","","","Routing table for file chunks","","","","Configuration file to use","","","","","","","","","","","","","","","","","Background task that receives chunk fetch requests and …","Background task that receives file fetch requests and …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","The Geode instance","","Signals handle","","Auxiliary task to handle SIGHUP, SIGTERM, SIGINT and …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Set log file path to output daemon logs into","","","Routing table for file metadata","Network settings","","Pointer to the P2P network instance","","","","P2P protocols","","","","JSON-RPC listen URL","SIGHUP subscriber to retrieve new configuration,","Termination signal channel receiver","","","","","","","","","","","","","","","","","","","","Increase verbosity (-vvv supported)","","","","Handler waits for termination signal","Message representing a chunk reply when a chunk is not …","Message representing a new chunk on the network","Message representing a chunk reply from the network","Message representing a chunk request from the network","Message representing a new route for a chunk on the network","Message representing a chunk reply when a file is not found","Message representing a new file on the network","Message representing a file reply from the network","Message representing a file request from the network","Message representing a new route for a file on the network","P2P protocol implementation for fudeturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,5,6,5,30,6,5,30,5,6,5,30,6,5,30,6,6,6,5,5,5,5,6,5,6,5,30,6,5,30,6,5,5,30,6,6,5,30,0,0,6,6,5,6,5,30,5,6,6,30,6,0,6,5,30,6,5,30,6,5,30,6,5,30,6,5,30,6,5,30,5,0,5,6,5,30,6,6,5,30,0,6,0,6,5,30,30,5,6,5,30,6,5,30,6,5,30,6,5,30,6,5,30,6,5,30,5,6,5,30,30,0,0,0,0,0,0,0,0,0,0,0,33,34,35,36,37,38,39,40,41,42,50,33,34,35,36,37,38,39,40,41,42,50,33,34,35,36,37,38,39,40,41,42,50,33,34,35,36,37,38,39,40,41,42,50,33,34,35,36,37,38,39,40,41,42,50,40,34,36,39,33,35,38,50,50,50,33,34,35,36,37,38,39,40,41,42,33,34,35,36,37,38,39,40,41,42,33,34,35,36,37,38,39,40,41,42,33,34,35,36,37,38,39,40,41,42,50,33,34,35,36,37,38,39,40,41,42,50,33,34,35,36,37,38,39,40,41,42,50,33,34,35,36,37,38,39,40,41,42,50,33,34,35,36,37,38,39,40,41,42,33,34,35,36,37,38,39,40,41,42,33,34,35,36,37,38,39,40,41,42,33,35,37,50,50,50,33,34,35,36,37,38,39,40,41,42,50,33,34,35,36,37,38,39,40,41,42,50,50,50,50,50,50,50,50,50,33,34,35,36,37,38,39,40,41,42,50,33,34,35,36,37,38,39,40,41,42,50,33,34,35,36,37,38,39,40,41,42,50,33,34,35,36,37,38,39,40,41,42,50,33,34,35,36,37,38,39,40,41,42,50,50,33,34,35,36,37,38,39,40,41,42,50,50,35,36,50,33,34,35,36,37,38,39,40,41,42,50,33,34,35,36,37,38,39,40,41,42,50,33,34,35,36,37,38,39,40,41,42,50,33,34,35,36,37,38,39,40,41,42,50,33,34,35,36,37,38,39,40,41,42,50,33,34,35,36,37,38,39,40,41,42,50,33,34,35,36,37,38,39,40,41,42,50,33,34,35,36,37,38,39,40,41,42,50,33,34,35,36,37,38,39,40,41,42],"f":[0,0,0,0,0,[[-1,1],2,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[],4],[5,5],[[-1,-2],2,[],[]],0,[6,[[9,[[8,[7]]]]]],[[],5],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[[-1,-2],[[12,[[11,[-3,-4]]]]],[],[],[],[]],[-1,[[12,[5]]],13],[[-1,-2],[[12,[[11,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[12,[[11,[-3,-4]]]]],[],[],[],[]],[[6,14,15],16],[10,2],[10,2],[10,2],[[[17,[6]],[17,[18]]],[[19,[2]]]],[[[17,[6]],[17,[18]]],[[19,[2]]]],0,0,[[5,20],21],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[22,5],0,[[6,14,15],16],0,[[6,23],[[9,[[8,[7]]]]]],[[24,[25,[2]],[26,[5]]],[[19,[2]]]],[[],10],[[],10],[[],10],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[8,[-1]]],[[8,[3]]],[]],[[[8,[-1]]],[[8,[3]]],[]],[[[8,[-1]]],[[8,[3]]],[]],[[[17,[-1]]],[[17,[3]]],[]],[[[17,[-1]]],[[17,[3]]],[]],[[[17,[-1]]],[[17,[3]]],[]],[[[27,[-1]]],[[27,[3]]],[]],[[[27,[-1]]],[[27,[3]]],[]],[[[27,[-1]]],[[27,[3]]],[]],[[],[[12,[28,29]]]],[[],[[12,[28,29]]]],[[],[[12,[28,29]]]],0,[[],[[19,[2]]]],[[5,5,22],5],0,0,[[[17,[18]]],[[19,[[2,[30,[31,[[19,[2]]]]]]]]]],0,[[]],[[]],[[]],0,[[6,14,15],16],[[5,[17,[18]]],[[19,[2]]]],0,0,0,0,[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[[[8,[-1]]],[[8,[3]]],[]],[[[8,[-1]]],[[8,[3]]],[]],[[[8,[-1]]],[[8,[3]]],[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[30,[31,[[19,[2]]]]],[[19,[2]]]],0,0,0,0,0,0,0,0,0,0,0,[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,[33,33],[34,34],[35,35],[36,36],[37,37],[38,38],[39,39],[40,40],[41,41],[42,42],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[-1,[[12,[33,43]]],44],[-1,[[12,[34,43]]],44],[-1,[[12,[35,43]]],44],[-1,[[12,[36,43]]],44],[-1,[[12,[37,43]]],44],[-1,[[12,[38,43]]],44],[-1,[[12,[39,43]]],44],[-1,[[12,[40,43]]],44],[-1,[[12,[41,43]]],44],[-1,[[12,[42,43]]],44],[-1,[[9,[[8,[7]]]]],[45,46,47]],[-1,[[9,[[8,[7]]]]],[45,46,47]],[-1,[[9,[[8,[7]]]]],[45,46,47]],[-1,[[9,[[8,[7]]]]],[45,46,47]],[-1,[[9,[[8,[7]]]]],[45,46,47]],[-1,[[9,[[8,[7]]]]],[45,46,47]],[-1,[[9,[[8,[7]]]]],[45,46,47]],[-1,[[9,[[8,[7]]]]],[45,46,47]],[-1,[[9,[[8,[7]]]]],[45,46,47]],[-1,[[9,[[8,[7]]]]],[45,46,47]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[[-1,-2],[[12,[[11,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[12,[[11,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[12,[[11,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[12,[[11,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[12,[[11,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[12,[[11,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[12,[[11,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[12,[[11,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[12,[[11,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[12,[[11,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[12,[[11,[-3,-4]]]]],[],[],[],[]],[10,2],[10,2],[10,2],[10,2],[10,2],[10,2],[10,2],[10,2],[10,2],[10,2],[10,2],[[33,-1],[[12,[10,43]]],48],[[34,-1],[[12,[10,43]]],48],[[35,-1],[[12,[10,43]]],48],[[36,-1],[[12,[10,43]]],48],[[37,-1],[[12,[10,43]]],48],[[38,-1],[[12,[10,43]]],48],[[39,-1],[[12,[10,43]]],48],[[40,-1],[[12,[10,43]]],48],[[41,-1],[[12,[10,43]]],48],[[42,-1],[[12,[10,43]]],48],[[33,-1],[[9,[[8,[7]]]]],[49,46,47]],[[34,-1],[[9,[[8,[7]]]]],[49,46,47]],[[35,-1],[[9,[[8,[7]]]]],[49,46,47]],[[36,-1],[[9,[[8,[7]]]]],[49,46,47]],[[37,-1],[[9,[[8,[7]]]]],[49,46,47]],[[38,-1],[[9,[[8,[7]]]]],[49,46,47]],[[39,-1],[[9,[[8,[7]]]]],[49,46,47]],[[40,-1],[[9,[[8,[7]]]]],[49,46,47]],[[41,-1],[[9,[[8,[7]]]]],[49,46,47]],[[42,-1],[[9,[[8,[7]]]]],[49,46,47]],0,0,0,0,0,0,[[33,20],21],[[34,20],21],[[35,20],21],[[36,20],21],[[37,20],21],[[38,20],21],[[39,20],21],[[40,20],21],[[41,20],21],[[42,20],21],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[[[17,[50]]],[[19,[2]]]],[[[17,[50]]],[[19,[2]]]],[[[17,[50]]],[[19,[2]]]],[[[17,[50]]],[[19,[2]]]],[[[17,[50]]],[[19,[2]]]],[[[17,[50]]],[[19,[2]]]],[[[17,[6]],51,52],[[19,[53]]]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[8,[-1]]],[[8,[3]]],[]],[[[8,[-1]]],[[8,[3]]],[]],[[[8,[-1]]],[[8,[3]]],[]],[[[8,[-1]]],[[8,[3]]],[]],[[[8,[-1]]],[[8,[3]]],[]],[[[8,[-1]]],[[8,[3]]],[]],[[[8,[-1]]],[[8,[3]]],[]],[[[8,[-1]]],[[8,[3]]],[]],[[[8,[-1]]],[[8,[3]]],[]],[[[8,[-1]]],[[8,[3]]],[]],[[[8,[-1]]],[[8,[3]]],[]],[[[17,[-1]]],[[17,[3]]],[]],[[[17,[-1]]],[[17,[3]]],[]],[[[17,[-1]]],[[17,[3]]],[]],[[[17,[-1]]],[[17,[3]]],[]],[[[17,[-1]]],[[17,[3]]],[]],[[[17,[-1]]],[[17,[3]]],[]],[[[17,[-1]]],[[17,[3]]],[]],[[[17,[-1]]],[[17,[3]]],[]],[[[17,[-1]]],[[17,[3]]],[]],[[[17,[-1]]],[[17,[3]]],[]],[[[17,[-1]]],[[17,[3]]],[]],[[[27,[-1]]],[[27,[3]]],[]],[[[27,[-1]]],[[27,[3]]],[]],[[[27,[-1]]],[[27,[3]]],[]],[[[27,[-1]]],[[27,[3]]],[]],[[[27,[-1]]],[[27,[3]]],[]],[[[27,[-1]]],[[27,[3]]],[]],[[[27,[-1]]],[[27,[3]]],[]],[[[27,[-1]]],[[27,[3]]],[]],[[[27,[-1]]],[[27,[3]]],[]],[[[27,[-1]]],[[27,[3]]],[]],[[[27,[-1]]],[[27,[3]]],[]],0,[[],[[12,[28,29]]]],[[],[[12,[28,29]]]],[[],[[12,[28,29]]]],[[],[[12,[28,29]]]],[[],[[12,[28,29]]]],[[],[[12,[28,29]]]],[[],[[12,[28,29]]]],[[],[[12,[28,29]]]],[[],[[12,[28,29]]]],[[],[[12,[28,29]]]],[[],[[12,[28,29]]]],[50,54],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[17,[50]],[17,[18]]],[[9,[[8,[7]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[[[8,[-1]]],[[8,[3]]],[]],[[[8,[-1]]],[[8,[3]]],[]],[[[8,[-1]]],[[8,[3]]],[]],[[[8,[-1]]],[[8,[3]]],[]],[[[8,[-1]]],[[8,[3]]],[]],[[[8,[-1]]],[[8,[3]]],[]],[[[8,[-1]]],[[8,[3]]],[]],[[[8,[-1]]],[[8,[3]]],[]],[[[8,[-1]]],[[8,[3]]],[]],[[[8,[-1]]],[[8,[3]]],[]],[[[8,[-1]]],[[8,[3]]],[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[],"p":[[3,"Private",500],[15,"tuple"],[8,"Any",501],[3,"App",502],[3,"Args",0],[3,"Fud",0],[8,"Future",503],[3,"Box",504],[3,"Pin",505],[15,"usize"],[3,"With",506],[4,"Result",507],[8,"Deserializer",508],[15,"u16"],[4,"JsonValue",509],[4,"JsonResult",510],[3,"Arc",511],[3,"Executor",512],[6,"Result",513],[3,"Formatter",514],[6,"Result",514],[3,"ArgMatches",515],[3,"JsonRequest",510],[6,"Signals",516],[3,"Sender",517],[6,"SubscriberPtr",518],[3,"Rc",519],[3,"Layout",520],[3,"LayoutError",520],[3,"SignalHandler",0],[3,"Task",521],[3,"TypeId",501],[3,"FudFilePut",115],[3,"FudChunkPut",115],[3,"FudFileRoute",115],[3,"FudChunkRoute",115],[3,"FudFileRequest",115],[3,"FudFileReply",115],[3,"FudChunkRequest",115],[3,"FudChunkReply",115],[3,"FudFileNotFound",115],[3,"FudChunkNotFound",115],[3,"Error",522],[8,"Read",523],[8,"AsyncRead",524],[8,"Unpin",525],[8,"Send",525],[8,"Write",523],[8,"AsyncWrite",524],[3,"ProtocolFud",115],[6,"ChannelPtr",526],[6,"P2pPtr",527],[6,"ProtocolBasePtr",528],[15,"str"]],"b":[]},\
"genev":{"doc":"","t":"NDNELLLLLLLLLLLLLMLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLFLLALLLLLLLLLLLLLLLLMLLMDLLLLLLLLLLLLLLLLLLLMLLLLLLL","n":["Add","Args","List","SubCmd","as_any","as_any","as_any_mut","as_any_mut","augment_args","augment_args_for_update","augment_subcommands","augment_subcommands_for_update","borrow","borrow","borrow_mut","borrow_mut","command","command","command_for_update","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","endpoint","from","from","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","group_id","has_subcommand","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","layout_raw","layout_raw","main","pointer_metadata","pointer_metadata","rpc","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","verbose","vzip","vzip","values","Gen","add","as_any","as_any_mut","borrow","borrow_mut","close_connection","deref","deref_mut","deserialize","drop","from","init","into","into_any","into_any_arc","into_any_rc","layout_raw","list","pointer_metadata","rpc_client","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip"],"q":[[0,"genev"],[71,"genev::SubCmd"],[72,"genev::rpc"],[100,"core::any"],[101,"clap_builder::builder::command"],[102,"rkyv::with"],[103,"core::result"],[104,"clap_builder::parser::matches::arg_matches"],[105,"clap_builder"],[106,"clap_builder::util::id"],[107,"core::option"],[108,"alloc::boxed"],[109,"alloc::sync"],[110,"alloc::rc"],[111,"core::alloc::layout"],[112,"core::alloc::layout"],[113,"core::any"],[114,"alloc::vec"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","JSON-RPC endpoint","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Increase verbosity (-vvv supported)","","","","","Add a new task.","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","Get current open tasks ids.","","","","","","","","",""],"i":[10,0,10,0,8,10,8,10,8,8,10,10,8,10,8,10,8,8,8,8,10,8,10,8,10,8,10,8,8,10,8,10,8,10,8,10,8,10,8,10,8,10,8,10,8,10,8,10,0,8,10,0,8,10,8,10,8,10,8,10,8,10,8,10,8,10,8,10,8,8,10,25,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22],"f":[0,0,0,0,[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[2,2],[2,2],[2,2],[2,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],2],0,[[],2],[3,-1,[]],[3,-1,[]],[3,-1,[]],[3,-1,[]],[[-1,-2],[[5,[[4,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[5,[[4,[-3,-4]]]]],[],[],[],[]],[3,6],[3,6],0,[-1,-1,[]],[-1,-1,[]],[7,[[5,[8,9]]]],[7,[[5,[10,9]]]],[7,[[5,[8,9]]]],[7,[[5,[10,9]]]],[[],[[12,[11]]]],[13,14],[[],3],[[],3],[-1,-2,[],[]],[-1,-2,[],[]],[[[15,[-1]]],[[15,[1]]],[]],[[[15,[-1]]],[[15,[1]]],[]],[[[16,[-1]]],[[16,[1]]],[]],[[[16,[-1]]],[[16,[1]]],[]],[[[17,[-1]]],[[17,[1]]],[]],[[[17,[-1]]],[[17,[1]]],[]],[[],[[5,[18,19]]]],[[],[[5,[18,19]]]],[[],[[20,[6]]]],[[]],[[]],0,[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,21,[]],[-1,21,[]],[[[15,[-1]]],[[15,[1]]],[]],[[[15,[-1]]],[[15,[1]]],[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[[8,7],[[5,[6,9]]]],[[10,7],[[5,[6,9]]]],[[8,7],[[5,[6,9]]]],[[10,7],[[5,[6,9]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[22,23],[[20,[6]]]],[-1,1,[]],[-1,1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[22,6],[3,-1,[]],[3,-1,[]],[[-1,-2],[[5,[[4,[-3,-4]]]]],[],[],[],[]],[3,6],[-1,-1,[]],[[],3],[-1,-2,[],[]],[[[15,[-1]]],[[15,[1]]],[]],[[[16,[-1]]],[[16,[1]]],[]],[[[17,[-1]]],[[17,[1]]],[]],[[],[[5,[18,19]]]],[22,[[20,[[24,[23]]]]]],[[]],0,[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,21,[]],[[[15,[-1]]],[[15,[1]]],[]],[-1,1,[]],[-1,1,[]],[-1,-2,[],[]]],"c":[],"p":[[8,"Any",100],[3,"Command",101],[15,"usize"],[3,"With",102],[4,"Result",103],[15,"tuple"],[3,"ArgMatches",104],[3,"Args",0],[6,"Error",105],[4,"SubCmd",0],[3,"Id",106],[4,"Option",107],[15,"str"],[15,"bool"],[3,"Box",108],[3,"Arc",109],[3,"Rc",110],[3,"Layout",111],[3,"LayoutError",111],[6,"Result",112],[3,"TypeId",100],[3,"Gen",72],[3,"GenEvent",113],[3,"Vec",114],[13,"Add",71]],"b":[]},\
"genevd":{"doc":"","t":"DLLLLLLLLLLLLLLLMMMLLLLL","n":["GenEvent","borrow","borrow_mut","clone","clone_into","decode","decode_async","deref","deref_mut","drop","encode","encode_async","fmt","from","init","into","nick","text","title","to_owned","try_from","try_into","type_id","vzip"],"q":[[0,"genevd"],[24,"std::io::error"],[25,"core::result"],[26,"std::io"],[27,"core::future::future"],[28,"alloc::boxed"],[29,"core::pin"],[30,"futures_io::if_std"],[31,"core::marker"],[32,"core::marker"],[33,"core::fmt"]],"d":["","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[-1,-2],2,[],[]],[-1,[[4,[1,3]]],5],[-1,[[8,[[7,[6]]]]],[9,10,11]],[12,-1,[]],[12,-1,[]],[12,2],[[1,-1],[[4,[12,3]]],13],[[1,-1],[[8,[[7,[6]]]]],[14,10,11]],[[1,15],16],[-1,-1,[]],[[],12],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,17,[]],[-1,-2,[],[]]],"c":[],"p":[[3,"GenEvent",0],[15,"tuple"],[3,"Error",24],[4,"Result",25],[8,"Read",26],[8,"Future",27],[3,"Box",28],[3,"Pin",29],[8,"AsyncRead",30],[8,"Unpin",31],[8,"Send",31],[15,"usize"],[8,"Write",26],[8,"AsyncWrite",30],[3,"Formatter",32],[6,"Result",32],[3,"TypeId",33]],"b":[]},\
"lilith":{"doc":"","t":"DRRDDRRDDLLMLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLFMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFMMFLMMLMFMLLLLLLFMMFMMFLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLL","n":["Args","CONFIG_FILE","CONFIG_FILE_CONTENTS","Lilith","NetInfo","PROBE_HOSTS_N","PURGE_PERIOD","SignalHandler","Spawn","__clone_box","__clone_box","accept_addrs","addresses","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clap","clone","clone","clone_into","clone_into","config","connections_mut","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","fmt","from","from","from","from","from","from_clap","handle","handle_request","handle_signals","hosts_file","info","init","init","init","init","init","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","load_hosts","localnet","log","main","merge","name","networks","new","p2p","parse_configured_networks","peers","periodic_purge","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","realmain","rpc_connections","rpc_listen","save_hosts","seeds","sighup_sub","spawn_net","spawns","term_rx","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","verbose","version","vzip","vzip","vzip","vzip","vzip","wait_termination"],"q":[[0,"lilith"],[170,"dyn_clone::sealed"],[171,"tinyjson::json_value"],[172,"alloc::vec"],[173,"core::any"],[174,"clap::app"],[175,"core::future::future"],[176,"alloc::boxed"],[177,"core::pin"],[178,"rkyv::with"],[179,"core::result"],[180,"serde::de"],[181,"core::fmt"],[182,"core::fmt"],[183,"darkfi::rpc::jsonrpc"],[184,"signal_hook_async_std"],[185,"async_channel"],[186,"darkfi::system::subscriber"],[187,"darkfi::error"],[188,"alloc::sync"],[189,"alloc::rc"],[190,"core::alloc::layout"],[191,"core::alloc::layout"],[192,"alloc::string"],[193,"url"],[194,"std::collections::hash::set"],[195,"std::collections::hash::map"],[196,"async_executor"],[197,"async_task::task"],[198,"darkfi::net::p2p"],[199,"darkfi::rpc::jsonrpc"]],"d":["","","","Struct representing the daemon","Defines the network-specific settings","Amount of hosts to try each purge iteration","Period in which the peer purge happens (in seconds)","Auxiliary structure used to keep track of signals","Struct representing a spawned P2P network","","","Accept addresses the network will use","","","","","","","","","","","","","","","","","","","","","","","","","","","Configuration file to use","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Signals handle","","Auxiliary task to handle SIGHUP, SIGTERM, SIGINT and …","Hosts .tsv file to use","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Attempt to read existing hosts tsv","Enable localnet hosts","Set log file to ouput into","","","String identifier,","Spawned networks","","P2P pointer","Parse a TOML string for any configured network and return …","Manual peers to connect to","Internal task to run a periodic purge of unreachable hosts …","","","","","","","JSON-RPC connection tracker","JSON-RPC listen URL","","Other seeds to connect to","SIGHUP subscriber to retrieve new configuration,","","","Termination signal channel receiver","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Increase verbosity (-vvv supported)","Supported network version","","","","","","Handler waits for termination signal"],"i":[0,0,0,0,0,0,0,0,0,8,9,9,3,3,10,8,9,38,3,10,8,9,38,3,10,8,9,38,3,10,8,9,38,8,8,9,8,9,8,10,8,3,10,8,9,38,3,10,8,9,38,3,10,8,8,9,38,3,10,8,9,38,8,3,10,8,9,38,8,38,10,0,8,3,3,10,8,9,38,3,10,8,9,38,3,10,8,9,38,3,10,8,9,38,3,10,8,9,38,3,10,8,9,38,0,9,8,0,8,3,10,38,3,0,9,10,3,10,8,9,38,0,10,8,0,9,38,0,10,38,8,9,3,10,8,9,38,3,10,8,9,38,3,10,8,9,38,3,10,8,9,38,3,10,8,9,38,3,10,8,9,38,8,9,3,10,8,9,38,38],"f":[0,0,0,0,0,0,0,0,0,[[-1,1],2,[]],[[-1,1],2,[]],0,[3,[[5,[4]]]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],7],[8,8],[9,9],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[10,[[13,[[12,[11]]]]]],[[],8],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[-1,[[16,[8]]],17],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[16,[[15,[-3,-4]]]]],[],[],[],[]],[14,2],[14,2],[14,2],[14,2],[14,2],[[8,18],19],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[20,8],0,[[10,21],[[13,[[12,[11]]]]]],[[22,[23,[2]],[24,[8]]],[[25,[2]]]],0,[3,4],[[],14],[[],14],[[],14],[[],14],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[12,[-1]]],[[12,[6]]],[]],[[[12,[-1]]],[[12,[6]]],[]],[[[12,[-1]]],[[12,[6]]],[]],[[[12,[-1]]],[[12,[6]]],[]],[[[12,[-1]]],[[12,[6]]],[]],[[[26,[-1]]],[[26,[6]]],[]],[[[26,[-1]]],[[26,[6]]],[]],[[[26,[-1]]],[[26,[6]]],[]],[[[26,[-1]]],[[26,[6]]],[]],[[[26,[-1]]],[[26,[6]]],[]],[[[27,[-1]]],[[27,[6]]],[]],[[[27,[-1]]],[[27,[6]]],[]],[[[27,[-1]]],[[27,[6]]],[]],[[[27,[-1]]],[[27,[6]]],[]],[[[27,[-1]]],[[27,[6]]],[]],[[],[[16,[28,29]]]],[[],[[16,[28,29]]]],[[],[[16,[28,29]]]],[[],[[16,[28,29]]]],[[],[[16,[28,29]]]],[[30,[32,[31]]],[[36,[33,[35,[34]]]]]],0,0,[[],[[25,[2]]]],[[8,8,20],8],0,0,[[[26,[37]]],[[25,[[2,[38,[39,[[25,[2]]]]]]]]]],0,[31,[[25,[[36,[33,9]]]]]],0,[[33,40,[26,[37]]],[[25,[2]]]],[[]],[[]],[[]],[[]],[[]],[[8,[26,[37]]],[[25,[2]]]],0,0,[[30,[32,[3]]],2],0,0,[[33,9,[35,[34]],[26,[37]]],[[25,[3]]]],[[10,41,4],42],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,43,[]],[-1,43,[]],[-1,43,[]],[-1,43,[]],[-1,43,[]],[[[12,[-1]]],[[12,[6]]],[]],[[[12,[-1]]],[[12,[6]]],[]],[[[12,[-1]]],[[12,[6]]],[]],[[[12,[-1]]],[[12,[6]]],[]],[[[12,[-1]]],[[12,[6]]],[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[38,[39,[[25,[2]]]]],[[25,[2]]]]],"c":[],"p":[[3,"Private",170],[15,"tuple"],[3,"Spawn",0],[4,"JsonValue",171],[3,"Vec",172],[8,"Any",173],[3,"App",174],[3,"Args",0],[3,"NetInfo",0],[3,"Lilith",0],[8,"Future",175],[3,"Box",176],[3,"Pin",177],[15,"usize"],[3,"With",178],[4,"Result",179],[8,"Deserializer",180],[3,"Formatter",181],[6,"Result",181],[3,"ArgMatches",182],[3,"JsonRequest",183],[6,"Signals",184],[3,"Sender",185],[6,"SubscriberPtr",186],[6,"Result",187],[3,"Arc",188],[3,"Rc",189],[3,"Layout",190],[3,"LayoutError",190],[3,"Path",191],[15,"str"],[15,"slice"],[3,"String",192],[3,"Url",193],[3,"HashSet",194],[3,"HashMap",195],[3,"Executor",196],[3,"SignalHandler",0],[3,"Task",197],[6,"P2pPtr",198],[15,"u16"],[4,"JsonResult",183],[3,"TypeId",173]],"b":[]},\
"taud":{"doc":"","t":"AAAANNNNNNNNNNEGLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLDLMLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDNNNENDDLLLMLLLLLLLLLMMMLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLMLLLLLLLLMLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLMMMLLLLLLLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMFFF","n":["error","month_tasks","task_info","util","Darkfi","DecryptionError","EncryptionError","Err","InvalidData","InvalidDueTime","InvalidId","IoError","JsonError","Ok","TaudError","TaudResult","as_any","as_any_mut","as_error","borrow","borrow_mut","deref","deref_mut","deserialize","drop","fmt","fmt","from","from","from","from","init","into","into_any","into_any_arc","into_any_rc","layout_raw","pointer_metadata","source","to_json_result","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","MonthTasks","__clone_box","active_tks","add","as_any","as_any_mut","borrow","borrow_mut","clone","clone_into","create","created_at","deactive_tks","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","from","get_all","get_path","init","into","into_any","into_any_arc","into_any_rc","layout_raw","load_current_tasks","load_or_create","load_stop_tasks","new","objects","pointer_metadata","remove","save","set_date","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Comment","Open","Pause","Start","State","Stop","TaskEvent","TaskInfo","__clone_box","__clone_box","__clone_box","action","activate","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","assign","author","author","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","comments","content","content","created_at","deactivate","decode","decode","decode","decode_async","decode_async","decode_async","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","desc","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","due","encode","encode","encode","encode_async","encode_async","encode_async","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","events","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_str","get_path","get_ref_id","get_state","init","init","init","init","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","is_pause","is_start","is_stop","layout_raw","layout_raw","layout_raw","layout_raw","load","new","new","new","owner","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","project","rank","ref_id","save","set_assign","set_comment","set_desc","set_due","set_project","set_rank","set_state","set_tags","set_title","state","tags","timestamp","timestamp","title","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","workspace","gen_id","pipe_write","set_event"],"q":[[0,"taud"],[4,"taud::error"],[48,"taud::month_tasks"],[98,"taud::task_info"],[290,"taud::util"],[293,"core::any"],[294,"core::error"],[295,"rkyv::with"],[296,"core::result"],[297,"core::fmt"],[298,"core::fmt"],[299,"darkfi::error"],[300,"std::io::error"],[301,"alloc::boxed"],[302,"alloc::sync"],[303,"alloc::rc"],[304,"core::alloc::layout"],[305,"core::alloc::layout"],[306,"tinyjson::json_value"],[307,"darkfi::rpc::jsonrpc"],[308,"alloc::string"],[309,"core::any"],[310,"darkfi::util::time"],[311,"std::path"],[312,"std::path"],[313,"std::io::error"],[314,"core::future::future"],[315,"core::pin"],[316,"futures_io::if_std"],[317,"core::marker"],[318,"core::marker"],[319,"darkfi::error"]],"d":["","","","","","","","Contains the error value","","","","","","Contains the success value","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,7,7,7,20,7,7,7,7,7,20,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,7,7,7,7,7,7,7,7,0,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,0,46,46,46,0,46,0,0,36,37,34,36,34,46,36,37,34,46,36,37,34,34,36,37,46,36,37,34,46,36,37,34,36,37,34,36,37,34,34,36,37,34,34,36,37,34,36,37,34,36,46,36,37,34,46,36,37,34,34,46,36,37,34,46,36,37,34,34,36,37,34,36,37,34,36,37,34,36,36,36,36,37,37,37,37,34,46,36,36,37,37,34,46,36,36,37,37,34,34,46,34,34,34,46,36,37,34,46,36,37,34,46,36,37,34,46,36,37,34,46,36,37,34,46,46,46,46,36,37,34,34,36,37,34,34,46,36,37,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,36,37,34,36,37,34,46,36,37,46,36,37,34,46,36,37,34,46,36,37,34,46,36,37,34,46,36,37,34,46,36,37,34,46,36,37,34,34,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,1,[]],[-1,1,[]],[-1,2,[]],[-1,-2,[],[]],[-1,-2,[],[]],[3,-1,[]],[3,-1,[]],[[-1,-2],[[5,[[4,[-3,-4]]]]],[],[],[],[]],[3,6],[[7,8],9],[[7,8],9],[-1,-1,[]],[10,7],[11,7],[12,7],[[],3],[-1,-2,[],[]],[[[13,[-1]]],[[13,[1]]],[]],[[[14,[-1]]],[[14,[1]]],[]],[[[15,[-1]]],[[15,[1]]],[]],[[],[[5,[16,17]]]],[[]],[7,[[18,[2]]]],[[[20,[19]],21],22],[-1,23,[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,24,[]],[[[13,[-1]]],[[13,[1]]],[]],[-1,1,[]],[-1,1,[]],[-1,-2,[],[]],0,[[-1,25],6,[]],0,[[26,27],6],[-1,1,[]],[-1,1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[26,26],[[-1,-2],6,[],[]],[[28,29],[[20,[26]]]],0,0,[3,-1,[]],[3,-1,[]],[[-1,-2],[[5,[[4,[-3,-4]]]]],[],[],[],[]],[3,6],[[26,26],30],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[26,8],9],[19,26],[-1,-1,[]],[29,[[33,[[32,[31]]]]]],[[28,29],31],[[],3],[-1,-2,[],[]],[[[13,[-1]]],[[13,[1]]],[]],[[[14,[-1]]],[[14,[1]]],[]],[[[15,[-1]]],[[15,[1]]],[]],[[],[[5,[16,17]]]],[[29,23,30],[[20,[[32,[34]]]]]],[[[18,[28]],29],[[20,[26]]]],[[29,23,[18,[28]]],[[20,[[32,[34]]]]]],[[[35,[23]],[35,[23]]],26],[[26,29],[[20,[[32,[34]]]]]],[[]],[[26,27],6],[[26,29],[[20,[6]]]],[[26,28],6],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,24,[]],[[[13,[-1]]],[[13,[1]]],[]],[-1,1,[]],[-1,1,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,[[-1,25],6,[]],[[-1,25],6,[]],[[-1,25],6,[]],0,[[34,29],[[20,[6]]]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[36,36],[37,37],[34,34],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],0,0,0,0,[[34,29],[[20,[6]]]],[-1,[[5,[36,12]]],38],[-1,[[5,[37,12]]],38],[-1,[[5,[34,12]]],38],[-1,[[40,[[13,[39]]]]],[41,42,43]],[-1,[[40,[[13,[39]]]]],[41,42,43]],[-1,[[40,[[13,[39]]]]],[41,42,43]],[[],36],[3,-1,[]],[3,-1,[]],[3,-1,[]],[3,-1,[]],[3,-1,[]],[3,-1,[]],[3,-1,[]],[3,-1,[]],0,[[-1,-2],[[5,[[4,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[5,[[4,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[5,[[4,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[5,[[4,[-3,-4]]]]],[],[],[],[]],[3,6],[3,6],[3,6],[3,6],0,[[36,-1],[[5,[3,12]]],44],[[37,-1],[[5,[3,12]]],44],[[34,-1],[[5,[3,12]]],44],[[36,-1],[[40,[[13,[39]]]]],[45,42,43]],[[37,-1],[[40,[[13,[39]]]]],[45,42,43]],[[34,-1],[[40,[[13,[39]]]]],[45,42,43]],[[36,36],30],[[37,37],30],[[34,34],30],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],0,[[46,8],9],[[36,8],9],[[36,8],9],[[37,8],9],[[37,8],9],[[34,8],9],[-1,-1,[]],[19,36],[-1,-1,[]],[-1,-1,[]],[19,37],[-1,-1,[]],[19,34],[27,[[5,[46]]]],[[27,29],31],[34,23],[34,23],[[],3],[[],3],[[],3],[[],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[13,[-1]]],[[13,[1]]],[]],[[[13,[-1]]],[[13,[1]]],[]],[[[13,[-1]]],[[13,[1]]],[]],[[[13,[-1]]],[[13,[1]]],[]],[[[14,[-1]]],[[14,[1]]],[]],[[[14,[-1]]],[[14,[1]]],[]],[[[14,[-1]]],[[14,[1]]],[]],[[[14,[-1]]],[[14,[1]]],[]],[[[15,[-1]]],[[15,[1]]],[]],[[[15,[-1]]],[[15,[1]]],[]],[[[15,[-1]]],[[15,[1]]],[]],[[[15,[-1]]],[[15,[1]]],[]],[46,30],[46,30],[46,30],[[],[[5,[16,17]]]],[[],[[5,[16,17]]]],[[],[[5,[16,17]]]],[[],[[5,[16,17]]]],[[27,29],[[20,[34]]]],[[23,23,23],36],[[27,27],37],[[23,27,27,27,[18,[28]],[18,[47]],28],[[20,[34]]]],0,[[]],[[]],[[]],[[]],0,0,0,[[34,29],[[20,[6]]]],[[34,[35,[23]]],6],[[34,37],6],[[34,27],6],[[34,[18,[28]]],6],[[34,[35,[23]]],6],[[34,[18,[47]]],6],[[34,27],6],[[34,[35,[23]]],6],[[34,27],6],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[[[13,[-1]]],[[13,[1]]],[]],[[[13,[-1]]],[[13,[1]]],[]],[[[13,[-1]]],[[13,[1]]],[]],[[[13,[-1]]],[[13,[1]]],[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[3,23],[-1,[[49,[48]]],[[50,[29]]]],[[34,27,27,27],6]],"c":[],"p":[[8,"Any",293],[8,"Error",294],[15,"usize"],[3,"With",295],[4,"Result",296],[15,"tuple"],[4,"TaudError",4],[3,"Formatter",297],[6,"Result",297],[3,"Error",298],[4,"Error",299],[3,"Error",300],[3,"Box",301],[3,"Arc",302],[3,"Rc",303],[3,"Layout",304],[3,"LayoutError",304],[4,"Option",305],[4,"JsonValue",306],[6,"TaudResult",4],[15,"u16"],[4,"JsonResult",307],[3,"String",308],[3,"TypeId",293],[3,"Private",309],[3,"MonthTasks",48],[15,"str"],[3,"Timestamp",310],[3,"Path",311],[15,"bool"],[3,"PathBuf",311],[3,"Vec",312],[6,"Result",300],[3,"TaskInfo",98],[15,"slice"],[3,"TaskEvent",98],[3,"Comment",98],[8,"Read",313],[8,"Future",314],[3,"Pin",315],[8,"AsyncRead",316],[8,"Unpin",317],[8,"Send",317],[8,"Write",313],[8,"AsyncWrite",316],[4,"State",98],[15,"f32"],[3,"File",318],[6,"Result",299],[8,"AsRef",319]],"b":[[25,"impl-Display-for-TaudError"],[26,"impl-Debug-for-TaudError"],[28,"impl-From%3CError%3E-for-TaudError"],[29,"impl-From%3CError%3E-for-TaudError"],[30,"impl-From%3CError%3E-for-TaudError"],[185,"impl-Debug-for-TaskEvent"],[186,"impl-Display-for-TaskEvent"],[187,"impl-Display-for-Comment"],[188,"impl-Debug-for-Comment"]]},\
"vanityaddr":{"doc":"","t":"RDDDIRLLLLLLLLLLLLMLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLFKLLLLLLMMMMLLKLLLMLLLLLLLLLLLLLLLLLLFLLL","n":["ABOUT","DrkAddr","DrkContract","DrkToken","Prefixable","USAGE","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","contract_id","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","from","from","from","get_secret","get_secret","get_secret","get_secret","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","layout_raw","layout_raw","layout_raw","main","new","new","new","new","pointer_metadata","pointer_metadata","pointer_metadata","public","secret","secret","secret","starts_with","starts_with_any","to_string","to_string","to_string","to_string","token_id","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","usage","vzip","vzip","vzip"],"q":[[0,"vanityaddr"],[97,"core::any"],[98,"rkyv::with"],[99,"core::result"],[100,"darkfi_sdk::crypto::keypair"],[101,"alloc::boxed"],[102,"alloc::sync"],[103,"alloc::rc"],[104,"core::alloc::layout"],[105,"core::alloc::layout"],[106,"alloc::string"],[107,"core::any"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,7,8,9,7,8,9,7,8,9,7,8,9,9,7,8,9,7,8,9,7,8,9,7,8,9,7,8,9,21,7,8,9,7,8,9,7,8,9,7,8,9,7,8,9,7,8,9,7,8,9,0,21,7,8,9,7,8,9,7,7,8,9,21,21,21,7,8,9,8,7,8,9,7,8,9,7,8,9,7,8,9,7,8,9,7,8,9,0,7,8,9],"f":[0,0,0,0,0,0,[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[2,5],[2,5],[2,5],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,6,[]],[7,6],[8,6],[9,6],[[],2],[[],2],[[],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[10,[-1]]],[[10,[1]]],[]],[[[10,[-1]]],[[10,[1]]],[]],[[[10,[-1]]],[[10,[1]]],[]],[[[11,[-1]]],[[11,[1]]],[]],[[[11,[-1]]],[[11,[1]]],[]],[[[11,[-1]]],[[11,[1]]],[]],[[[12,[-1]]],[[12,[1]]],[]],[[[12,[-1]]],[[12,[1]]],[]],[[[12,[-1]]],[[12,[1]]],[]],[[],[[4,[13,14]]]],[[],[[4,[13,14]]]],[[],[[4,[13,14]]]],[[],15],[[],-1,[]],[[],7],[[],8],[[],9],[[]],[[]],[[]],0,0,0,0,[[-1,16,17],17,[]],[[-1,[19,[18]],17],17,[]],[-1,18,[]],[7,18],[8,18],[9,18],0,[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[[[10,[-1]]],[[10,[1]]],[]],[[[10,[-1]]],[[10,[1]]],[]],[[[10,[-1]]],[[10,[1]]],[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[],"p":[[8,"Any",97],[15,"usize"],[3,"With",98],[4,"Result",99],[15,"tuple"],[3,"SecretKey",100],[3,"DrkAddr",0],[3,"DrkToken",0],[3,"DrkContract",0],[3,"Box",101],[3,"Arc",102],[3,"Rc",103],[3,"Layout",104],[3,"LayoutError",104],[3,"ExitCode",105],[15,"str"],[15,"bool"],[3,"String",106],[15,"slice"],[3,"TypeId",97],[8,"Prefixable",0]],"b":[]},\
"zkas":{"doc":"","t":"RRFF","n":["ABOUT","USAGE","main","usage"],"q":[[0,"zkas"],[4,"std::process"]],"d":["","","",""],"i":[0,0,0,0],"f":[0,0,[[],1],[[],2]],"c":[],"p":[[3,"ExitCode",4],[15,"tuple"]],"b":[]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
